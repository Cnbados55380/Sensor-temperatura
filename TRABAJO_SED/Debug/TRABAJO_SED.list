
TRABAJO_SED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008168  08008168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800858c  0800858c  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008594  08008594  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800859c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000234  080087d0  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  080087d0  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f08e  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002267  00000000  00000000  0002f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00032430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f4  00000000  00000000  00033210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e48  00000000  00000000  0004bc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc2a  00000000  00000000  0005ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  000f86c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008150 	.word	0x08008150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	08008150 	.word	0x08008150

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <DWT_Delay_Init>:
uint8_t Presence = 0 ;	//Indica si el sensor ha detectado la petición de recibir datos de la placa



uint32_t DWT_Delay_Init(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <DWT_Delay_Init+0x58>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <DWT_Delay_Init+0x58>)
 8000ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eca:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <DWT_Delay_Init+0x58>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <DWT_Delay_Init+0x58>)
 8000ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ef6:	bf00      	nop
     __ASM volatile ("NOP");
 8000ef8:	bf00      	nop
     __ASM volatile ("NOP");
 8000efa:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <DWT_Delay_Init+0x5c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f04:	2300      	movs	r3, #0
 8000f06:	e000      	b.n	8000f0a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f08:	2301      	movs	r3, #1
  }
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000edf0 	.word	0xe000edf0
 8000f18:	e0001000 	.word	0xe0001000

08000f1c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds) //Se crea un delay usando la frecuencia del reloj del sistema
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <delay+0x40>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f2a:	f003 f9cf 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <delay+0x44>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f40:	bf00      	nop
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <delay+0x40>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad2      	subs	r2, r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3f8      	bcc.n	8000f42 <delay+0x26>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e0001000 	.word	0xe0001000
 8000f60:	431bde83 	.word	0x431bde83

08000f64 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) //Un pin dado se define como salida
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f001 ff1c 	bl	8002dd0 <HAL_GPIO_Init>
}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) //Un pin dado se define como entrada
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f001 fefe 	bl	8002dd0 <HAL_GPIO_Init>
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <DHT_Start>:


void DHT_Start (void){ //Petición de la placa para recibir datos.
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
					   //Se crea un pulso a nivel bajo de 1-10ms, seguido de uno a nivel alto de 20-40us. (DTH22)
					   //Tras mandar el pulso se pone el pin como entrada para recibir datos del sensor

	DWT_Delay_Init();
 8000fe0:	f7ff ff6c 	bl	8000ebc <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <DHT_Start+0x40>)
 8000fe8:	f7ff ffbc 	bl	8000f64 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <DHT_Start+0x40>)
 8000ff2:	f002 f889 	bl	8003108 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (10000);  // >1ms delay
 8000ff6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ffa:	f7ff ff8f 	bl	8000f1c <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ffe:	2201      	movs	r2, #1
 8001000:	2102      	movs	r1, #2
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <DHT_Start+0x40>)
 8001004:	f002 f880 	bl	8003108 <HAL_GPIO_WritePin>
    delay (30);   // wait for 43us
 8001008:	201e      	movs	r0, #30
 800100a:	f7ff ff87 	bl	8000f1c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800100e:	2102      	movs	r1, #2
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DHT_Start+0x40>)
 8001012:	f7ff ffc5 	bl	8000fa0 <Set_Pin_Input>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000

08001020 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void){ //Comprobación de que el sensor ha detectado la petición de la placa
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
								   //Devuelve 0 si no lo ha detectado, -1 si el pulso de confirmación es errónea y 1 si es correcto

	uint8_t Response = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800102a:	2028      	movs	r0, #40	; 0x28
 800102c:	f7ff ff76 	bl	8000f1c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001030:	2102      	movs	r1, #2
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <DHT_Check_Response+0x58>)
 8001034:	f002 f850 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10e      	bne.n	800105c <DHT_Check_Response+0x3c>
	{
		delay (80);
 800103e:	2050      	movs	r0, #80	; 0x50
 8001040:	f7ff ff6c 	bl	8000f1c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001044:	2102      	movs	r1, #2
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <DHT_Check_Response+0x58>)
 8001048:	f002 f846 	bl	80030d8 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <DHT_Check_Response+0x38>
 8001052:	2301      	movs	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e001      	b.n	800105c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	71fb      	strb	r3, [r7, #7]
	}
	while (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN));   // wait for the pin to go low
 800105c:	bf00      	nop
 800105e:	2102      	movs	r1, #2
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <DHT_Check_Response+0x58>)
 8001062:	f002 f839 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f8      	bne.n	800105e <DHT_Check_Response+0x3e>

	return Response;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020000 	.word	0x40020000

0800107c <DHT_Read>:

uint8_t DHT_Read (void){ //Lee un byte de datos (1 bit cada 35us). Desplaza y concatena cada bit en una sola variable
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

	uint8_t i,j;
	for (j=0;j<8;j++)
 8001082:	2300      	movs	r3, #0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	e037      	b.n	80010f8 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001088:	bf00      	nop
 800108a:	2102      	movs	r1, #2
 800108c:	481e      	ldr	r0, [pc, #120]	; (8001108 <DHT_Read+0x8c>)
 800108e:	f002 f823 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <DHT_Read+0xe>
		delay (35);   // wait for 35 us
 8001098:	2023      	movs	r0, #35	; 0x23
 800109a:	f7ff ff3f 	bl	8000f1c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800109e:	2102      	movs	r1, #2
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <DHT_Read+0x8c>)
 80010a2:	f002 f819 	bl	80030d8 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10e      	bne.n	80010ca <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2201      	movs	r2, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4013      	ands	r3, r2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	e00b      	b.n	80010e2 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	f1c3 0307 	rsb	r3, r3, #7
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010e2:	bf00      	nop
 80010e4:	2102      	movs	r1, #2
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <DHT_Read+0x8c>)
 80010e8:	f001 fff6 	bl	80030d8 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f8      	bne.n	80010e4 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	3301      	adds	r3, #1
 80010f6:	71bb      	strb	r3, [r7, #6]
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b07      	cmp	r3, #7
 80010fc:	d9c4      	bls.n	8001088 <DHT_Read+0xc>
	}
	return i;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020000 	.word	0x40020000

0800110c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001114:	f7ff ff62 	bl	8000fdc <DHT_Start>
	Presence = DHT_Check_Response ();
 8001118:	f7ff ff82 	bl	8001020 <DHT_Check_Response>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <DHT_GetData+0xbc>)
 8001122:	701a      	strb	r2, [r3, #0]
	if (Presence == 1){
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <DHT_GetData+0xbc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d148      	bne.n	80011be <DHT_GetData+0xb2>
		Rh_byte1 = DHT_Read ();
 800112c:	f7ff ffa6 	bl	800107c <DHT_Read>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <DHT_GetData+0xc0>)
 8001136:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT_Read ();
 8001138:	f7ff ffa0 	bl	800107c <DHT_Read>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <DHT_GetData+0xc4>)
 8001142:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT_Read ();
 8001144:	f7ff ff9a 	bl	800107c <DHT_Read>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <DHT_GetData+0xc8>)
 800114e:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT_Read ();
 8001150:	f7ff ff94 	bl	800107c <DHT_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <DHT_GetData+0xcc>)
 800115a:	701a      	strb	r2, [r3, #0]
		SUM = DHT_Read();
 800115c:	f7ff ff8e 	bl	800107c <DHT_Read>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <DHT_GetData+0xd0>)
 8001166:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)) //Comprobación de envío correcto
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <DHT_GetData+0xd0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <DHT_GetData+0xc0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <DHT_GetData+0xc4>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <DHT_GetData+0xc8>)
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <DHT_GetData+0xcc>)
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	4413      	add	r3, r2
 8001186:	4299      	cmp	r1, r3
 8001188:	d119      	bne.n	80011be <DHT_GetData+0xb2>
				DHT_Data->Temperature = Temp_byte1;
				DHT_Data->Humidity = Rh_byte1;
			#endif

			#if defined(TYPE_DHT22)
				DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <DHT_GetData+0xc8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <DHT_GetData+0xcc>)
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	4313      	orrs	r3, r2
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
				DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <DHT_GetData+0xc0>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <DHT_GetData+0xc4>)
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->Temperature = 0xFFFF;
			DHT_Data->Humidity = 0xFFFF;
		#endif
	}

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000256 	.word	0x20000256
 80011cc:	20000250 	.word	0x20000250
 80011d0:	20000251 	.word	0x20000251
 80011d4:	20000252 	.word	0x20000252
 80011d8:	20000253 	.word	0x20000253
 80011dc:	20000254 	.word	0x20000254

080011e0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030c 	orr.w	r3, r3, #12
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030c 	orr.w	r3, r3, #12
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_cmd+0x5c>)
 800122e:	f002 f8e1 	bl	80033f4 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002a0 	.word	0x200002a0

08001240 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f023 030f 	bic.w	r3, r3, #15
 8001250:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f043 030d 	orr.w	r3, r3, #13
 800125e:	b2db      	uxtb	r3, r3
 8001260:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	f043 0309 	orr.w	r3, r3, #9
 8001268:	b2db      	uxtb	r3, r3
 800126a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	f043 030d 	orr.w	r3, r3, #13
 8001272:	b2db      	uxtb	r3, r3
 8001274:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	f043 0309 	orr.w	r3, r3, #9
 800127c:	b2db      	uxtb	r3, r3
 800127e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2304      	movs	r3, #4
 800128a:	214e      	movs	r1, #78	; 0x4e
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <lcd_send_data+0x5c>)
 800128e:	f002 f8b1 	bl	80033f4 <HAL_I2C_Master_Transmit>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002a0 	.word	0x200002a0

080012a0 <lcd_clear_row>:

void lcd_clear_row(int row)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	lcd_put_cur(row , 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f81b 	bl	80012e6 <lcd_put_cur>
	for (int i=0; i<35; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e005      	b.n	80012c2 <lcd_clear_row+0x22>
	{
		lcd_send_data (' ');
 80012b6:	2020      	movs	r0, #32
 80012b8:	f7ff ffc2 	bl	8001240 <lcd_send_data>
	for (int i=0; i<35; i++)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b22      	cmp	r3, #34	; 0x22
 80012c6:	ddf6      	ble.n	80012b6 <lcd_clear_row+0x16>
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <lcd_clear>:

void lcd_clear (void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
	lcd_clear_row(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ffe2 	bl	80012a0 <lcd_clear_row>
	lcd_clear_row(2);
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff ffdf 	bl	80012a0 <lcd_clear_row>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <lcd_put_cur>:

void lcd_put_cur(int row, int col) //row [0,1], col[0,15]
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
    switch (row)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <lcd_put_cur+0x18>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d005      	beq.n	8001308 <lcd_put_cur+0x22>
 80012fc:	e009      	b.n	8001312 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	603b      	str	r3, [r7, #0]
            break;
 8001306:	e004      	b.n	8001312 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800130e:	603b      	str	r3, [r7, #0]
            break;
 8001310:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff62 	bl	80011e0 <lcd_send_cmd>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <lcd_init>:


void lcd_init (void) //La sucesión de inicialización se encuentra en el datasheet y en la memoria. Se usa el modo de 4 bits
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001328:	2032      	movs	r0, #50	; 0x32
 800132a:	f001 f829 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x30);
 800132e:	2030      	movs	r0, #48	; 0x30
 8001330:	f7ff ff56 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001334:	2005      	movs	r0, #5
 8001336:	f001 f823 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x30);
 800133a:	2030      	movs	r0, #48	; 0x30
 800133c:	f7ff ff50 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001340:	2001      	movs	r0, #1
 8001342:	f001 f81d 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001346:	2030      	movs	r0, #48	; 0x30
 8001348:	f7ff ff4a 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f001 f817 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001352:	2020      	movs	r0, #32
 8001354:	f7ff ff44 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f001 f811 	bl	8002380 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800135e:	2028      	movs	r0, #40	; 0x28
 8001360:	f7ff ff3e 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f001 f80b 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800136a:	2008      	movs	r0, #8
 800136c:	f7ff ff38 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f001 f805 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff32 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f000 ffff 	bl	8002380 <HAL_Delay>
	HAL_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 fffc 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001388:	2006      	movs	r0, #6
 800138a:	f7ff ff29 	bl	80011e0 <lcd_send_cmd>
	HAL_Delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 fff6 	bl	8002380 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001394:	200c      	movs	r0, #12
 8001396:	f7ff ff23 	bl	80011e0 <lcd_send_cmd>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80013a6:	e006      	b.n	80013b6 <lcd_send_string+0x18>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff45 	bl	8001240 <lcd_send_data>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f4      	bne.n	80013a8 <lcd_send_string+0xa>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Display_Rh>:

void Display_Rh(float Rh){  // Antes de mostrar el dato se limpia la fila
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	ed87 0a01 	vstr	s0, [r7, #4]

	char str[20] = {0};
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
	lcd_clear_row(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff ff5b 	bl	80012a0 <lcd_clear_row>
	lcd_put_cur(1,0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff ff7a 	bl	80012e6 <lcd_put_cur>

	sprintf(str,"RH:%.2f",Rh/10);
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fe:	ee16 0a90 	vmov	r0, s13
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	f107 000c 	add.w	r0, r7, #12
 800140e:	4907      	ldr	r1, [pc, #28]	; (800142c <Display_Rh+0x64>)
 8001410:	f004 fc24 	bl	8005c5c <siprintf>
	lcd_send_string(str);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffc0 	bl	800139e <lcd_send_string>
	lcd_send_data('%');
 800141e:	2025      	movs	r0, #37	; 0x25
 8001420:	f7ff ff0e 	bl	8001240 <lcd_send_data>
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08008168 	.word	0x08008168

08001430 <Display_Temp>:

void Display_Temp(float Temp, int row){  // Antes de mostrar el dato se limpia la fila
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
 800143a:	6038      	str	r0, [r7, #0]

	char str[20] = {0};
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
	lcd_clear_row(row);
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff ff26 	bl	80012a0 <lcd_clear_row>
	lcd_put_cur(row,0);
 8001454:	2100      	movs	r1, #0
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f7ff ff45 	bl	80012e6 <lcd_put_cur>

	sprintf(str,"TEMP:%.2f",Temp/10);
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001464:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001468:	ee16 0a90 	vmov	r0, s13
 800146c:	f7ff f874 	bl	8000558 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	f107 000c 	add.w	r0, r7, #12
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <Display_Temp+0x68>)
 800147a:	f004 fbef 	bl	8005c5c <siprintf>
	lcd_send_string(str);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff8b 	bl	800139e <lcd_send_string>
	lcd_send_data('C');
 8001488:	2043      	movs	r0, #67	; 0x43
 800148a:	f7ff fed9 	bl	8001240 <lcd_send_data>
}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08008170 	.word	0x08008170

0800149c <HAL_GPIO_EXTI_Callback>:
	int posicion_servo(float temp);

	/* INTERRUPCIONES */

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Genera la interrupción cuando se pulsa el "user boton" de la placa (PA0)
	{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
		//Interrupcion debida al PIN_0
		if(GPIO_Pin==GPIO_PIN_0){
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d102      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x16>
			Seleccion_estado = 1;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
		}
	}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000394 	.word	0x20000394

080014c4 <HAL_TIM_PeriodElapsedCallback>:

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Genera una interrupción cada 5 segundos
	{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	  /* NOTE : This function Should not be modified, when the callback is needed,
	            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file */

	  /* Obtencion de datos del sensor */
	  /* Ver libreria "DHT.h" */
	  DHT_GetData(&DHT22_Data);
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014ce:	f7ff fe1d 	bl	800110c <DHT_GetData>

	  /* Asignación de variables globales de Temperatura y Humedad*/
	  Temperature = DHT22_Data.Temperature;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014d8:	6013      	str	r3, [r2, #0]
	  Humidity = DHT22_Data.Humidity;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014e0:	6013      	str	r3, [r2, #0]

	}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000384 	.word	0x20000384
 80014f0:	20000390 	.word	0x20000390
 80014f4:	2000038c 	.word	0x2000038c

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	/* Asignación de variables */
	T_diff = T_max - T_min ;
 80014fe:	4b89      	ldr	r3, [pc, #548]	; (8001724 <main+0x22c>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <main+0x230>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b88      	ldr	r3, [pc, #544]	; (800172c <main+0x234>)
 800150c:	701a      	strb	r2, [r3, #0]
	float salto_temp = T_diff / NUMERO_LED ; //Se utiliza para el cambio en los LED iluminados
 800150e:	4b87      	ldr	r3, [pc, #540]	; (800172c <main+0x234>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4a87      	ldr	r2, [pc, #540]	; (8001730 <main+0x238>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	edc7 7a02 	vstr	s15, [r7, #8]
	int total_led = 0 ; //Será el número total de LED a encenderse
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
	int j = 1; //A usar dentro de un bucle
 800152c:	2301      	movs	r3, #1
 800152e:	617b      	str	r3, [r7, #20]

	/* Variables locales */
	uint32_t tick_start = HAL_GetTick() ; //Pensado para guarda el valor de HAL_GetTick()
 8001530:	f000 ff1a 	bl	8002368 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]
	int t_espera = 5000 ; //Tiempo de espera en ms
 8001536:	f241 3388 	movw	r3, #5000	; 0x1388
 800153a:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 feae 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f914 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001544:	f000 facc 	bl	8001ae0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001548:	f000 f9ca 	bl	80018e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800154c:	f000 f976 	bl	800183c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001550:	f000 fa78 	bl	8001a44 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001554:	f000 f9f2 	bl	800193c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	  /* Mensaje de inicio */
	  lcd_init();
 8001558:	f7ff fee4 	bl	8001324 <lcd_init>
	  lcd_clear();
 800155c:	f7ff feb9 	bl	80012d2 <lcd_clear>
	  lcd_put_cur(0,0);
 8001560:	2100      	movs	r1, #0
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff febf 	bl	80012e6 <lcd_put_cur>
	  lcd_send_string("INICIANDO>>>>");
 8001568:	4872      	ldr	r0, [pc, #456]	; (8001734 <main+0x23c>)
 800156a:	f7ff ff18 	bl	800139e <lcd_send_string>
	  HAL_Delay(2000);
 800156e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001572:	f000 ff05 	bl	8002380 <HAL_Delay>
	  lcd_clear();
 8001576:	f7ff feac 	bl	80012d2 <lcd_clear>

	  /* Habilitación señal PWM */
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800157a:	2100      	movs	r1, #0
 800157c:	486e      	ldr	r0, [pc, #440]	; (8001738 <main+0x240>)
 800157e:	f002 ffc7 	bl	8004510 <HAL_TIM_PWM_Start>

	  /* Habilitacion de interrupciones */
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001582:	2006      	movs	r0, #6
 8001584:	f001 fc09 	bl	8002d9a <HAL_NVIC_EnableIRQ>
	  HAL_TIM_Base_Start_IT(&htim2);
 8001588:	486c      	ldr	r0, [pc, #432]	; (800173c <main+0x244>)
 800158a:	f002 ff0f 	bl	80043ac <HAL_TIM_Base_Start_IT>

	  /* Habilitamos el conversor analogico digital */
	  HAL_ADC_Start(&hadc1);
 800158e:	486c      	ldr	r0, [pc, #432]	; (8001740 <main+0x248>)
 8001590:	f000 ff5e 	bl	8002450 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(debouncer(&Seleccion_estado, GPIOA, GPIO_PIN_0)){ //Estado para la eleccion de la temperatura de control. NO ESCRIBIR AQU�?
 8001594:	2201      	movs	r2, #1
 8001596:	496b      	ldr	r1, [pc, #428]	; (8001744 <main+0x24c>)
 8001598:	486b      	ldr	r0, [pc, #428]	; (8001748 <main+0x250>)
 800159a:	f000 fb43 	bl	8001c24 <debouncer>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d060      	beq.n	8001666 <main+0x16e>

		  lcd_clear();
 80015a4:	f7ff fe95 	bl	80012d2 <lcd_clear>
		  lcd_put_cur(0,0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fe9b 	bl	80012e6 <lcd_put_cur>
		  lcd_send_string("Choose new temp");
 80015b0:	4866      	ldr	r0, [pc, #408]	; (800174c <main+0x254>)
 80015b2:	f7ff fef4 	bl	800139e <lcd_send_string>
		  int i = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]

		  while(!debouncer(&Seleccion_estado, GPIOA, GPIO_PIN_0)){
 80015ba:	e048      	b.n	800164e <main+0x156>

			  //Habilitacion del conversor
			  HAL_ADC_Start(&hadc1);
 80015bc:	4860      	ldr	r0, [pc, #384]	; (8001740 <main+0x248>)
 80015be:	f000 ff47 	bl	8002450 <HAL_ADC_Start>

			  //Lectura del conversor
			  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295
 80015c6:	485e      	ldr	r0, [pc, #376]	; (8001740 <main+0x248>)
 80015c8:	f001 f829 	bl	800261e <HAL_ADC_PollForConversion>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <main+0xe8>
				  Lec_Temp_Control = HAL_ADC_GetValue(&hadc1);
 80015d2:	485b      	ldr	r0, [pc, #364]	; (8001740 <main+0x248>)
 80015d4:	f001 f8ae 	bl	8002734 <HAL_ADC_GetValue>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <main+0x258>)
 80015de:	801a      	strh	r2, [r3, #0]

			  //Asignación de la temperatura de control
			  Temp_control = (float)Lec_Temp_Control / 255 * T_diff + 15; //La pendiente de la interpolación es 25/255
 80015e0:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <main+0x258>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ec:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001754 <main+0x25c>
 80015f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <main+0x234>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <main+0x260>)
 800160e:	edc3 7a00 	vstr	s15, [r3]

			  //Mostramos por pantalla la temperatura que escogemos
			  //Se ha añadido el bucle para reducir la frecuencia de la pantalla y evitar el parpadeo. Se ha tomado un valor empírico
			  if (!(i++ % 20000)){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	60fa      	str	r2, [r7, #12]
 8001618:	4a50      	ldr	r2, [pc, #320]	; (800175c <main+0x264>)
 800161a:	fb82 1203 	smull	r1, r2, r2, r3
 800161e:	1351      	asrs	r1, r2, #13
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	1a8a      	subs	r2, r1, r2
 8001624:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001628:	fb01 f202 	mul.w	r2, r1, r2
 800162c:	1a9a      	subs	r2, r3, r2
 800162e:	2a00      	cmp	r2, #0
 8001630:	d10d      	bne.n	800164e <main+0x156>
				  Display_Temp(Temp_control*10 , 1);
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <main+0x260>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	2001      	movs	r0, #1
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f7ff fef3 	bl	8001430 <Display_Temp>
				  i = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
		  while(!debouncer(&Seleccion_estado, GPIOA, GPIO_PIN_0)){
 800164e:	2201      	movs	r2, #1
 8001650:	493c      	ldr	r1, [pc, #240]	; (8001744 <main+0x24c>)
 8001652:	483d      	ldr	r0, [pc, #244]	; (8001748 <main+0x250>)
 8001654:	f000 fae6 	bl	8001c24 <debouncer>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ae      	beq.n	80015bc <main+0xc4>
			  }//End_IF

		  }//End_WHILE

		  //Deshabilitacion del conversor
		  HAL_ADC_Stop(&hadc1);
 800165e:	4838      	ldr	r0, [pc, #224]	; (8001740 <main+0x248>)
 8001660:	f000 ffaa 	bl	80025b8 <HAL_ADC_Stop>
 8001664:	e796      	b.n	8001594 <main+0x9c>

	  else{ //Estado para la ejecución del programa con una temperatura de control dada

		  /* Mostramos los valores obtenidos en la pantalla LCD */
		  /* Ver libreria "i2c-lcd.h" */
		  if (!(j++ % 20000)){
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	617a      	str	r2, [r7, #20]
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <main+0x264>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1351      	asrs	r1, r2, #13
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	1a8a      	subs	r2, r1, r2
 8001678:	f644 6120 	movw	r1, #20000	; 0x4e20
 800167c:	fb01 f202 	mul.w	r2, r1, r2
 8001680:	1a9a      	subs	r2, r3, r2
 8001682:	2a00      	cmp	r2, #0
 8001684:	d110      	bne.n	80016a8 <main+0x1b0>
			  Display_Rh(Humidity);
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <main+0x268>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	f7ff fe9a 	bl	80013c8 <Display_Rh>
			  Display_Temp(Temperature , 0);
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <main+0x26c>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	2000      	movs	r0, #0
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	f7ff fec6 	bl	8001430 <Display_Temp>
			  j = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
		  }
		  /* Control de la barra LED */
		  
		  /* Se trunca el numero de led en función del salto térmico */
		  total_led = (int)((Temperature/10 - T_min) / salto_temp);
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <main+0x26c>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <main+0x230>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	ee17 3a90 	vmov	r3, s15
 80016d6:	607b      	str	r3, [r7, #4]

		  /* Llamada a la función encenderled */

		  encenderled(total_led,PINES_LED);
 80016d8:	4923      	ldr	r1, [pc, #140]	; (8001768 <main+0x270>)
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 faf2 	bl	8001cc4 <encenderled>

		  /* Control del servomotor */

		  /* Se va a modificar la posición como mínimo cada 5 segundos pues es el periodo de muestreo de la temperatura */
		  if ((HAL_GetTick() - tick_start) > t_espera){
 80016e0:	f000 fe42 	bl	8002368 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad2      	subs	r2, r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f67f af51 	bls.w	8001594 <main+0x9c>
			  tick_start = HAL_GetTick() ;
 80016f2:	f000 fe39 	bl	8002368 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, posicion_servo(Temp_control-(Temperature/10)));
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <main+0x260>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <main+0x26c>)
 8001700:	edd3 6a00 	vldr	s13, [r3]
 8001704:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001708:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	f000 fb12 	bl	8001d3c <posicion_servo>
 8001718:	4602      	mov	r2, r0
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <main+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
	  if(debouncer(&Seleccion_estado, GPIOA, GPIO_PIN_0)){ //Estado para la eleccion de la temperatura de control. NO ESCRIBIR AQU�?
 8001720:	e738      	b.n	8001594 <main+0x9c>
 8001722:	bf00      	nop
 8001724:	20000055 	.word	0x20000055
 8001728:	20000054 	.word	0x20000054
 800172c:	2000039a 	.word	0x2000039a
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	0800817c 	.word	0x0800817c
 8001738:	200002f4 	.word	0x200002f4
 800173c:	2000033c 	.word	0x2000033c
 8001740:	20000258 	.word	0x20000258
 8001744:	40020000 	.word	0x40020000
 8001748:	20000394 	.word	0x20000394
 800174c:	0800818c 	.word	0x0800818c
 8001750:	20000398 	.word	0x20000398
 8001754:	437f0000 	.word	0x437f0000
 8001758:	20000050 	.word	0x20000050
 800175c:	68db8bad 	.word	0x68db8bad
 8001760:	2000038c 	.word	0x2000038c
 8001764:	20000390 	.word	0x20000390
 8001768:	20000000 	.word	0x20000000

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b094      	sub	sp, #80	; 0x50
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2230      	movs	r2, #48	; 0x30
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fdfc 	bl	8005378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <SystemClock_Config+0xc8>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <SystemClock_Config+0xc8>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <SystemClock_Config+0xc8>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <SystemClock_Config+0xcc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <SystemClock_Config+0xcc>)
 80017b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <SystemClock_Config+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	2310      	movs	r3, #16
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017dc:	2308      	movs	r3, #8
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80017e0:	2332      	movs	r3, #50	; 0x32
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017e8:	2308      	movs	r3, #8
 80017ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f907 	bl	8003a04 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017fc:	f000 fad5 	bl	8001daa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001800:	230f      	movs	r3, #15
 8001802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001804:	2302      	movs	r3, #2
 8001806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fb6a 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001826:	f000 fac0 	bl	8001daa <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3750      	adds	r7, #80	; 0x50
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <MX_ADC1_Init+0x9c>)
 8001852:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_ADC1_Init+0x98>)
 800185c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_ADC1_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_ADC1_Init+0x98>)
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <MX_ADC1_Init+0xa0>)
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_ADC1_Init+0x98>)
 800188a:	2201      	movs	r2, #1
 800188c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_ADC1_Init+0x98>)
 8001898:	2201      	movs	r2, #1
 800189a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_ADC1_Init+0x98>)
 800189e:	f000 fd93 	bl	80023c8 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018a8:	f000 fa7f 	bl	8001daa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_ADC1_Init+0x98>)
 80018be:	f000 ff47 	bl	8002750 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018c8:	f000 fa6f 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000258 	.word	0x20000258
 80018d8:	40012000 	.word	0x40012000
 80018dc:	0f000001 	.word	0x0f000001

080018e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C1_Init+0x50>)
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_I2C1_Init+0x54>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C1_Init+0x50>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_I2C1_Init+0x58>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_I2C1_Init+0x50>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_I2C1_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_I2C1_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_I2C1_Init+0x50>)
 800191e:	f001 fc25 	bl	800316c <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 fa3f 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002a0 	.word	0x200002a0
 8001934:	40005400 	.word	0x40005400
 8001938:	000186a0 	.word	0x000186a0

0800193c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	; 0x48
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2220      	movs	r2, #32
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fd06 	bl	8005378 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <MX_TIM1_Init+0x100>)
 800196e:	4a34      	ldr	r2, [pc, #208]	; (8001a40 <MX_TIM1_Init+0x104>)
 8001970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500;
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001974:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_TIM1_Init+0x100>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001982:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <MX_TIM1_Init+0x100>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800199a:	4828      	ldr	r0, [pc, #160]	; (8001a3c <MX_TIM1_Init+0x100>)
 800199c:	f002 fd68 	bl	8004470 <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019a6:	f000 fa00 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b6:	4619      	mov	r1, r3
 80019b8:	4820      	ldr	r0, [pc, #128]	; (8001a3c <MX_TIM1_Init+0x100>)
 80019ba:	f003 fbdf 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f000 f9f1 	bl	8001daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	; 0x60
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_TIM1_Init+0x100>)
 80019ee:	f002 ff47 	bl	8004880 <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80019f8:	f000 f9d7 	bl	8001daa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001a20:	f003 fc1a 	bl	8005258 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001a2a:	f000 f9be 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM1_Init+0x100>)
 8001a30:	f000 fabc 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3748      	adds	r7, #72	; 0x48
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200002f4 	.word	0x200002f4
 8001a40:	40010000 	.word	0x40010000

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <MX_TIM2_Init+0x98>)
 8001a8c:	f002 fc3e 	bl	800430c <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a96:	f000 f988 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480d      	ldr	r0, [pc, #52]	; (8001adc <MX_TIM2_Init+0x98>)
 8001aa8:	f002 ffac 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ab2:	f000 f97a 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <MX_TIM2_Init+0x98>)
 8001ac4:	f003 fb5a 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ace:	f000 f96c 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000033c 	.word	0x2000033c

08001ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a37      	ldr	r2, [pc, #220]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <MX_GPIO_Init+0x134>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2102      	movs	r1, #2
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <MX_GPIO_Init+0x138>)
 8001b6c:	f001 facc 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b76:	4829      	ldr	r0, [pc, #164]	; (8001c1c <MX_GPIO_Init+0x13c>)
 8001b78:	f001 fac6 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001b82:	4827      	ldr	r0, [pc, #156]	; (8001c20 <MX_GPIO_Init+0x140>)
 8001b84:	f001 fac0 	bl	8003108 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481e      	ldr	r0, [pc, #120]	; (8001c18 <MX_GPIO_Init+0x138>)
 8001b9e:	f001 f917 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4817      	ldr	r0, [pc, #92]	; (8001c18 <MX_GPIO_Init+0x138>)
 8001bba:	f001 f909 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <MX_GPIO_Init+0x13c>)
 8001bd8:	f001 f8fa 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001bdc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001be0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <MX_GPIO_Init+0x140>)
 8001bf6:	f001 f8eb 	bl	8002dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f001 f8af 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c04:	2006      	movs	r0, #6
 8001c06:	f001 f8c8 	bl	8002d9a <HAL_NVIC_EnableIRQ>

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020c00 	.word	0x40020c00

08001c24 <debouncer>:

/* USER CODE BEGIN 4 */

	/* Definción de funciones utilizadas */
	int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
		static uint8_t button_count=0;
		static int counter=0;

		if (*button_int==1){
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d13b      	bne.n	8001cb2 <debouncer+0x8e>
			if (button_count==0) {
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <debouncer+0x98>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10b      	bne.n	8001c5a <debouncer+0x36>
				counter=HAL_GetTick();
 8001c42:	f000 fb91 	bl	8002368 <HAL_GetTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <debouncer+0x9c>)
 8001c4c:	601a      	str	r2, [r3, #0]
				button_count++;
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <debouncer+0x98>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <debouncer+0x98>)
 8001c58:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_GetTick()-counter>=20){
 8001c5a:	f000 fb85 	bl	8002368 <HAL_GetTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <debouncer+0x9c>)
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	2b13      	cmp	r3, #19
 8001c68:	d923      	bls.n	8001cb2 <debouncer+0x8e>
				counter=HAL_GetTick();
 8001c6a:	f000 fb7d 	bl	8002368 <HAL_GetTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <debouncer+0x9c>)
 8001c74:	601a      	str	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	68b8      	ldr	r0, [r7, #8]
 8001c7c:	f001 fa2c 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d003      	beq.n	8001c8e <debouncer+0x6a>
					button_count=1;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <debouncer+0x98>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e005      	b.n	8001c9a <debouncer+0x76>
				}
				else{
					button_count++;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <debouncer+0x98>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <debouncer+0x98>)
 8001c98:	701a      	strb	r2, [r3, #0]
				}
				if (button_count==4){ //Periodo antirebotes
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <debouncer+0x98>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d107      	bne.n	8001cb2 <debouncer+0x8e>
					button_count=0;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <debouncer+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
					*button_int=0;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
					return 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <debouncer+0x90>
				}
			}
		}
		return 0;
 8001cb2:	2300      	movs	r3, #0
	}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000039b 	.word	0x2000039b
 8001cc0:	2000039c 	.word	0x2000039c

08001cc4 <encenderled>:

	void encenderled(int i, PINES PINES_LED[]){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]

		int j = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]

		for(int n = 0 ; n < i ; n++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	e013      	b.n	8001d00 <encenderled+0x3c>
			HAL_GPIO_WritePin(PINES_LED[n].GPIOx, PINES_LED[n].GPIO_Pin, GPIO_PIN_SET);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f001 fa0a 	bl	8003108 <HAL_GPIO_WritePin>
			j++;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
		for(int n = 0 ; n < i ; n++){
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbe7      	blt.n	8001cd8 <encenderled+0x14>
		}//End_FOR

		while(j < NUMERO_LED){
 8001d08:	e010      	b.n	8001d2c <encenderled+0x68>
			HAL_GPIO_WritePin(PINES_LED[j].GPIOx, PINES_LED[j].GPIO_Pin, GPIO_PIN_RESET);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	f001 f9f1 	bl	8003108 <HAL_GPIO_WritePin>
			j++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
		while(j < NUMERO_LED){
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	ddeb      	ble.n	8001d0a <encenderled+0x46>
		}//End_WHILE
	};
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <posicion_servo>:

	int posicion_servo(float temp){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	ed87 0a01 	vstr	s0, [r7, #4]

		int pos_min = 100 , pos_max = 200 , dif_temp = 10;
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	23c8      	movs	r3, #200	; 0xc8
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	230a      	movs	r3, #10
 8001d50:	60fb      	str	r3, [r7, #12]
		if(temp <= 0) return pos_min;
 8001d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	d801      	bhi.n	8001d64 <posicion_servo+0x28>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	e01c      	b.n	8001d9e <posicion_servo+0x62>
		else return (int)(pos_min + temp/ dif_temp * (pos_max - pos_min));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	ed97 6a01 	vldr	s12, [r7, #4]
 8001d7c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9a:	ee17 3a90 	vmov	r3, s15

	}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
}
 8001db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <Error_Handler+0x8>

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001df2:	2007      	movs	r0, #7
 8001df4:	f000 ffaa 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_ADC_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d127      	bne.n	8001e76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_ADC_MspInit+0x80>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e62:	2303      	movs	r3, #3
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_ADC_MspInit+0x84>)
 8001e72:	f000 ffad 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40012000 	.word	0x40012000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_I2C_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12c      	bne.n	8001f08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001edc:	2304      	movs	r3, #4
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <HAL_I2C_MspInit+0x8c>)
 8001ee8:	f000 ff72 	bl	8002dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_I2C_MspInit+0x88>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10d      	bne.n	8001f4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_TIM_PWM_MspInit+0x40>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_TIM_PWM_MspInit+0x40>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_TIM_PWM_MspInit+0x40>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d115      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	201c      	movs	r0, #28
 8001f94:	f000 fee5 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f98:	201c      	movs	r0, #28
 8001f9a:	f000 fefe 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_TIM_MspPostInit+0x68>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d11e      	bne.n	800200c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_TIM_MspPostInit+0x70>)
 8002008:	f000 fee2 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40010000 	.word	0x40010000
 8002018:	40023800 	.word	0x40023800
 800201c:	40021000 	.word	0x40021000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 f968 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002078:	2001      	movs	r0, #1
 800207a:	f001 f85f 	bl	800313c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM2_IRQHandler+0x10>)
 800208a:	f002 faf1 	bl	8004670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000033c 	.word	0x2000033c

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020b2:	f003 f937 	bl	8005324 <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
	return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0x12>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
	}

return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
	}
	return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
	return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
	return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f003 f89c 	bl	8005324 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20020000 	.word	0x20020000
 8002218:	00000400 	.word	0x00000400
 800221c:	200003a0 	.word	0x200003a0
 8002220:	200003b8 	.word	0x200003b8

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002264:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002272:	f7ff ffd7 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 f85b 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7ff f93d 	bl	80014f8 <main>
  bx  lr    
 800227e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800228c:	0800859c 	.word	0x0800859c
  ldr r2, =_sbss
 8002290:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002294:	200003b8 	.word	0x200003b8

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 fd41 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fd70 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fd59 	bl	8002db6 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 fd21 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000058 	.word	0x20000058
 8002338:	20000060 	.word	0x20000060
 800233c:	2000005c 	.word	0x2000005c

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000060 	.word	0x20000060
 8002364:	200003a4 	.word	0x200003a4

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200003a4 	.word	0x200003a4

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000060 	.word	0x20000060

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd0c 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 faca 	bl	80029b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Start+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e097      	b.n	800259a <HAL_ADC_Start+0x14a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d018      	beq.n	80024b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <HAL_ADC_Start+0x158>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <HAL_ADC_Start+0x15c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9a      	lsrs	r2, r3, #18
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f9      	bne.n	80024a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d15f      	bne.n	8002580 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d106      	bne.n	800250e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f023 0206 	bic.w	r2, r3, #6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
 800250c:	e002      	b.n	8002514 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_ADC_Start+0x160>)
 800251e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002528:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d129      	bne.n	8002598 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e020      	b.n	8002598 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_ADC_Start+0x164>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d11b      	bne.n	8002598 <HAL_ADC_Start+0x148>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d114      	bne.n	8002598 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e00b      	b.n	8002598 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000058 	.word	0x20000058
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	40012300 	.word	0x40012300
 80025b4:	40012000 	.word	0x40012000

080025b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Stop+0x16>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e021      	b.n	8002612 <HAL_ADC_Stop+0x5a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d113      	bne.n	8002664 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e063      	b.n	800272c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002664:	f7ff fe80 	bl	8002368 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800266a:	e021      	b.n	80026b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d01d      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_ADC_PollForConversion+0x6c>
 800267a:	f7ff fe75 	bl	8002368 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d212      	bcs.n	80026b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d00b      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03d      	b.n	800272c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d1d6      	bne.n	800266c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0212 	mvn.w	r2, #18
 80026c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d123      	bne.n	800272a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11f      	bne.n	800272a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1c>
 8002768:	2302      	movs	r3, #2
 800276a:	e113      	b.n	8002994 <HAL_ADC_ConfigChannel+0x244>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b09      	cmp	r3, #9
 800277a:	d925      	bls.n	80027c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b1e      	subs	r3, #30
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4403      	add	r3, r0
 80027ba:	3b1e      	subs	r3, #30
 80027bc:	409a      	lsls	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e022      	b.n	800280e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	2207      	movs	r2, #7
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4403      	add	r3, r0
 8002804:	409a      	lsls	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b06      	cmp	r3, #6
 8002814:	d824      	bhi.n	8002860 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b05      	subs	r3, #5
 8002828:	221f      	movs	r2, #31
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b05      	subs	r3, #5
 8002852:	fa00 f203 	lsl.w	r2, r0, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
 800285e:	e04c      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d824      	bhi.n	80028b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	3b23      	subs	r3, #35	; 0x23
 800287a:	221f      	movs	r2, #31
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b23      	subs	r3, #35	; 0x23
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
 80028b0:	e023      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b41      	subs	r3, #65	; 0x41
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b41      	subs	r3, #65	; 0x41
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_ADC_ConfigChannel+0x250>)
 80028fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_ADC_ConfigChannel+0x254>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10f      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1d8>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b12      	cmp	r3, #18
 800290e:	d10b      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_ADC_ConfigChannel+0x254>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d12b      	bne.n	800298a <HAL_ADC_ConfigChannel+0x23a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_ADC_ConfigChannel+0x258>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x1f4>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b11      	cmp	r3, #17
 8002942:	d122      	bne.n	800298a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_ADC_ConfigChannel+0x258>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d111      	bne.n	800298a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_ADC_ConfigChannel+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_ADC_ConfigChannel+0x260>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	0c9a      	lsrs	r2, r3, #18
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800297c:	e002      	b.n	8002984 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3b01      	subs	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40012300 	.word	0x40012300
 80029a4:	40012000 	.word	0x40012000
 80029a8:	10000012 	.word	0x10000012
 80029ac:	20000058 	.word	0x20000058
 80029b0:	431bde83 	.word	0x431bde83

080029b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029bc:	4b79      	ldr	r3, [pc, #484]	; (8002ba4 <ADC_Init+0x1f0>)
 80029be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	021a      	lsls	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <ADC_Init+0x1f4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e00f      	b.n	8002ab2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0202 	bic.w	r2, r2, #2
 8002ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7e1b      	ldrb	r3, [r3, #24]
 8002acc:	005a      	lsls	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01b      	beq.n	8002b18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002afe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	035a      	lsls	r2, r3, #13
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e007      	b.n	8002b28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	051a      	lsls	r2, r3, #20
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b6a:	025a      	lsls	r2, r3, #9
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6899      	ldr	r1, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	029a      	lsls	r2, r3, #10
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40012300 	.word	0x40012300
 8002ba8:	0f000001 	.word	0x0f000001

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4907      	ldr	r1, [pc, #28]	; (8002c48 <__NVIC_EnableIRQ+0x38>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	; (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	; (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
         );
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff29 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d74:	f7ff ff3e 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff8e 	bl	8002ca0 <NVIC_EncodePriority>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff5d 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff31 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ffa2 	bl	8002d08 <SysTick_Config>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e159      	b.n	80030a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 8148 	bne.w	800309a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a2 	beq.w	800309a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b57      	ldr	r3, [pc, #348]	; (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	4a56      	ldr	r2, [pc, #344]	; (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f64:	6453      	str	r3, [r2, #68]	; 0x44
 8002f66:	4b54      	ldr	r3, [pc, #336]	; (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_GPIO_Init+0x2ec>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a49      	ldr	r2, [pc, #292]	; (80030c0 <HAL_GPIO_Init+0x2f0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x202>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a48      	ldr	r2, [pc, #288]	; (80030c4 <HAL_GPIO_Init+0x2f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x1fe>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a47      	ldr	r2, [pc, #284]	; (80030c8 <HAL_GPIO_Init+0x2f8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x1fa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a46      	ldr	r2, [pc, #280]	; (80030cc <HAL_GPIO_Init+0x2fc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x1f6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a45      	ldr	r2, [pc, #276]	; (80030d0 <HAL_GPIO_Init+0x300>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x1f2>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe4:	4935      	ldr	r1, [pc, #212]	; (80030bc <HAL_GPIO_Init+0x2ec>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003016:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_GPIO_Init+0x304>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003040:	4a24      	ldr	r2, [pc, #144]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306a:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_GPIO_Init+0x304>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003094:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <HAL_GPIO_Init+0x304>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f aea2 	bls.w	8002dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e001      	b.n	80030fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f99e 	bl	800149c <HAL_GPIO_EXTI_Callback>
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e12b      	b.n	80033d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe fe7a 	bl	8001e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031d0:	f001 f888 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 80031d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4a81      	ldr	r2, [pc, #516]	; (80033e0 <HAL_I2C_Init+0x274>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d807      	bhi.n	80031f0 <HAL_I2C_Init+0x84>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a80      	ldr	r2, [pc, #512]	; (80033e4 <HAL_I2C_Init+0x278>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bf94      	ite	ls
 80031e8:	2301      	movls	r3, #1
 80031ea:	2300      	movhi	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e006      	b.n	80031fe <HAL_I2C_Init+0x92>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a7d      	ldr	r2, [pc, #500]	; (80033e8 <HAL_I2C_Init+0x27c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	bf94      	ite	ls
 80031f8:	2301      	movls	r3, #1
 80031fa:	2300      	movhi	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0e7      	b.n	80033d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a78      	ldr	r2, [pc, #480]	; (80033ec <HAL_I2C_Init+0x280>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0c9b      	lsrs	r3, r3, #18
 8003210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a6a      	ldr	r2, [pc, #424]	; (80033e0 <HAL_I2C_Init+0x274>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d802      	bhi.n	8003240 <HAL_I2C_Init+0xd4>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3301      	adds	r3, #1
 800323e:	e009      	b.n	8003254 <HAL_I2C_Init+0xe8>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_I2C_Init+0x284>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	3301      	adds	r3, #1
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003266:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	495c      	ldr	r1, [pc, #368]	; (80033e0 <HAL_I2C_Init+0x274>)
 8003270:	428b      	cmp	r3, r1
 8003272:	d819      	bhi.n	80032a8 <HAL_I2C_Init+0x13c>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e59      	subs	r1, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003288:	400b      	ands	r3, r1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_I2C_Init+0x138>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1e59      	subs	r1, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fbb1 f3f3 	udiv	r3, r1, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a2:	e051      	b.n	8003348 <HAL_I2C_Init+0x1dc>
 80032a4:	2304      	movs	r3, #4
 80032a6:	e04f      	b.n	8003348 <HAL_I2C_Init+0x1dc>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d111      	bne.n	80032d4 <HAL_I2C_Init+0x168>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	440b      	add	r3, r1
 80032be:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e012      	b.n	80032fa <HAL_I2C_Init+0x18e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	0099      	lsls	r1, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Init+0x196>
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_I2C_Init+0x1dc>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10e      	bne.n	8003328 <HAL_I2C_Init+0x1bc>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1e58      	subs	r0, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	440b      	add	r3, r1
 8003318:	fbb0 f3f3 	udiv	r3, r0, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003326:	e00f      	b.n	8003348 <HAL_I2C_Init+0x1dc>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	0099      	lsls	r1, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	6809      	ldr	r1, [r1, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6911      	ldr	r1, [r2, #16]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	4311      	orrs	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	000186a0 	.word	0x000186a0
 80033e4:	001e847f 	.word	0x001e847f
 80033e8:	003d08ff 	.word	0x003d08ff
 80033ec:	431bde83 	.word	0x431bde83
 80033f0:	10624dd3 	.word	0x10624dd3

080033f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	461a      	mov	r2, r3
 8003400:	460b      	mov	r3, r1
 8003402:	817b      	strh	r3, [r7, #10]
 8003404:	4613      	mov	r3, r2
 8003406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7fe ffae 	bl	8002368 <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	f040 80e0 	bne.w	80035dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2319      	movs	r3, #25
 8003422:	2201      	movs	r2, #1
 8003424:	4970      	ldr	r1, [pc, #448]	; (80035e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f964 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
 8003434:	e0d3      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_I2C_Master_Transmit+0x50>
 8003440:	2302      	movs	r3, #2
 8003442:	e0cc      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d007      	beq.n	800346a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2221      	movs	r2, #33	; 0x21
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2210      	movs	r2, #16
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	893a      	ldrh	r2, [r7, #8]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_I2C_Master_Transmit+0x1f8>)
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f89c 	bl	80035f0 <I2C_MasterRequestWrite>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e08d      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034d8:	e066      	b.n	80035a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	6a39      	ldr	r1, [r7, #32]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f9de 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00d      	beq.n	8003506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d107      	bne.n	8003502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06b      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b04      	cmp	r3, #4
 8003542:	d11b      	bne.n	800357c <HAL_I2C_Master_Transmit+0x188>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	2b00      	cmp	r3, #0
 800354a:	d017      	beq.n	800357c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	6a39      	ldr	r1, [r7, #32]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f9ce 	bl	8003922 <I2C_WaitOnBTFFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e01a      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d194      	bne.n	80034da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	00100002 	.word	0x00100002
 80035ec:	ffff0000 	.word	0xffff0000

080035f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	460b      	mov	r3, r1
 80035fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d006      	beq.n	800361a <I2C_MasterRequestWrite+0x2a>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d003      	beq.n	800361a <I2C_MasterRequestWrite+0x2a>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003618:	d108      	bne.n	800362c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00b      	b.n	8003644 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b12      	cmp	r3, #18
 8003632:	d107      	bne.n	8003644 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f84f 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	d103      	bne.n	8003674 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e035      	b.n	80036e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003680:	d108      	bne.n	8003694 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	e01b      	b.n	80036cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	11db      	asrs	r3, r3, #7
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0306 	and.w	r3, r3, #6
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f063 030f 	orn	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <I2C_MasterRequestWrite+0xfc>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f875 	bl	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e010      	b.n	80036e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4907      	ldr	r1, [pc, #28]	; (80036f0 <I2C_MasterRequestWrite+0x100>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f865 	bl	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	00010008 	.word	0x00010008
 80036f0:	00010002 	.word	0x00010002

080036f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003704:	e025      	b.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d021      	beq.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fe2b 	bl	8002368 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d116      	bne.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e023      	b.n	800379a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10d      	bne.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	e00c      	b.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d0b6      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b0:	e051      	b.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d123      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e046      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d021      	beq.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fe fda9 	bl	8002368 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d116      	bne.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e020      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10c      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	e00b      	b.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d18d      	bne.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	e02d      	b.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f878 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02d      	b.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d021      	beq.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fe fd4f 	bl	8002368 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d116      	bne.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e007      	b.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d1ca      	bne.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800392e:	e02d      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f837 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e02d      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d021      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003948:	f7fe fd0e 	bl	8002368 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	d302      	bcc.n	800395e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d1ca      	bne.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d11b      	bne.n	80039f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e267      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d075      	beq.n	8003b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a22:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d00c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d112      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a46:	d10b      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d05b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x108>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d157      	bne.n	8003b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e242      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d106      	bne.n	8003a78 <HAL_RCC_OscConfig+0x74>
 8003a6a:	4b76      	ldr	r3, [pc, #472]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a75      	ldr	r2, [pc, #468]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01d      	b.n	8003ab4 <HAL_RCC_OscConfig+0xb0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x98>
 8003a82:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6f      	ldr	r2, [pc, #444]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6c      	ldr	r2, [pc, #432]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a68      	ldr	r2, [pc, #416]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b66      	ldr	r3, [pc, #408]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a65      	ldr	r2, [pc, #404]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe fc54 	bl	8002368 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe fc50 	bl	8002368 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e207      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fc40 	bl	8002368 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fc3c 	bl	8002368 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1f3      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0xe8>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b44      	ldr	r3, [pc, #272]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x152>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1c7      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4937      	ldr	r1, [pc, #220]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	e03a      	b.n	8003be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b74:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_RCC_OscConfig+0x244>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fbf5 	bl	8002368 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fe fbf1 	bl	8002368 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1a8      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4925      	ldr	r1, [pc, #148]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_OscConfig+0x244>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fbd4 	bl	8002368 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fe fbd0 	bl	8002368 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e187      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d036      	beq.n	8003c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <HAL_RCC_OscConfig+0x248>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fe fbb4 	bl	8002368 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fe fbb0 	bl	8002368 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e167      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x200>
 8003c22:	e01b      	b.n	8003c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_OscConfig+0x248>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fe fb9d 	bl	8002368 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	e00e      	b.n	8003c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fe fb99 	bl	8002368 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d907      	bls.n	8003c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e150      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
 8003c44:	40023800 	.word	0x40023800
 8003c48:	42470000 	.word	0x42470000
 8003c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ea      	bne.n	8003c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8097 	beq.w	8003d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b81      	ldr	r3, [pc, #516]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	4b7d      	ldr	r3, [pc, #500]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4a7c      	ldr	r2, [pc, #496]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8a:	4b7a      	ldr	r3, [pc, #488]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b77      	ldr	r3, [pc, #476]	; (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d118      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	4b74      	ldr	r3, [pc, #464]	; (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a73      	ldr	r2, [pc, #460]	; (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fb59 	bl	8002368 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fe fb55 	bl	8002368 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e10c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x2ea>
 8003ce0:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a63      	ldr	r2, [pc, #396]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	e01c      	b.n	8003d28 <HAL_RCC_OscConfig+0x324>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x30c>
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a5e      	ldr	r2, [pc, #376]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
 8003d02:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5b      	ldr	r2, [pc, #364]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0x324>
 8003d10:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a57      	ldr	r2, [pc, #348]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0304 	bic.w	r3, r3, #4
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe fb1a 	bl	8002368 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe fb16 	bl	8002368 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0cb      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ee      	beq.n	8003d38 <HAL_RCC_OscConfig+0x334>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb04 	bl	8002368 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fe fb00 	bl	8002368 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0b5      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ee      	bne.n	8003d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4a38      	ldr	r2, [pc, #224]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a1 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da2:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d05c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d141      	bne.n	8003e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fad4 	bl	8002368 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fad0 	bl	8002368 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e087      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	491b      	ldr	r1, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe faa9 	bl	8002368 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fe faa5 	bl	8002368 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e05c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x416>
 8003e38:	e054      	b.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fa92 	bl	8002368 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe fa8e 	bl	8002368 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e045      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x444>
 8003e66:	e03d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e038      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4ec>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d028      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d121      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11a      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d111      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0cc      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b68      	ldr	r3, [pc, #416]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d90c      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b63      	ldr	r3, [pc, #396]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b8      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d020      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f48:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a58      	ldr	r2, [pc, #352]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a52      	ldr	r2, [pc, #328]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	494d      	ldr	r1, [pc, #308]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d044      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e07f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e06f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e067      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4934      	ldr	r1, [pc, #208]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe f9c0 	bl	8002368 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fe f9bc 	bl	8002368 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d20c      	bcs.n	800403c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e032      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4916      	ldr	r1, [pc, #88]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	490e      	ldr	r1, [pc, #56]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800407a:	f000 f821 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800407e:	4602      	mov	r2, r0
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	490a      	ldr	r1, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	5ccb      	ldrb	r3, [r1, r3]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f920 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	0800819c 	.word	0x0800819c
 80040b8:	20000058 	.word	0x20000058
 80040bc:	2000005c 	.word	0x2000005c

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b094      	sub	sp, #80	; 0x50
 80040c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	2300      	movs	r3, #0
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d8:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d00d      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x40>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	f200 80e1 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x3a>
 80040f2:	e0db      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b73      	ldr	r3, [pc, #460]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040f8:	e0db      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fa:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040fe:	e0d8      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	2200      	movs	r2, #0
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	2300      	movs	r3, #0
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
 800412e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4621      	mov	r1, r4
 800414c:	1a51      	subs	r1, r2, r1
 800414e:	6139      	str	r1, [r7, #16]
 8004150:	4629      	mov	r1, r5
 8004152:	eb63 0301 	sbc.w	r3, r3, r1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004164:	4659      	mov	r1, fp
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416e:	4651      	mov	r1, sl
 8004170:	018a      	lsls	r2, r1, #6
 8004172:	4651      	mov	r1, sl
 8004174:	ebb2 0801 	subs.w	r8, r2, r1
 8004178:	4659      	mov	r1, fp
 800417a:	eb63 0901 	sbc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	462b      	mov	r3, r5
 80041a0:	eb49 0303 	adc.w	r3, r9, r3
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041b2:	4629      	mov	r1, r5
 80041b4:	024b      	lsls	r3, r1, #9
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041bc:	4621      	mov	r1, r4
 80041be:	024a      	lsls	r2, r1, #9
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041d0:	f7fc fcf2 	bl	8000bb8 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	e058      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	2200      	movs	r2, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	4611      	mov	r1, r2
 80041ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
 80041f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0159      	lsls	r1, r3, #5
 8004206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420a:	0150      	lsls	r0, r2, #5
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4641      	mov	r1, r8
 8004212:	ebb2 0a01 	subs.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb63 0b01 	sbc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800422c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004230:	ebb2 040a 	subs.w	r4, r2, sl
 8004234:	eb63 050b 	sbc.w	r5, r3, fp
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	00eb      	lsls	r3, r5, #3
 8004242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004246:	00e2      	lsls	r2, r4, #3
 8004248:	4614      	mov	r4, r2
 800424a:	461d      	mov	r5, r3
 800424c:	4643      	mov	r3, r8
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	464b      	mov	r3, r9
 8004254:	eb45 0303 	adc.w	r3, r5, r3
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004266:	4629      	mov	r1, r5
 8004268:	028b      	lsls	r3, r1, #10
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004270:	4621      	mov	r1, r4
 8004272:	028a      	lsls	r2, r1, #10
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427a:	2200      	movs	r2, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004284:	f7fc fc98 	bl	8000bb8 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3750      	adds	r7, #80	; 0x50
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	007a1200 	.word	0x007a1200

080042cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000058 	.word	0x20000058

080042e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e8:	f7ff fff0 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4903      	ldr	r1, [pc, #12]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40023800 	.word	0x40023800
 8004308:	080081ac 	.word	0x080081ac

0800430c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e041      	b.n	80043a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fe14 	bl	8001f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f000 fc4a 	bl	8004be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d001      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e044      	b.n	800444e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1e      	ldr	r2, [pc, #120]	; (800445c <HAL_TIM_Base_Start_IT+0xb0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d013      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_TIM_Base_Start_IT+0xb4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_TIM_Base_Start_IT+0xb8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_TIM_Base_Start_IT+0xbc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a16      	ldr	r2, [pc, #88]	; (800446c <HAL_TIM_Base_Start_IT+0xc0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d111      	bne.n	800443c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b06      	cmp	r3, #6
 8004428:	d010      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	e007      	b.n	800444c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e041      	b.n	8004506 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd fd40 	bl	8001f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fb98 	bl	8004be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_TIM_PWM_Start+0x24>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e022      	b.n	800457a <HAL_TIM_PWM_Start+0x6a>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d109      	bne.n	800454e <HAL_TIM_PWM_Start+0x3e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e015      	b.n	800457a <HAL_TIM_PWM_Start+0x6a>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d109      	bne.n	8004568 <HAL_TIM_PWM_Start+0x58>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	bf14      	ite	ne
 8004560:	2301      	movne	r3, #1
 8004562:	2300      	moveq	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e008      	b.n	800457a <HAL_TIM_PWM_Start+0x6a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e068      	b.n	8004654 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0x82>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004590:	e013      	b.n	80045ba <HAL_TIM_PWM_Start+0xaa>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start+0x92>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_PWM_Start+0xaa>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start+0xa2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b0:	e003      	b.n	80045ba <HAL_TIM_PWM_Start+0xaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2201      	movs	r2, #1
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fdb4 	bl	8005130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a23      	ldr	r2, [pc, #140]	; (800465c <HAL_TIM_PWM_Start+0x14c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_TIM_PWM_Start+0x14c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_PWM_Start+0x10e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start+0x10e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_TIM_PWM_Start+0x150>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start+0x10e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a17      	ldr	r2, [pc, #92]	; (8004664 <HAL_TIM_PWM_Start+0x154>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start+0x10e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <HAL_TIM_PWM_Start+0x158>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start+0x10e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <HAL_TIM_PWM_Start+0x15c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d010      	beq.n	8004652 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	e007      	b.n	8004652 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40014000 	.word	0x40014000

08004670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b02      	cmp	r3, #2
 8004684:	d122      	bne.n	80046cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d11b      	bne.n	80046cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0202 	mvn.w	r2, #2
 800469c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa77 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa69 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa7a 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d122      	bne.n	8004720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d11b      	bne.n	8004720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0204 	mvn.w	r2, #4
 80046f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa4d 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa3f 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa50 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0208 	mvn.w	r2, #8
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa23 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa15 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa26 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b10      	cmp	r3, #16
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b10      	cmp	r3, #16
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0210 	mvn.w	r2, #16
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2208      	movs	r2, #8
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9f9 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9eb 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f9fc 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fe68 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b80      	cmp	r3, #128	; 0x80
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fd78 	bl	8005310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9c1 	bl	8004bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b20      	cmp	r3, #32
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0220 	mvn.w	r2, #32
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fd42 	bl	80052fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800489a:	2302      	movs	r3, #2
 800489c:	e0ae      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	f200 809f 	bhi.w	80049ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	080049ed 	.word	0x080049ed
 80048bc:	080049ed 	.word	0x080049ed
 80048c0:	080049ed 	.word	0x080049ed
 80048c4:	08004929 	.word	0x08004929
 80048c8:	080049ed 	.word	0x080049ed
 80048cc:	080049ed 	.word	0x080049ed
 80048d0:	080049ed 	.word	0x080049ed
 80048d4:	0800496b 	.word	0x0800496b
 80048d8:	080049ed 	.word	0x080049ed
 80048dc:	080049ed 	.word	0x080049ed
 80048e0:	080049ed 	.word	0x080049ed
 80048e4:	080049ab 	.word	0x080049ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f9f8 	bl	8004ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6999      	ldr	r1, [r3, #24]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	619a      	str	r2, [r3, #24]
      break;
 8004926:	e064      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fa3e 	bl	8004db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
      break;
 8004968:	e043      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fa89 	bl	8004e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0204 	bic.w	r2, r2, #4
 8004994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69d9      	ldr	r1, [r3, #28]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
      break;
 80049a8:	e023      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fad3 	bl	8004f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	021a      	lsls	r2, r3, #8
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	61da      	str	r2, [r3, #28]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	75fb      	strb	r3, [r7, #23]
      break;
 80049f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0b4      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x186>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d03e      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5e:	f200 8087 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_TIM_ConfigClockSource+0x172>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d87f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b70      	cmp	r3, #112	; 0x70
 8004a72:	d01a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xa6>
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d87b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d050      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x11a>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d877      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b50      	cmp	r3, #80	; 0x50
 8004a82:	d03c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0xfa>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d873      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d058      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x13a>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d86f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b30      	cmp	r3, #48	; 0x30
 8004a92:	d064      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d86b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d060      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d867      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d05a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	e062      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f000 fb19 	bl	80050f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      break;
 8004ad6:	e04f      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 fb02 	bl	80050f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afa:	609a      	str	r2, [r3, #8]
      break;
 8004afc:	e03c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 fa76 	bl	8004ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2150      	movs	r1, #80	; 0x50
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 facf 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e02c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fa95 	bl	800505a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2160      	movs	r1, #96	; 0x60
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fabf 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e01c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fa56 	bl	8004ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 faaf 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 faa6 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <TIM_Base_SetConfig+0xe4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00f      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c02:	d00b      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <TIM_Base_SetConfig+0xe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <TIM_Base_SetConfig+0xec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <TIM_Base_SetConfig+0xf0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <TIM_Base_SetConfig+0xe4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01b      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d017      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <TIM_Base_SetConfig+0xe8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <TIM_Base_SetConfig+0xec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00f      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <TIM_Base_SetConfig+0xf0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <TIM_Base_SetConfig+0xf4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <TIM_Base_SetConfig+0xf8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <TIM_Base_SetConfig+0xfc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d108      	bne.n	8004c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <TIM_Base_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d103      	bne.n	8004cb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f023 0302 	bic.w	r3, r3, #2
 8004d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <TIM_OC1_SetConfig+0xc8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10c      	bne.n	8004d5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0308 	bic.w	r3, r3, #8
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <TIM_OC1_SetConfig+0xc8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010000 	.word	0x40010000

08004db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0210 	bic.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0320 	bic.w	r3, r3, #32
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <TIM_OC2_SetConfig+0xd4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10d      	bne.n	8004e2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <TIM_OC2_SetConfig+0xd4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000

08004e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <TIM_OC3_SetConfig+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10d      	bne.n	8004f02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <TIM_OC3_SetConfig+0xd0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d113      	bne.n	8004f32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40010000 	.word	0x40010000

08004f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <TIM_OC4_SetConfig+0x9c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000

08004ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0201 	bic.w	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 030a 	bic.w	r3, r3, #10
 8005038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0210 	bic.w	r2, r3, #16
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	031b      	lsls	r3, r3, #12
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f043 0307 	orr.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	431a      	orrs	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	2201      	movs	r2, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	43db      	mvns	r3, r3
 8005152:	401a      	ands	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	fa01 f303 	lsl.w	r3, r1, r3
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e050      	b.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d013      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a13      	ldr	r2, [pc, #76]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10c      	bne.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	4313      	orrs	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000

08005258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e03d      	b.n	80052f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <__errno>:
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <__errno+0x8>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000064 	.word	0x20000064

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f002 ff04 	bl	8008150 <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	08008594 	.word	0x08008594
 800536c:	08008594 	.word	0x08008594
 8005370:	08008594 	.word	0x08008594
 8005374:	08008598 	.word	0x08008598

08005378 <memset>:
 8005378:	4402      	add	r2, r0
 800537a:	4603      	mov	r3, r0
 800537c:	4293      	cmp	r3, r2
 800537e:	d100      	bne.n	8005382 <memset+0xa>
 8005380:	4770      	bx	lr
 8005382:	f803 1b01 	strb.w	r1, [r3], #1
 8005386:	e7f9      	b.n	800537c <memset+0x4>

08005388 <__cvt>:
 8005388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	ec55 4b10 	vmov	r4, r5, d0
 8005390:	2d00      	cmp	r5, #0
 8005392:	460e      	mov	r6, r1
 8005394:	4619      	mov	r1, r3
 8005396:	462b      	mov	r3, r5
 8005398:	bfbb      	ittet	lt
 800539a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800539e:	461d      	movlt	r5, r3
 80053a0:	2300      	movge	r3, #0
 80053a2:	232d      	movlt	r3, #45	; 0x2d
 80053a4:	700b      	strb	r3, [r1, #0]
 80053a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053ac:	4691      	mov	r9, r2
 80053ae:	f023 0820 	bic.w	r8, r3, #32
 80053b2:	bfbc      	itt	lt
 80053b4:	4622      	movlt	r2, r4
 80053b6:	4614      	movlt	r4, r2
 80053b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053bc:	d005      	beq.n	80053ca <__cvt+0x42>
 80053be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053c2:	d100      	bne.n	80053c6 <__cvt+0x3e>
 80053c4:	3601      	adds	r6, #1
 80053c6:	2102      	movs	r1, #2
 80053c8:	e000      	b.n	80053cc <__cvt+0x44>
 80053ca:	2103      	movs	r1, #3
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	ab02      	add	r3, sp, #8
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	ec45 4b10 	vmov	d0, r4, r5
 80053d8:	4653      	mov	r3, sl
 80053da:	4632      	mov	r2, r6
 80053dc:	f000 fcec 	bl	8005db8 <_dtoa_r>
 80053e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053e4:	4607      	mov	r7, r0
 80053e6:	d102      	bne.n	80053ee <__cvt+0x66>
 80053e8:	f019 0f01 	tst.w	r9, #1
 80053ec:	d022      	beq.n	8005434 <__cvt+0xac>
 80053ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053f2:	eb07 0906 	add.w	r9, r7, r6
 80053f6:	d110      	bne.n	800541a <__cvt+0x92>
 80053f8:	783b      	ldrb	r3, [r7, #0]
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d10a      	bne.n	8005414 <__cvt+0x8c>
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fb fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800540a:	b918      	cbnz	r0, 8005414 <__cvt+0x8c>
 800540c:	f1c6 0601 	rsb	r6, r6, #1
 8005410:	f8ca 6000 	str.w	r6, [sl]
 8005414:	f8da 3000 	ldr.w	r3, [sl]
 8005418:	4499      	add	r9, r3
 800541a:	2200      	movs	r2, #0
 800541c:	2300      	movs	r3, #0
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb fb59 	bl	8000ad8 <__aeabi_dcmpeq>
 8005426:	b108      	cbz	r0, 800542c <__cvt+0xa4>
 8005428:	f8cd 900c 	str.w	r9, [sp, #12]
 800542c:	2230      	movs	r2, #48	; 0x30
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	454b      	cmp	r3, r9
 8005432:	d307      	bcc.n	8005444 <__cvt+0xbc>
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005438:	1bdb      	subs	r3, r3, r7
 800543a:	4638      	mov	r0, r7
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	b004      	add	sp, #16
 8005440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005444:	1c59      	adds	r1, r3, #1
 8005446:	9103      	str	r1, [sp, #12]
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e7f0      	b.n	800542e <__cvt+0xa6>

0800544c <__exponent>:
 800544c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800544e:	4603      	mov	r3, r0
 8005450:	2900      	cmp	r1, #0
 8005452:	bfb8      	it	lt
 8005454:	4249      	neglt	r1, r1
 8005456:	f803 2b02 	strb.w	r2, [r3], #2
 800545a:	bfb4      	ite	lt
 800545c:	222d      	movlt	r2, #45	; 0x2d
 800545e:	222b      	movge	r2, #43	; 0x2b
 8005460:	2909      	cmp	r1, #9
 8005462:	7042      	strb	r2, [r0, #1]
 8005464:	dd2a      	ble.n	80054bc <__exponent+0x70>
 8005466:	f10d 0407 	add.w	r4, sp, #7
 800546a:	46a4      	mov	ip, r4
 800546c:	270a      	movs	r7, #10
 800546e:	46a6      	mov	lr, r4
 8005470:	460a      	mov	r2, r1
 8005472:	fb91 f6f7 	sdiv	r6, r1, r7
 8005476:	fb07 1516 	mls	r5, r7, r6, r1
 800547a:	3530      	adds	r5, #48	; 0x30
 800547c:	2a63      	cmp	r2, #99	; 0x63
 800547e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005482:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005486:	4631      	mov	r1, r6
 8005488:	dcf1      	bgt.n	800546e <__exponent+0x22>
 800548a:	3130      	adds	r1, #48	; 0x30
 800548c:	f1ae 0502 	sub.w	r5, lr, #2
 8005490:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005494:	1c44      	adds	r4, r0, #1
 8005496:	4629      	mov	r1, r5
 8005498:	4561      	cmp	r1, ip
 800549a:	d30a      	bcc.n	80054b2 <__exponent+0x66>
 800549c:	f10d 0209 	add.w	r2, sp, #9
 80054a0:	eba2 020e 	sub.w	r2, r2, lr
 80054a4:	4565      	cmp	r5, ip
 80054a6:	bf88      	it	hi
 80054a8:	2200      	movhi	r2, #0
 80054aa:	4413      	add	r3, r2
 80054ac:	1a18      	subs	r0, r3, r0
 80054ae:	b003      	add	sp, #12
 80054b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054ba:	e7ed      	b.n	8005498 <__exponent+0x4c>
 80054bc:	2330      	movs	r3, #48	; 0x30
 80054be:	3130      	adds	r1, #48	; 0x30
 80054c0:	7083      	strb	r3, [r0, #2]
 80054c2:	70c1      	strb	r1, [r0, #3]
 80054c4:	1d03      	adds	r3, r0, #4
 80054c6:	e7f1      	b.n	80054ac <__exponent+0x60>

080054c8 <_printf_float>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	ed2d 8b02 	vpush	{d8}
 80054d0:	b08d      	sub	sp, #52	; 0x34
 80054d2:	460c      	mov	r4, r1
 80054d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054d8:	4616      	mov	r6, r2
 80054da:	461f      	mov	r7, r3
 80054dc:	4605      	mov	r5, r0
 80054de:	f001 fa59 	bl	8006994 <_localeconv_r>
 80054e2:	f8d0 a000 	ldr.w	sl, [r0]
 80054e6:	4650      	mov	r0, sl
 80054e8:	f7fa fe7a 	bl	80001e0 <strlen>
 80054ec:	2300      	movs	r3, #0
 80054ee:	930a      	str	r3, [sp, #40]	; 0x28
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	f8d8 3000 	ldr.w	r3, [r8]
 80054f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054fc:	3307      	adds	r3, #7
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	f103 0208 	add.w	r2, r3, #8
 8005506:	f8c8 2000 	str.w	r2, [r8]
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005512:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005516:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800551a:	9307      	str	r3, [sp, #28]
 800551c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005520:	ee08 0a10 	vmov	s16, r0
 8005524:	4b9f      	ldr	r3, [pc, #636]	; (80057a4 <_printf_float+0x2dc>)
 8005526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	f7fb fb05 	bl	8000b3c <__aeabi_dcmpun>
 8005532:	bb88      	cbnz	r0, 8005598 <_printf_float+0xd0>
 8005534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005538:	4b9a      	ldr	r3, [pc, #616]	; (80057a4 <_printf_float+0x2dc>)
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	f7fb fadf 	bl	8000b00 <__aeabi_dcmple>
 8005542:	bb48      	cbnz	r0, 8005598 <_printf_float+0xd0>
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	4640      	mov	r0, r8
 800554a:	4649      	mov	r1, r9
 800554c:	f7fb face 	bl	8000aec <__aeabi_dcmplt>
 8005550:	b110      	cbz	r0, 8005558 <_printf_float+0x90>
 8005552:	232d      	movs	r3, #45	; 0x2d
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005558:	4b93      	ldr	r3, [pc, #588]	; (80057a8 <_printf_float+0x2e0>)
 800555a:	4894      	ldr	r0, [pc, #592]	; (80057ac <_printf_float+0x2e4>)
 800555c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005560:	bf94      	ite	ls
 8005562:	4698      	movls	r8, r3
 8005564:	4680      	movhi	r8, r0
 8005566:	2303      	movs	r3, #3
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	9b05      	ldr	r3, [sp, #20]
 800556c:	f023 0204 	bic.w	r2, r3, #4
 8005570:	6022      	str	r2, [r4, #0]
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	9700      	str	r7, [sp, #0]
 8005578:	4633      	mov	r3, r6
 800557a:	aa0b      	add	r2, sp, #44	; 0x2c
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f9d8 	bl	8005934 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	f040 8090 	bne.w	80056aa <_printf_float+0x1e2>
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	b00d      	add	sp, #52	; 0x34
 8005590:	ecbd 8b02 	vpop	{d8}
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	4640      	mov	r0, r8
 800559e:	4649      	mov	r1, r9
 80055a0:	f7fb facc 	bl	8000b3c <__aeabi_dcmpun>
 80055a4:	b140      	cbz	r0, 80055b8 <_printf_float+0xf0>
 80055a6:	464b      	mov	r3, r9
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bfbc      	itt	lt
 80055ac:	232d      	movlt	r3, #45	; 0x2d
 80055ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055b2:	487f      	ldr	r0, [pc, #508]	; (80057b0 <_printf_float+0x2e8>)
 80055b4:	4b7f      	ldr	r3, [pc, #508]	; (80057b4 <_printf_float+0x2ec>)
 80055b6:	e7d1      	b.n	800555c <_printf_float+0x94>
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055be:	9206      	str	r2, [sp, #24]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	d13f      	bne.n	8005644 <_printf_float+0x17c>
 80055c4:	2306      	movs	r3, #6
 80055c6:	6063      	str	r3, [r4, #4]
 80055c8:	9b05      	ldr	r3, [sp, #20]
 80055ca:	6861      	ldr	r1, [r4, #4]
 80055cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055d0:	2300      	movs	r3, #0
 80055d2:	9303      	str	r3, [sp, #12]
 80055d4:	ab0a      	add	r3, sp, #40	; 0x28
 80055d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055da:	ab09      	add	r3, sp, #36	; 0x24
 80055dc:	ec49 8b10 	vmov	d0, r8, r9
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	6022      	str	r2, [r4, #0]
 80055e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7ff fecd 	bl	8005388 <__cvt>
 80055ee:	9b06      	ldr	r3, [sp, #24]
 80055f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055f2:	2b47      	cmp	r3, #71	; 0x47
 80055f4:	4680      	mov	r8, r0
 80055f6:	d108      	bne.n	800560a <_printf_float+0x142>
 80055f8:	1cc8      	adds	r0, r1, #3
 80055fa:	db02      	blt.n	8005602 <_printf_float+0x13a>
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	4299      	cmp	r1, r3
 8005600:	dd41      	ble.n	8005686 <_printf_float+0x1be>
 8005602:	f1ab 0b02 	sub.w	fp, fp, #2
 8005606:	fa5f fb8b 	uxtb.w	fp, fp
 800560a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800560e:	d820      	bhi.n	8005652 <_printf_float+0x18a>
 8005610:	3901      	subs	r1, #1
 8005612:	465a      	mov	r2, fp
 8005614:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005618:	9109      	str	r1, [sp, #36]	; 0x24
 800561a:	f7ff ff17 	bl	800544c <__exponent>
 800561e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005620:	1813      	adds	r3, r2, r0
 8005622:	2a01      	cmp	r2, #1
 8005624:	4681      	mov	r9, r0
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	dc02      	bgt.n	8005630 <_printf_float+0x168>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	07d2      	lsls	r2, r2, #31
 800562e:	d501      	bpl.n	8005634 <_printf_float+0x16c>
 8005630:	3301      	adds	r3, #1
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005638:	2b00      	cmp	r3, #0
 800563a:	d09c      	beq.n	8005576 <_printf_float+0xae>
 800563c:	232d      	movs	r3, #45	; 0x2d
 800563e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005642:	e798      	b.n	8005576 <_printf_float+0xae>
 8005644:	9a06      	ldr	r2, [sp, #24]
 8005646:	2a47      	cmp	r2, #71	; 0x47
 8005648:	d1be      	bne.n	80055c8 <_printf_float+0x100>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1bc      	bne.n	80055c8 <_printf_float+0x100>
 800564e:	2301      	movs	r3, #1
 8005650:	e7b9      	b.n	80055c6 <_printf_float+0xfe>
 8005652:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005656:	d118      	bne.n	800568a <_printf_float+0x1c2>
 8005658:	2900      	cmp	r1, #0
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	dd0b      	ble.n	8005676 <_printf_float+0x1ae>
 800565e:	6121      	str	r1, [r4, #16]
 8005660:	b913      	cbnz	r3, 8005668 <_printf_float+0x1a0>
 8005662:	6822      	ldr	r2, [r4, #0]
 8005664:	07d0      	lsls	r0, r2, #31
 8005666:	d502      	bpl.n	800566e <_printf_float+0x1a6>
 8005668:	3301      	adds	r3, #1
 800566a:	440b      	add	r3, r1
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	e7de      	b.n	8005634 <_printf_float+0x16c>
 8005676:	b913      	cbnz	r3, 800567e <_printf_float+0x1b6>
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	07d2      	lsls	r2, r2, #31
 800567c:	d501      	bpl.n	8005682 <_printf_float+0x1ba>
 800567e:	3302      	adds	r3, #2
 8005680:	e7f4      	b.n	800566c <_printf_float+0x1a4>
 8005682:	2301      	movs	r3, #1
 8005684:	e7f2      	b.n	800566c <_printf_float+0x1a4>
 8005686:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568c:	4299      	cmp	r1, r3
 800568e:	db05      	blt.n	800569c <_printf_float+0x1d4>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	6121      	str	r1, [r4, #16]
 8005694:	07d8      	lsls	r0, r3, #31
 8005696:	d5ea      	bpl.n	800566e <_printf_float+0x1a6>
 8005698:	1c4b      	adds	r3, r1, #1
 800569a:	e7e7      	b.n	800566c <_printf_float+0x1a4>
 800569c:	2900      	cmp	r1, #0
 800569e:	bfd4      	ite	le
 80056a0:	f1c1 0202 	rsble	r2, r1, #2
 80056a4:	2201      	movgt	r2, #1
 80056a6:	4413      	add	r3, r2
 80056a8:	e7e0      	b.n	800566c <_printf_float+0x1a4>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	055a      	lsls	r2, r3, #21
 80056ae:	d407      	bmi.n	80056c0 <_printf_float+0x1f8>
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	4642      	mov	r2, r8
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	d12c      	bne.n	8005718 <_printf_float+0x250>
 80056be:	e764      	b.n	800558a <_printf_float+0xc2>
 80056c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056c4:	f240 80e0 	bls.w	8005888 <_printf_float+0x3c0>
 80056c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	f7fb fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d034      	beq.n	8005742 <_printf_float+0x27a>
 80056d8:	4a37      	ldr	r2, [pc, #220]	; (80057b8 <_printf_float+0x2f0>)
 80056da:	2301      	movs	r3, #1
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af51 	beq.w	800558a <_printf_float+0xc2>
 80056e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ec:	429a      	cmp	r2, r3
 80056ee:	db02      	blt.n	80056f6 <_printf_float+0x22e>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	07d8      	lsls	r0, r3, #31
 80056f4:	d510      	bpl.n	8005718 <_printf_float+0x250>
 80056f6:	ee18 3a10 	vmov	r3, s16
 80056fa:	4652      	mov	r2, sl
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f af41 	beq.w	800558a <_printf_float+0xc2>
 8005708:	f04f 0800 	mov.w	r8, #0
 800570c:	f104 091a 	add.w	r9, r4, #26
 8005710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	4543      	cmp	r3, r8
 8005716:	dc09      	bgt.n	800572c <_printf_float+0x264>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	079b      	lsls	r3, r3, #30
 800571c:	f100 8105 	bmi.w	800592a <_printf_float+0x462>
 8005720:	68e0      	ldr	r0, [r4, #12]
 8005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005724:	4298      	cmp	r0, r3
 8005726:	bfb8      	it	lt
 8005728:	4618      	movlt	r0, r3
 800572a:	e730      	b.n	800558e <_printf_float+0xc6>
 800572c:	2301      	movs	r3, #1
 800572e:	464a      	mov	r2, r9
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f af27 	beq.w	800558a <_printf_float+0xc2>
 800573c:	f108 0801 	add.w	r8, r8, #1
 8005740:	e7e6      	b.n	8005710 <_printf_float+0x248>
 8005742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	dc39      	bgt.n	80057bc <_printf_float+0x2f4>
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <_printf_float+0x2f0>)
 800574a:	2301      	movs	r3, #1
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f af19 	beq.w	800558a <_printf_float+0xc2>
 8005758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800575c:	4313      	orrs	r3, r2
 800575e:	d102      	bne.n	8005766 <_printf_float+0x29e>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	07d9      	lsls	r1, r3, #31
 8005764:	d5d8      	bpl.n	8005718 <_printf_float+0x250>
 8005766:	ee18 3a10 	vmov	r3, s16
 800576a:	4652      	mov	r2, sl
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f af09 	beq.w	800558a <_printf_float+0xc2>
 8005778:	f04f 0900 	mov.w	r9, #0
 800577c:	f104 0a1a 	add.w	sl, r4, #26
 8005780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005782:	425b      	negs	r3, r3
 8005784:	454b      	cmp	r3, r9
 8005786:	dc01      	bgt.n	800578c <_printf_float+0x2c4>
 8005788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578a:	e792      	b.n	80056b2 <_printf_float+0x1ea>
 800578c:	2301      	movs	r3, #1
 800578e:	4652      	mov	r2, sl
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f aef7 	beq.w	800558a <_printf_float+0xc2>
 800579c:	f109 0901 	add.w	r9, r9, #1
 80057a0:	e7ee      	b.n	8005780 <_printf_float+0x2b8>
 80057a2:	bf00      	nop
 80057a4:	7fefffff 	.word	0x7fefffff
 80057a8:	080081b8 	.word	0x080081b8
 80057ac:	080081bc 	.word	0x080081bc
 80057b0:	080081c4 	.word	0x080081c4
 80057b4:	080081c0 	.word	0x080081c0
 80057b8:	080081c8 	.word	0x080081c8
 80057bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057c0:	429a      	cmp	r2, r3
 80057c2:	bfa8      	it	ge
 80057c4:	461a      	movge	r2, r3
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	4691      	mov	r9, r2
 80057ca:	dc37      	bgt.n	800583c <_printf_float+0x374>
 80057cc:	f04f 0b00 	mov.w	fp, #0
 80057d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057d4:	f104 021a 	add.w	r2, r4, #26
 80057d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	eba3 0309 	sub.w	r3, r3, r9
 80057e0:	455b      	cmp	r3, fp
 80057e2:	dc33      	bgt.n	800584c <_printf_float+0x384>
 80057e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e8:	429a      	cmp	r2, r3
 80057ea:	db3b      	blt.n	8005864 <_printf_float+0x39c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	07da      	lsls	r2, r3, #31
 80057f0:	d438      	bmi.n	8005864 <_printf_float+0x39c>
 80057f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f4:	9a05      	ldr	r2, [sp, #20]
 80057f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057f8:	1a9a      	subs	r2, r3, r2
 80057fa:	eba3 0901 	sub.w	r9, r3, r1
 80057fe:	4591      	cmp	r9, r2
 8005800:	bfa8      	it	ge
 8005802:	4691      	movge	r9, r2
 8005804:	f1b9 0f00 	cmp.w	r9, #0
 8005808:	dc35      	bgt.n	8005876 <_printf_float+0x3ae>
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005812:	f104 0a1a 	add.w	sl, r4, #26
 8005816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	eba3 0309 	sub.w	r3, r3, r9
 8005820:	4543      	cmp	r3, r8
 8005822:	f77f af79 	ble.w	8005718 <_printf_float+0x250>
 8005826:	2301      	movs	r3, #1
 8005828:	4652      	mov	r2, sl
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	f43f aeaa 	beq.w	800558a <_printf_float+0xc2>
 8005836:	f108 0801 	add.w	r8, r8, #1
 800583a:	e7ec      	b.n	8005816 <_printf_float+0x34e>
 800583c:	4613      	mov	r3, r2
 800583e:	4631      	mov	r1, r6
 8005840:	4642      	mov	r2, r8
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	d1c0      	bne.n	80057cc <_printf_float+0x304>
 800584a:	e69e      	b.n	800558a <_printf_float+0xc2>
 800584c:	2301      	movs	r3, #1
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	9205      	str	r2, [sp, #20]
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f ae97 	beq.w	800558a <_printf_float+0xc2>
 800585c:	9a05      	ldr	r2, [sp, #20]
 800585e:	f10b 0b01 	add.w	fp, fp, #1
 8005862:	e7b9      	b.n	80057d8 <_printf_float+0x310>
 8005864:	ee18 3a10 	vmov	r3, s16
 8005868:	4652      	mov	r2, sl
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	d1be      	bne.n	80057f2 <_printf_float+0x32a>
 8005874:	e689      	b.n	800558a <_printf_float+0xc2>
 8005876:	9a05      	ldr	r2, [sp, #20]
 8005878:	464b      	mov	r3, r9
 800587a:	4442      	add	r2, r8
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	d1c1      	bne.n	800580a <_printf_float+0x342>
 8005886:	e680      	b.n	800558a <_printf_float+0xc2>
 8005888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588a:	2a01      	cmp	r2, #1
 800588c:	dc01      	bgt.n	8005892 <_printf_float+0x3ca>
 800588e:	07db      	lsls	r3, r3, #31
 8005890:	d538      	bpl.n	8005904 <_printf_float+0x43c>
 8005892:	2301      	movs	r3, #1
 8005894:	4642      	mov	r2, r8
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae74 	beq.w	800558a <_printf_float+0xc2>
 80058a2:	ee18 3a10 	vmov	r3, s16
 80058a6:	4652      	mov	r2, sl
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f ae6b 	beq.w	800558a <_printf_float+0xc2>
 80058b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058b8:	2200      	movs	r2, #0
 80058ba:	2300      	movs	r3, #0
 80058bc:	f7fb f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 80058c0:	b9d8      	cbnz	r0, 80058fa <_printf_float+0x432>
 80058c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c4:	f108 0201 	add.w	r2, r8, #1
 80058c8:	3b01      	subs	r3, #1
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	d10e      	bne.n	80058f2 <_printf_float+0x42a>
 80058d4:	e659      	b.n	800558a <_printf_float+0xc2>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4631      	mov	r1, r6
 80058dc:	4628      	mov	r0, r5
 80058de:	47b8      	blx	r7
 80058e0:	3001      	adds	r0, #1
 80058e2:	f43f ae52 	beq.w	800558a <_printf_float+0xc2>
 80058e6:	f108 0801 	add.w	r8, r8, #1
 80058ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4543      	cmp	r3, r8
 80058f0:	dcf1      	bgt.n	80058d6 <_printf_float+0x40e>
 80058f2:	464b      	mov	r3, r9
 80058f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058f8:	e6dc      	b.n	80056b4 <_printf_float+0x1ec>
 80058fa:	f04f 0800 	mov.w	r8, #0
 80058fe:	f104 0a1a 	add.w	sl, r4, #26
 8005902:	e7f2      	b.n	80058ea <_printf_float+0x422>
 8005904:	2301      	movs	r3, #1
 8005906:	4642      	mov	r2, r8
 8005908:	e7df      	b.n	80058ca <_printf_float+0x402>
 800590a:	2301      	movs	r3, #1
 800590c:	464a      	mov	r2, r9
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f ae38 	beq.w	800558a <_printf_float+0xc2>
 800591a:	f108 0801 	add.w	r8, r8, #1
 800591e:	68e3      	ldr	r3, [r4, #12]
 8005920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005922:	1a5b      	subs	r3, r3, r1
 8005924:	4543      	cmp	r3, r8
 8005926:	dcf0      	bgt.n	800590a <_printf_float+0x442>
 8005928:	e6fa      	b.n	8005720 <_printf_float+0x258>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	f104 0919 	add.w	r9, r4, #25
 8005932:	e7f4      	b.n	800591e <_printf_float+0x456>

08005934 <_printf_common>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	4616      	mov	r6, r2
 800593a:	4699      	mov	r9, r3
 800593c:	688a      	ldr	r2, [r1, #8]
 800593e:	690b      	ldr	r3, [r1, #16]
 8005940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005944:	4293      	cmp	r3, r2
 8005946:	bfb8      	it	lt
 8005948:	4613      	movlt	r3, r2
 800594a:	6033      	str	r3, [r6, #0]
 800594c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005950:	4607      	mov	r7, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b10a      	cbz	r2, 800595a <_printf_common+0x26>
 8005956:	3301      	adds	r3, #1
 8005958:	6033      	str	r3, [r6, #0]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0699      	lsls	r1, r3, #26
 800595e:	bf42      	ittt	mi
 8005960:	6833      	ldrmi	r3, [r6, #0]
 8005962:	3302      	addmi	r3, #2
 8005964:	6033      	strmi	r3, [r6, #0]
 8005966:	6825      	ldr	r5, [r4, #0]
 8005968:	f015 0506 	ands.w	r5, r5, #6
 800596c:	d106      	bne.n	800597c <_printf_common+0x48>
 800596e:	f104 0a19 	add.w	sl, r4, #25
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	6832      	ldr	r2, [r6, #0]
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	42ab      	cmp	r3, r5
 800597a:	dc26      	bgt.n	80059ca <_printf_common+0x96>
 800597c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005980:	1e13      	subs	r3, r2, #0
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	bf18      	it	ne
 8005986:	2301      	movne	r3, #1
 8005988:	0692      	lsls	r2, r2, #26
 800598a:	d42b      	bmi.n	80059e4 <_printf_common+0xb0>
 800598c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005990:	4649      	mov	r1, r9
 8005992:	4638      	mov	r0, r7
 8005994:	47c0      	blx	r8
 8005996:	3001      	adds	r0, #1
 8005998:	d01e      	beq.n	80059d8 <_printf_common+0xa4>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	68e5      	ldr	r5, [r4, #12]
 800599e:	6832      	ldr	r2, [r6, #0]
 80059a0:	f003 0306 	and.w	r3, r3, #6
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	bf08      	it	eq
 80059a8:	1aad      	subeq	r5, r5, r2
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	bf0c      	ite	eq
 80059b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b4:	2500      	movne	r5, #0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bfc4      	itt	gt
 80059ba:	1a9b      	subgt	r3, r3, r2
 80059bc:	18ed      	addgt	r5, r5, r3
 80059be:	2600      	movs	r6, #0
 80059c0:	341a      	adds	r4, #26
 80059c2:	42b5      	cmp	r5, r6
 80059c4:	d11a      	bne.n	80059fc <_printf_common+0xc8>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e008      	b.n	80059dc <_printf_common+0xa8>
 80059ca:	2301      	movs	r3, #1
 80059cc:	4652      	mov	r2, sl
 80059ce:	4649      	mov	r1, r9
 80059d0:	4638      	mov	r0, r7
 80059d2:	47c0      	blx	r8
 80059d4:	3001      	adds	r0, #1
 80059d6:	d103      	bne.n	80059e0 <_printf_common+0xac>
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7c6      	b.n	8005972 <_printf_common+0x3e>
 80059e4:	18e1      	adds	r1, r4, r3
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	2030      	movs	r0, #48	; 0x30
 80059ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ee:	4422      	add	r2, r4
 80059f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f8:	3302      	adds	r3, #2
 80059fa:	e7c7      	b.n	800598c <_printf_common+0x58>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4622      	mov	r2, r4
 8005a00:	4649      	mov	r1, r9
 8005a02:	4638      	mov	r0, r7
 8005a04:	47c0      	blx	r8
 8005a06:	3001      	adds	r0, #1
 8005a08:	d0e6      	beq.n	80059d8 <_printf_common+0xa4>
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7d9      	b.n	80059c2 <_printf_common+0x8e>
	...

08005a10 <_printf_i>:
 8005a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	7e0f      	ldrb	r7, [r1, #24]
 8005a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a18:	2f78      	cmp	r7, #120	; 0x78
 8005a1a:	4691      	mov	r9, r2
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	469a      	mov	sl, r3
 8005a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a26:	d807      	bhi.n	8005a38 <_printf_i+0x28>
 8005a28:	2f62      	cmp	r7, #98	; 0x62
 8005a2a:	d80a      	bhi.n	8005a42 <_printf_i+0x32>
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	f000 80d8 	beq.w	8005be2 <_printf_i+0x1d2>
 8005a32:	2f58      	cmp	r7, #88	; 0x58
 8005a34:	f000 80a3 	beq.w	8005b7e <_printf_i+0x16e>
 8005a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a40:	e03a      	b.n	8005ab8 <_printf_i+0xa8>
 8005a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a46:	2b15      	cmp	r3, #21
 8005a48:	d8f6      	bhi.n	8005a38 <_printf_i+0x28>
 8005a4a:	a101      	add	r1, pc, #4	; (adr r1, 8005a50 <_printf_i+0x40>)
 8005a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a50:	08005aa9 	.word	0x08005aa9
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005a39 	.word	0x08005a39
 8005a5c:	08005a39 	.word	0x08005a39
 8005a60:	08005a39 	.word	0x08005a39
 8005a64:	08005a39 	.word	0x08005a39
 8005a68:	08005abd 	.word	0x08005abd
 8005a6c:	08005a39 	.word	0x08005a39
 8005a70:	08005a39 	.word	0x08005a39
 8005a74:	08005a39 	.word	0x08005a39
 8005a78:	08005a39 	.word	0x08005a39
 8005a7c:	08005bc9 	.word	0x08005bc9
 8005a80:	08005aed 	.word	0x08005aed
 8005a84:	08005bab 	.word	0x08005bab
 8005a88:	08005a39 	.word	0x08005a39
 8005a8c:	08005a39 	.word	0x08005a39
 8005a90:	08005beb 	.word	0x08005beb
 8005a94:	08005a39 	.word	0x08005a39
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005a39 	.word	0x08005a39
 8005aa0:	08005a39 	.word	0x08005a39
 8005aa4:	08005bb3 	.word	0x08005bb3
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0a3      	b.n	8005c04 <_printf_i+0x1f4>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	6829      	ldr	r1, [r5, #0]
 8005ac0:	0606      	lsls	r6, r0, #24
 8005ac2:	f101 0304 	add.w	r3, r1, #4
 8005ac6:	d50a      	bpl.n	8005ade <_printf_i+0xce>
 8005ac8:	680e      	ldr	r6, [r1, #0]
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	da03      	bge.n	8005ad8 <_printf_i+0xc8>
 8005ad0:	232d      	movs	r3, #45	; 0x2d
 8005ad2:	4276      	negs	r6, r6
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad8:	485e      	ldr	r0, [pc, #376]	; (8005c54 <_printf_i+0x244>)
 8005ada:	230a      	movs	r3, #10
 8005adc:	e019      	b.n	8005b12 <_printf_i+0x102>
 8005ade:	680e      	ldr	r6, [r1, #0]
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ae6:	bf18      	it	ne
 8005ae8:	b236      	sxthne	r6, r6
 8005aea:	e7ef      	b.n	8005acc <_printf_i+0xbc>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1d19      	adds	r1, r3, #4
 8005af2:	6029      	str	r1, [r5, #0]
 8005af4:	0601      	lsls	r1, r0, #24
 8005af6:	d501      	bpl.n	8005afc <_printf_i+0xec>
 8005af8:	681e      	ldr	r6, [r3, #0]
 8005afa:	e002      	b.n	8005b02 <_printf_i+0xf2>
 8005afc:	0646      	lsls	r6, r0, #25
 8005afe:	d5fb      	bpl.n	8005af8 <_printf_i+0xe8>
 8005b00:	881e      	ldrh	r6, [r3, #0]
 8005b02:	4854      	ldr	r0, [pc, #336]	; (8005c54 <_printf_i+0x244>)
 8005b04:	2f6f      	cmp	r7, #111	; 0x6f
 8005b06:	bf0c      	ite	eq
 8005b08:	2308      	moveq	r3, #8
 8005b0a:	230a      	movne	r3, #10
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b12:	6865      	ldr	r5, [r4, #4]
 8005b14:	60a5      	str	r5, [r4, #8]
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	bfa2      	ittt	ge
 8005b1a:	6821      	ldrge	r1, [r4, #0]
 8005b1c:	f021 0104 	bicge.w	r1, r1, #4
 8005b20:	6021      	strge	r1, [r4, #0]
 8005b22:	b90e      	cbnz	r6, 8005b28 <_printf_i+0x118>
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	d04d      	beq.n	8005bc4 <_printf_i+0x1b4>
 8005b28:	4615      	mov	r5, r2
 8005b2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b2e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b32:	5dc7      	ldrb	r7, [r0, r7]
 8005b34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b38:	4637      	mov	r7, r6
 8005b3a:	42bb      	cmp	r3, r7
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	d9f4      	bls.n	8005b2a <_printf_i+0x11a>
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d10b      	bne.n	8005b5c <_printf_i+0x14c>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	07de      	lsls	r6, r3, #31
 8005b48:	d508      	bpl.n	8005b5c <_printf_i+0x14c>
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	6861      	ldr	r1, [r4, #4]
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	bfde      	ittt	le
 8005b52:	2330      	movle	r3, #48	; 0x30
 8005b54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b5c:	1b52      	subs	r2, r2, r5
 8005b5e:	6122      	str	r2, [r4, #16]
 8005b60:	f8cd a000 	str.w	sl, [sp]
 8005b64:	464b      	mov	r3, r9
 8005b66:	aa03      	add	r2, sp, #12
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f7ff fee2 	bl	8005934 <_printf_common>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d14c      	bne.n	8005c0e <_printf_i+0x1fe>
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	b004      	add	sp, #16
 8005b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7e:	4835      	ldr	r0, [pc, #212]	; (8005c54 <_printf_i+0x244>)
 8005b80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b84:	6829      	ldr	r1, [r5, #0]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b8c:	6029      	str	r1, [r5, #0]
 8005b8e:	061d      	lsls	r5, r3, #24
 8005b90:	d514      	bpl.n	8005bbc <_printf_i+0x1ac>
 8005b92:	07df      	lsls	r7, r3, #31
 8005b94:	bf44      	itt	mi
 8005b96:	f043 0320 	orrmi.w	r3, r3, #32
 8005b9a:	6023      	strmi	r3, [r4, #0]
 8005b9c:	b91e      	cbnz	r6, 8005ba6 <_printf_i+0x196>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f023 0320 	bic.w	r3, r3, #32
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	2310      	movs	r3, #16
 8005ba8:	e7b0      	b.n	8005b0c <_printf_i+0xfc>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	f043 0320 	orr.w	r3, r3, #32
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	2378      	movs	r3, #120	; 0x78
 8005bb4:	4828      	ldr	r0, [pc, #160]	; (8005c58 <_printf_i+0x248>)
 8005bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bba:	e7e3      	b.n	8005b84 <_printf_i+0x174>
 8005bbc:	0659      	lsls	r1, r3, #25
 8005bbe:	bf48      	it	mi
 8005bc0:	b2b6      	uxthmi	r6, r6
 8005bc2:	e7e6      	b.n	8005b92 <_printf_i+0x182>
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	e7bb      	b.n	8005b40 <_printf_i+0x130>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	6826      	ldr	r6, [r4, #0]
 8005bcc:	6961      	ldr	r1, [r4, #20]
 8005bce:	1d18      	adds	r0, r3, #4
 8005bd0:	6028      	str	r0, [r5, #0]
 8005bd2:	0635      	lsls	r5, r6, #24
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0x1cc>
 8005bd8:	6019      	str	r1, [r3, #0]
 8005bda:	e002      	b.n	8005be2 <_printf_i+0x1d2>
 8005bdc:	0670      	lsls	r0, r6, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0x1c8>
 8005be0:	8019      	strh	r1, [r3, #0]
 8005be2:	2300      	movs	r3, #0
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	4615      	mov	r5, r2
 8005be8:	e7ba      	b.n	8005b60 <_printf_i+0x150>
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	602a      	str	r2, [r5, #0]
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	6862      	ldr	r2, [r4, #4]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7fa fafa 	bl	80001f0 <memchr>
 8005bfc:	b108      	cbz	r0, 8005c02 <_printf_i+0x1f2>
 8005bfe:	1b40      	subs	r0, r0, r5
 8005c00:	6060      	str	r0, [r4, #4]
 8005c02:	6863      	ldr	r3, [r4, #4]
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	2300      	movs	r3, #0
 8005c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0c:	e7a8      	b.n	8005b60 <_printf_i+0x150>
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d0ab      	beq.n	8005b74 <_printf_i+0x164>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	079b      	lsls	r3, r3, #30
 8005c20:	d413      	bmi.n	8005c4a <_printf_i+0x23a>
 8005c22:	68e0      	ldr	r0, [r4, #12]
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	4298      	cmp	r0, r3
 8005c28:	bfb8      	it	lt
 8005c2a:	4618      	movlt	r0, r3
 8005c2c:	e7a4      	b.n	8005b78 <_printf_i+0x168>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4632      	mov	r2, r6
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	47d0      	blx	sl
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d09b      	beq.n	8005b74 <_printf_i+0x164>
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	68e3      	ldr	r3, [r4, #12]
 8005c40:	9903      	ldr	r1, [sp, #12]
 8005c42:	1a5b      	subs	r3, r3, r1
 8005c44:	42ab      	cmp	r3, r5
 8005c46:	dcf2      	bgt.n	8005c2e <_printf_i+0x21e>
 8005c48:	e7eb      	b.n	8005c22 <_printf_i+0x212>
 8005c4a:	2500      	movs	r5, #0
 8005c4c:	f104 0619 	add.w	r6, r4, #25
 8005c50:	e7f5      	b.n	8005c3e <_printf_i+0x22e>
 8005c52:	bf00      	nop
 8005c54:	080081ca 	.word	0x080081ca
 8005c58:	080081db 	.word	0x080081db

08005c5c <siprintf>:
 8005c5c:	b40e      	push	{r1, r2, r3}
 8005c5e:	b500      	push	{lr}
 8005c60:	b09c      	sub	sp, #112	; 0x70
 8005c62:	ab1d      	add	r3, sp, #116	; 0x74
 8005c64:	9002      	str	r0, [sp, #8]
 8005c66:	9006      	str	r0, [sp, #24]
 8005c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c6c:	4809      	ldr	r0, [pc, #36]	; (8005c94 <siprintf+0x38>)
 8005c6e:	9107      	str	r1, [sp, #28]
 8005c70:	9104      	str	r1, [sp, #16]
 8005c72:	4909      	ldr	r1, [pc, #36]	; (8005c98 <siprintf+0x3c>)
 8005c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c78:	9105      	str	r1, [sp, #20]
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	a902      	add	r1, sp, #8
 8005c80:	f001 fb78 	bl	8007374 <_svfiprintf_r>
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	b01c      	add	sp, #112	; 0x70
 8005c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c90:	b003      	add	sp, #12
 8005c92:	4770      	bx	lr
 8005c94:	20000064 	.word	0x20000064
 8005c98:	ffff0208 	.word	0xffff0208

08005c9c <quorem>:
 8005c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	6903      	ldr	r3, [r0, #16]
 8005ca2:	690c      	ldr	r4, [r1, #16]
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	f2c0 8081 	blt.w	8005dae <quorem+0x112>
 8005cac:	3c01      	subs	r4, #1
 8005cae:	f101 0814 	add.w	r8, r1, #20
 8005cb2:	f100 0514 	add.w	r5, r0, #20
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cd4:	d331      	bcc.n	8005d3a <quorem+0x9e>
 8005cd6:	f04f 0e00 	mov.w	lr, #0
 8005cda:	4640      	mov	r0, r8
 8005cdc:	46ac      	mov	ip, r5
 8005cde:	46f2      	mov	sl, lr
 8005ce0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ce4:	b293      	uxth	r3, r2
 8005ce6:	fb06 e303 	mla	r3, r6, r3, lr
 8005cea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cf4:	f8dc a000 	ldr.w	sl, [ip]
 8005cf8:	0c12      	lsrs	r2, r2, #16
 8005cfa:	fa13 f38a 	uxtah	r3, r3, sl
 8005cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d14:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d18:	4581      	cmp	r9, r0
 8005d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d26:	d2db      	bcs.n	8005ce0 <quorem+0x44>
 8005d28:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d2c:	b92b      	cbnz	r3, 8005d3a <quorem+0x9e>
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	3b04      	subs	r3, #4
 8005d32:	429d      	cmp	r5, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	d32e      	bcc.n	8005d96 <quorem+0xfa>
 8005d38:	613c      	str	r4, [r7, #16]
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f001 f8c6 	bl	8006ecc <__mcmp>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	db24      	blt.n	8005d8e <quorem+0xf2>
 8005d44:	3601      	adds	r6, #1
 8005d46:	4628      	mov	r0, r5
 8005d48:	f04f 0c00 	mov.w	ip, #0
 8005d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d50:	f8d0 e000 	ldr.w	lr, [r0]
 8005d54:	b293      	uxth	r3, r2
 8005d56:	ebac 0303 	sub.w	r3, ip, r3
 8005d5a:	0c12      	lsrs	r2, r2, #16
 8005d5c:	fa13 f38e 	uxtah	r3, r3, lr
 8005d60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d6e:	45c1      	cmp	r9, r8
 8005d70:	f840 3b04 	str.w	r3, [r0], #4
 8005d74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d78:	d2e8      	bcs.n	8005d4c <quorem+0xb0>
 8005d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d82:	b922      	cbnz	r2, 8005d8e <quorem+0xf2>
 8005d84:	3b04      	subs	r3, #4
 8005d86:	429d      	cmp	r5, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	d30a      	bcc.n	8005da2 <quorem+0x106>
 8005d8c:	613c      	str	r4, [r7, #16]
 8005d8e:	4630      	mov	r0, r6
 8005d90:	b003      	add	sp, #12
 8005d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1cc      	bne.n	8005d38 <quorem+0x9c>
 8005d9e:	3c01      	subs	r4, #1
 8005da0:	e7c7      	b.n	8005d32 <quorem+0x96>
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d1f0      	bne.n	8005d8c <quorem+0xf0>
 8005daa:	3c01      	subs	r4, #1
 8005dac:	e7eb      	b.n	8005d86 <quorem+0xea>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e7ee      	b.n	8005d90 <quorem+0xf4>
 8005db2:	0000      	movs	r0, r0
 8005db4:	0000      	movs	r0, r0
	...

08005db8 <_dtoa_r>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	ed2d 8b04 	vpush	{d8-d9}
 8005dc0:	ec57 6b10 	vmov	r6, r7, d0
 8005dc4:	b093      	sub	sp, #76	; 0x4c
 8005dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dcc:	9106      	str	r1, [sp, #24]
 8005dce:	ee10 aa10 	vmov	sl, s0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005dd8:	46bb      	mov	fp, r7
 8005dda:	b975      	cbnz	r5, 8005dfa <_dtoa_r+0x42>
 8005ddc:	2010      	movs	r0, #16
 8005dde:	f000 fddd 	bl	800699c <malloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6260      	str	r0, [r4, #36]	; 0x24
 8005de6:	b920      	cbnz	r0, 8005df2 <_dtoa_r+0x3a>
 8005de8:	4ba7      	ldr	r3, [pc, #668]	; (8006088 <_dtoa_r+0x2d0>)
 8005dea:	21ea      	movs	r1, #234	; 0xea
 8005dec:	48a7      	ldr	r0, [pc, #668]	; (800608c <_dtoa_r+0x2d4>)
 8005dee:	f001 fbd1 	bl	8007594 <__assert_func>
 8005df2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005df6:	6005      	str	r5, [r0, #0]
 8005df8:	60c5      	str	r5, [r0, #12]
 8005dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	b151      	cbz	r1, 8005e16 <_dtoa_r+0x5e>
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	604a      	str	r2, [r1, #4]
 8005e04:	2301      	movs	r3, #1
 8005e06:	4093      	lsls	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f000 fe1c 	bl	8006a48 <_Bfree>
 8005e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	1e3b      	subs	r3, r7, #0
 8005e18:	bfaa      	itet	ge
 8005e1a:	2300      	movge	r3, #0
 8005e1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e20:	f8c8 3000 	strge.w	r3, [r8]
 8005e24:	4b9a      	ldr	r3, [pc, #616]	; (8006090 <_dtoa_r+0x2d8>)
 8005e26:	bfbc      	itt	lt
 8005e28:	2201      	movlt	r2, #1
 8005e2a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e2e:	ea33 030b 	bics.w	r3, r3, fp
 8005e32:	d11b      	bne.n	8005e6c <_dtoa_r+0xb4>
 8005e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e36:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e40:	4333      	orrs	r3, r6
 8005e42:	f000 8592 	beq.w	800696a <_dtoa_r+0xbb2>
 8005e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e48:	b963      	cbnz	r3, 8005e64 <_dtoa_r+0xac>
 8005e4a:	4b92      	ldr	r3, [pc, #584]	; (8006094 <_dtoa_r+0x2dc>)
 8005e4c:	e022      	b.n	8005e94 <_dtoa_r+0xdc>
 8005e4e:	4b92      	ldr	r3, [pc, #584]	; (8006098 <_dtoa_r+0x2e0>)
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	3308      	adds	r3, #8
 8005e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	9801      	ldr	r0, [sp, #4]
 8005e5a:	b013      	add	sp, #76	; 0x4c
 8005e5c:	ecbd 8b04 	vpop	{d8-d9}
 8005e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e64:	4b8b      	ldr	r3, [pc, #556]	; (8006094 <_dtoa_r+0x2dc>)
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	3303      	adds	r3, #3
 8005e6a:	e7f3      	b.n	8005e54 <_dtoa_r+0x9c>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4650      	mov	r0, sl
 8005e72:	4659      	mov	r1, fp
 8005e74:	f7fa fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e78:	ec4b ab19 	vmov	d9, sl, fp
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	b158      	cbz	r0, 8005e98 <_dtoa_r+0xe0>
 8005e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e82:	2301      	movs	r3, #1
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 856b 	beq.w	8006964 <_dtoa_r+0xbac>
 8005e8e:	4883      	ldr	r0, [pc, #524]	; (800609c <_dtoa_r+0x2e4>)
 8005e90:	6018      	str	r0, [r3, #0]
 8005e92:	1e43      	subs	r3, r0, #1
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	e7df      	b.n	8005e58 <_dtoa_r+0xa0>
 8005e98:	ec4b ab10 	vmov	d0, sl, fp
 8005e9c:	aa10      	add	r2, sp, #64	; 0x40
 8005e9e:	a911      	add	r1, sp, #68	; 0x44
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f001 f8b9 	bl	8007018 <__d2b>
 8005ea6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005eaa:	ee08 0a10 	vmov	s16, r0
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	f000 8084 	beq.w	8005fbc <_dtoa_r+0x204>
 8005eb4:	ee19 3a90 	vmov	r3, s19
 8005eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ebc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ec0:	4656      	mov	r6, sl
 8005ec2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ece:	4b74      	ldr	r3, [pc, #464]	; (80060a0 <_dtoa_r+0x2e8>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f7fa f9df 	bl	8000298 <__aeabi_dsub>
 8005eda:	a365      	add	r3, pc, #404	; (adr r3, 8006070 <_dtoa_r+0x2b8>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa fb92 	bl	8000608 <__aeabi_dmul>
 8005ee4:	a364      	add	r3, pc, #400	; (adr r3, 8006078 <_dtoa_r+0x2c0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa f9d7 	bl	800029c <__adddf3>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	f7fa fb1e 	bl	8000534 <__aeabi_i2d>
 8005ef8:	a361      	add	r3, pc, #388	; (adr r3, 8006080 <_dtoa_r+0x2c8>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa fb83 	bl	8000608 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4630      	mov	r0, r6
 8005f08:	4639      	mov	r1, r7
 8005f0a:	f7fa f9c7 	bl	800029c <__adddf3>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460f      	mov	r7, r1
 8005f12:	f7fa fe29 	bl	8000b68 <__aeabi_d2iz>
 8005f16:	2200      	movs	r2, #0
 8005f18:	9000      	str	r0, [sp, #0]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	4639      	mov	r1, r7
 8005f20:	f7fa fde4 	bl	8000aec <__aeabi_dcmplt>
 8005f24:	b150      	cbz	r0, 8005f3c <_dtoa_r+0x184>
 8005f26:	9800      	ldr	r0, [sp, #0]
 8005f28:	f7fa fb04 	bl	8000534 <__aeabi_i2d>
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	463b      	mov	r3, r7
 8005f30:	f7fa fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f34:	b910      	cbnz	r0, 8005f3c <_dtoa_r+0x184>
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	9b00      	ldr	r3, [sp, #0]
 8005f3e:	2b16      	cmp	r3, #22
 8005f40:	d85a      	bhi.n	8005ff8 <_dtoa_r+0x240>
 8005f42:	9a00      	ldr	r2, [sp, #0]
 8005f44:	4b57      	ldr	r3, [pc, #348]	; (80060a4 <_dtoa_r+0x2ec>)
 8005f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	ec51 0b19 	vmov	r0, r1, d9
 8005f52:	f7fa fdcb 	bl	8000aec <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d050      	beq.n	8005ffc <_dtoa_r+0x244>
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f66:	1b5d      	subs	r5, r3, r5
 8005f68:	1e6b      	subs	r3, r5, #1
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	bf45      	ittet	mi
 8005f6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f72:	9304      	strmi	r3, [sp, #16]
 8005f74:	2300      	movpl	r3, #0
 8005f76:	2300      	movmi	r3, #0
 8005f78:	bf4c      	ite	mi
 8005f7a:	9305      	strmi	r3, [sp, #20]
 8005f7c:	9304      	strpl	r3, [sp, #16]
 8005f7e:	9b00      	ldr	r3, [sp, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	db3d      	blt.n	8006000 <_dtoa_r+0x248>
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	9a00      	ldr	r2, [sp, #0]
 8005f88:	920a      	str	r2, [sp, #40]	; 0x28
 8005f8a:	4413      	add	r3, r2
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9307      	str	r3, [sp, #28]
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	2b09      	cmp	r3, #9
 8005f96:	f200 8089 	bhi.w	80060ac <_dtoa_r+0x2f4>
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	bfc4      	itt	gt
 8005f9e:	3b04      	subgt	r3, #4
 8005fa0:	9306      	strgt	r3, [sp, #24]
 8005fa2:	9b06      	ldr	r3, [sp, #24]
 8005fa4:	f1a3 0302 	sub.w	r3, r3, #2
 8005fa8:	bfcc      	ite	gt
 8005faa:	2500      	movgt	r5, #0
 8005fac:	2501      	movle	r5, #1
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	f200 8087 	bhi.w	80060c2 <_dtoa_r+0x30a>
 8005fb4:	e8df f003 	tbb	[pc, r3]
 8005fb8:	59383a2d 	.word	0x59383a2d
 8005fbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fc0:	441d      	add	r5, r3
 8005fc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	bfc1      	itttt	gt
 8005fca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fda:	bfda      	itte	le
 8005fdc:	f1c3 0320 	rsble	r3, r3, #32
 8005fe0:	fa06 f003 	lslle.w	r0, r6, r3
 8005fe4:	4318      	orrgt	r0, r3
 8005fe6:	f7fa fa95 	bl	8000514 <__aeabi_ui2d>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4606      	mov	r6, r0
 8005fee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ff2:	3d01      	subs	r5, #1
 8005ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff6:	e76a      	b.n	8005ece <_dtoa_r+0x116>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e7b2      	b.n	8005f62 <_dtoa_r+0x1aa>
 8005ffc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ffe:	e7b1      	b.n	8005f64 <_dtoa_r+0x1ac>
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	9a00      	ldr	r2, [sp, #0]
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	4253      	negs	r3, r2
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	2300      	movs	r3, #0
 800600e:	930a      	str	r3, [sp, #40]	; 0x28
 8006010:	e7bf      	b.n	8005f92 <_dtoa_r+0x1da>
 8006012:	2300      	movs	r3, #0
 8006014:	9308      	str	r3, [sp, #32]
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	dc55      	bgt.n	80060c8 <_dtoa_r+0x310>
 800601c:	2301      	movs	r3, #1
 800601e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006022:	461a      	mov	r2, r3
 8006024:	9209      	str	r2, [sp, #36]	; 0x24
 8006026:	e00c      	b.n	8006042 <_dtoa_r+0x28a>
 8006028:	2301      	movs	r3, #1
 800602a:	e7f3      	b.n	8006014 <_dtoa_r+0x25c>
 800602c:	2300      	movs	r3, #0
 800602e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	9b00      	ldr	r3, [sp, #0]
 8006034:	4413      	add	r3, r2
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	3301      	adds	r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	bfb8      	it	lt
 8006040:	2301      	movlt	r3, #1
 8006042:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006044:	2200      	movs	r2, #0
 8006046:	6042      	str	r2, [r0, #4]
 8006048:	2204      	movs	r2, #4
 800604a:	f102 0614 	add.w	r6, r2, #20
 800604e:	429e      	cmp	r6, r3
 8006050:	6841      	ldr	r1, [r0, #4]
 8006052:	d93d      	bls.n	80060d0 <_dtoa_r+0x318>
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fcb7 	bl	80069c8 <_Balloc>
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2800      	cmp	r0, #0
 800605e:	d13b      	bne.n	80060d8 <_dtoa_r+0x320>
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <_dtoa_r+0x2f0>)
 8006062:	4602      	mov	r2, r0
 8006064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006068:	e6c0      	b.n	8005dec <_dtoa_r+0x34>
 800606a:	2301      	movs	r3, #1
 800606c:	e7df      	b.n	800602e <_dtoa_r+0x276>
 800606e:	bf00      	nop
 8006070:	636f4361 	.word	0x636f4361
 8006074:	3fd287a7 	.word	0x3fd287a7
 8006078:	8b60c8b3 	.word	0x8b60c8b3
 800607c:	3fc68a28 	.word	0x3fc68a28
 8006080:	509f79fb 	.word	0x509f79fb
 8006084:	3fd34413 	.word	0x3fd34413
 8006088:	080081f9 	.word	0x080081f9
 800608c:	08008210 	.word	0x08008210
 8006090:	7ff00000 	.word	0x7ff00000
 8006094:	080081f5 	.word	0x080081f5
 8006098:	080081ec 	.word	0x080081ec
 800609c:	080081c9 	.word	0x080081c9
 80060a0:	3ff80000 	.word	0x3ff80000
 80060a4:	08008300 	.word	0x08008300
 80060a8:	0800826b 	.word	0x0800826b
 80060ac:	2501      	movs	r5, #1
 80060ae:	2300      	movs	r3, #0
 80060b0:	9306      	str	r3, [sp, #24]
 80060b2:	9508      	str	r5, [sp, #32]
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	2312      	movs	r3, #18
 80060c0:	e7b0      	b.n	8006024 <_dtoa_r+0x26c>
 80060c2:	2301      	movs	r3, #1
 80060c4:	9308      	str	r3, [sp, #32]
 80060c6:	e7f5      	b.n	80060b4 <_dtoa_r+0x2fc>
 80060c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ce:	e7b8      	b.n	8006042 <_dtoa_r+0x28a>
 80060d0:	3101      	adds	r1, #1
 80060d2:	6041      	str	r1, [r0, #4]
 80060d4:	0052      	lsls	r2, r2, #1
 80060d6:	e7b8      	b.n	800604a <_dtoa_r+0x292>
 80060d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060da:	9a01      	ldr	r2, [sp, #4]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	2b0e      	cmp	r3, #14
 80060e2:	f200 809d 	bhi.w	8006220 <_dtoa_r+0x468>
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	f000 809a 	beq.w	8006220 <_dtoa_r+0x468>
 80060ec:	9b00      	ldr	r3, [sp, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dd32      	ble.n	8006158 <_dtoa_r+0x3a0>
 80060f2:	4ab7      	ldr	r2, [pc, #732]	; (80063d0 <_dtoa_r+0x618>)
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006100:	9b00      	ldr	r3, [sp, #0]
 8006102:	05d8      	lsls	r0, r3, #23
 8006104:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006108:	d516      	bpl.n	8006138 <_dtoa_r+0x380>
 800610a:	4bb2      	ldr	r3, [pc, #712]	; (80063d4 <_dtoa_r+0x61c>)
 800610c:	ec51 0b19 	vmov	r0, r1, d9
 8006110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006114:	f7fa fba2 	bl	800085c <__aeabi_ddiv>
 8006118:	f007 070f 	and.w	r7, r7, #15
 800611c:	4682      	mov	sl, r0
 800611e:	468b      	mov	fp, r1
 8006120:	2503      	movs	r5, #3
 8006122:	4eac      	ldr	r6, [pc, #688]	; (80063d4 <_dtoa_r+0x61c>)
 8006124:	b957      	cbnz	r7, 800613c <_dtoa_r+0x384>
 8006126:	4642      	mov	r2, r8
 8006128:	464b      	mov	r3, r9
 800612a:	4650      	mov	r0, sl
 800612c:	4659      	mov	r1, fp
 800612e:	f7fa fb95 	bl	800085c <__aeabi_ddiv>
 8006132:	4682      	mov	sl, r0
 8006134:	468b      	mov	fp, r1
 8006136:	e028      	b.n	800618a <_dtoa_r+0x3d2>
 8006138:	2502      	movs	r5, #2
 800613a:	e7f2      	b.n	8006122 <_dtoa_r+0x36a>
 800613c:	07f9      	lsls	r1, r7, #31
 800613e:	d508      	bpl.n	8006152 <_dtoa_r+0x39a>
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006148:	f7fa fa5e 	bl	8000608 <__aeabi_dmul>
 800614c:	3501      	adds	r5, #1
 800614e:	4680      	mov	r8, r0
 8006150:	4689      	mov	r9, r1
 8006152:	107f      	asrs	r7, r7, #1
 8006154:	3608      	adds	r6, #8
 8006156:	e7e5      	b.n	8006124 <_dtoa_r+0x36c>
 8006158:	f000 809b 	beq.w	8006292 <_dtoa_r+0x4da>
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	4f9d      	ldr	r7, [pc, #628]	; (80063d4 <_dtoa_r+0x61c>)
 8006160:	425e      	negs	r6, r3
 8006162:	4b9b      	ldr	r3, [pc, #620]	; (80063d0 <_dtoa_r+0x618>)
 8006164:	f006 020f 	and.w	r2, r6, #15
 8006168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	ec51 0b19 	vmov	r0, r1, d9
 8006174:	f7fa fa48 	bl	8000608 <__aeabi_dmul>
 8006178:	1136      	asrs	r6, r6, #4
 800617a:	4682      	mov	sl, r0
 800617c:	468b      	mov	fp, r1
 800617e:	2300      	movs	r3, #0
 8006180:	2502      	movs	r5, #2
 8006182:	2e00      	cmp	r6, #0
 8006184:	d17a      	bne.n	800627c <_dtoa_r+0x4c4>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1d3      	bne.n	8006132 <_dtoa_r+0x37a>
 800618a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8082 	beq.w	8006296 <_dtoa_r+0x4de>
 8006192:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <_dtoa_r+0x620>)
 8006194:	2200      	movs	r2, #0
 8006196:	4650      	mov	r0, sl
 8006198:	4659      	mov	r1, fp
 800619a:	f7fa fca7 	bl	8000aec <__aeabi_dcmplt>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d079      	beq.n	8006296 <_dtoa_r+0x4de>
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d076      	beq.n	8006296 <_dtoa_r+0x4de>
 80061a8:	9b02      	ldr	r3, [sp, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dd36      	ble.n	800621c <_dtoa_r+0x464>
 80061ae:	9b00      	ldr	r3, [sp, #0]
 80061b0:	4650      	mov	r0, sl
 80061b2:	4659      	mov	r1, fp
 80061b4:	1e5f      	subs	r7, r3, #1
 80061b6:	2200      	movs	r2, #0
 80061b8:	4b88      	ldr	r3, [pc, #544]	; (80063dc <_dtoa_r+0x624>)
 80061ba:	f7fa fa25 	bl	8000608 <__aeabi_dmul>
 80061be:	9e02      	ldr	r6, [sp, #8]
 80061c0:	4682      	mov	sl, r0
 80061c2:	468b      	mov	fp, r1
 80061c4:	3501      	adds	r5, #1
 80061c6:	4628      	mov	r0, r5
 80061c8:	f7fa f9b4 	bl	8000534 <__aeabi_i2d>
 80061cc:	4652      	mov	r2, sl
 80061ce:	465b      	mov	r3, fp
 80061d0:	f7fa fa1a 	bl	8000608 <__aeabi_dmul>
 80061d4:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <_dtoa_r+0x628>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	f7fa f860 	bl	800029c <__adddf3>
 80061dc:	46d0      	mov	r8, sl
 80061de:	46d9      	mov	r9, fp
 80061e0:	4682      	mov	sl, r0
 80061e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	d158      	bne.n	800629c <_dtoa_r+0x4e4>
 80061ea:	4b7e      	ldr	r3, [pc, #504]	; (80063e4 <_dtoa_r+0x62c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	4640      	mov	r0, r8
 80061f0:	4649      	mov	r1, r9
 80061f2:	f7fa f851 	bl	8000298 <__aeabi_dsub>
 80061f6:	4652      	mov	r2, sl
 80061f8:	465b      	mov	r3, fp
 80061fa:	4680      	mov	r8, r0
 80061fc:	4689      	mov	r9, r1
 80061fe:	f7fa fc93 	bl	8000b28 <__aeabi_dcmpgt>
 8006202:	2800      	cmp	r0, #0
 8006204:	f040 8295 	bne.w	8006732 <_dtoa_r+0x97a>
 8006208:	4652      	mov	r2, sl
 800620a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa fc6b 	bl	8000aec <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	f040 8289 	bne.w	800672e <_dtoa_r+0x976>
 800621c:	ec5b ab19 	vmov	sl, fp, d9
 8006220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006222:	2b00      	cmp	r3, #0
 8006224:	f2c0 8148 	blt.w	80064b8 <_dtoa_r+0x700>
 8006228:	9a00      	ldr	r2, [sp, #0]
 800622a:	2a0e      	cmp	r2, #14
 800622c:	f300 8144 	bgt.w	80064b8 <_dtoa_r+0x700>
 8006230:	4b67      	ldr	r3, [pc, #412]	; (80063d0 <_dtoa_r+0x618>)
 8006232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006236:	e9d3 8900 	ldrd	r8, r9, [r3]
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	f280 80d5 	bge.w	80063ec <_dtoa_r+0x634>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f300 80d1 	bgt.w	80063ec <_dtoa_r+0x634>
 800624a:	f040 826f 	bne.w	800672c <_dtoa_r+0x974>
 800624e:	4b65      	ldr	r3, [pc, #404]	; (80063e4 <_dtoa_r+0x62c>)
 8006250:	2200      	movs	r2, #0
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7fa f9d7 	bl	8000608 <__aeabi_dmul>
 800625a:	4652      	mov	r2, sl
 800625c:	465b      	mov	r3, fp
 800625e:	f7fa fc59 	bl	8000b14 <__aeabi_dcmpge>
 8006262:	9e03      	ldr	r6, [sp, #12]
 8006264:	4637      	mov	r7, r6
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 8245 	bne.w	80066f6 <_dtoa_r+0x93e>
 800626c:	9d01      	ldr	r5, [sp, #4]
 800626e:	2331      	movs	r3, #49	; 0x31
 8006270:	f805 3b01 	strb.w	r3, [r5], #1
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	e240      	b.n	80066fe <_dtoa_r+0x946>
 800627c:	07f2      	lsls	r2, r6, #31
 800627e:	d505      	bpl.n	800628c <_dtoa_r+0x4d4>
 8006280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006284:	f7fa f9c0 	bl	8000608 <__aeabi_dmul>
 8006288:	3501      	adds	r5, #1
 800628a:	2301      	movs	r3, #1
 800628c:	1076      	asrs	r6, r6, #1
 800628e:	3708      	adds	r7, #8
 8006290:	e777      	b.n	8006182 <_dtoa_r+0x3ca>
 8006292:	2502      	movs	r5, #2
 8006294:	e779      	b.n	800618a <_dtoa_r+0x3d2>
 8006296:	9f00      	ldr	r7, [sp, #0]
 8006298:	9e03      	ldr	r6, [sp, #12]
 800629a:	e794      	b.n	80061c6 <_dtoa_r+0x40e>
 800629c:	9901      	ldr	r1, [sp, #4]
 800629e:	4b4c      	ldr	r3, [pc, #304]	; (80063d0 <_dtoa_r+0x618>)
 80062a0:	4431      	add	r1, r6
 80062a2:	910d      	str	r1, [sp, #52]	; 0x34
 80062a4:	9908      	ldr	r1, [sp, #32]
 80062a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062ae:	2900      	cmp	r1, #0
 80062b0:	d043      	beq.n	800633a <_dtoa_r+0x582>
 80062b2:	494d      	ldr	r1, [pc, #308]	; (80063e8 <_dtoa_r+0x630>)
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7fa fad1 	bl	800085c <__aeabi_ddiv>
 80062ba:	4652      	mov	r2, sl
 80062bc:	465b      	mov	r3, fp
 80062be:	f7f9 ffeb 	bl	8000298 <__aeabi_dsub>
 80062c2:	9d01      	ldr	r5, [sp, #4]
 80062c4:	4682      	mov	sl, r0
 80062c6:	468b      	mov	fp, r1
 80062c8:	4649      	mov	r1, r9
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7fa fc4c 	bl	8000b68 <__aeabi_d2iz>
 80062d0:	4606      	mov	r6, r0
 80062d2:	f7fa f92f 	bl	8000534 <__aeabi_i2d>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	f7f9 ffdb 	bl	8000298 <__aeabi_dsub>
 80062e2:	3630      	adds	r6, #48	; 0x30
 80062e4:	f805 6b01 	strb.w	r6, [r5], #1
 80062e8:	4652      	mov	r2, sl
 80062ea:	465b      	mov	r3, fp
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	f7fa fbfc 	bl	8000aec <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d163      	bne.n	80063c0 <_dtoa_r+0x608>
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	4936      	ldr	r1, [pc, #216]	; (80063d8 <_dtoa_r+0x620>)
 80062fe:	2000      	movs	r0, #0
 8006300:	f7f9 ffca 	bl	8000298 <__aeabi_dsub>
 8006304:	4652      	mov	r2, sl
 8006306:	465b      	mov	r3, fp
 8006308:	f7fa fbf0 	bl	8000aec <__aeabi_dcmplt>
 800630c:	2800      	cmp	r0, #0
 800630e:	f040 80b5 	bne.w	800647c <_dtoa_r+0x6c4>
 8006312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006314:	429d      	cmp	r5, r3
 8006316:	d081      	beq.n	800621c <_dtoa_r+0x464>
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <_dtoa_r+0x624>)
 800631a:	2200      	movs	r2, #0
 800631c:	4650      	mov	r0, sl
 800631e:	4659      	mov	r1, fp
 8006320:	f7fa f972 	bl	8000608 <__aeabi_dmul>
 8006324:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <_dtoa_r+0x624>)
 8006326:	4682      	mov	sl, r0
 8006328:	468b      	mov	fp, r1
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	2200      	movs	r2, #0
 8006330:	f7fa f96a 	bl	8000608 <__aeabi_dmul>
 8006334:	4680      	mov	r8, r0
 8006336:	4689      	mov	r9, r1
 8006338:	e7c6      	b.n	80062c8 <_dtoa_r+0x510>
 800633a:	4650      	mov	r0, sl
 800633c:	4659      	mov	r1, fp
 800633e:	f7fa f963 	bl	8000608 <__aeabi_dmul>
 8006342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006344:	9d01      	ldr	r5, [sp, #4]
 8006346:	930f      	str	r3, [sp, #60]	; 0x3c
 8006348:	4682      	mov	sl, r0
 800634a:	468b      	mov	fp, r1
 800634c:	4649      	mov	r1, r9
 800634e:	4640      	mov	r0, r8
 8006350:	f7fa fc0a 	bl	8000b68 <__aeabi_d2iz>
 8006354:	4606      	mov	r6, r0
 8006356:	f7fa f8ed 	bl	8000534 <__aeabi_i2d>
 800635a:	3630      	adds	r6, #48	; 0x30
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	f7f9 ff98 	bl	8000298 <__aeabi_dsub>
 8006368:	f805 6b01 	strb.w	r6, [r5], #1
 800636c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800636e:	429d      	cmp	r5, r3
 8006370:	4680      	mov	r8, r0
 8006372:	4689      	mov	r9, r1
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	d124      	bne.n	80063c4 <_dtoa_r+0x60c>
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <_dtoa_r+0x630>)
 800637c:	4650      	mov	r0, sl
 800637e:	4659      	mov	r1, fp
 8006380:	f7f9 ff8c 	bl	800029c <__adddf3>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7fa fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d173      	bne.n	800647c <_dtoa_r+0x6c4>
 8006394:	4652      	mov	r2, sl
 8006396:	465b      	mov	r3, fp
 8006398:	4913      	ldr	r1, [pc, #76]	; (80063e8 <_dtoa_r+0x630>)
 800639a:	2000      	movs	r0, #0
 800639c:	f7f9 ff7c 	bl	8000298 <__aeabi_dsub>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fba0 	bl	8000aec <__aeabi_dcmplt>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f43f af35 	beq.w	800621c <_dtoa_r+0x464>
 80063b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063b4:	1e6b      	subs	r3, r5, #1
 80063b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063bc:	2b30      	cmp	r3, #48	; 0x30
 80063be:	d0f8      	beq.n	80063b2 <_dtoa_r+0x5fa>
 80063c0:	9700      	str	r7, [sp, #0]
 80063c2:	e049      	b.n	8006458 <_dtoa_r+0x6a0>
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <_dtoa_r+0x624>)
 80063c6:	f7fa f91f 	bl	8000608 <__aeabi_dmul>
 80063ca:	4680      	mov	r8, r0
 80063cc:	4689      	mov	r9, r1
 80063ce:	e7bd      	b.n	800634c <_dtoa_r+0x594>
 80063d0:	08008300 	.word	0x08008300
 80063d4:	080082d8 	.word	0x080082d8
 80063d8:	3ff00000 	.word	0x3ff00000
 80063dc:	40240000 	.word	0x40240000
 80063e0:	401c0000 	.word	0x401c0000
 80063e4:	40140000 	.word	0x40140000
 80063e8:	3fe00000 	.word	0x3fe00000
 80063ec:	9d01      	ldr	r5, [sp, #4]
 80063ee:	4656      	mov	r6, sl
 80063f0:	465f      	mov	r7, fp
 80063f2:	4642      	mov	r2, r8
 80063f4:	464b      	mov	r3, r9
 80063f6:	4630      	mov	r0, r6
 80063f8:	4639      	mov	r1, r7
 80063fa:	f7fa fa2f 	bl	800085c <__aeabi_ddiv>
 80063fe:	f7fa fbb3 	bl	8000b68 <__aeabi_d2iz>
 8006402:	4682      	mov	sl, r0
 8006404:	f7fa f896 	bl	8000534 <__aeabi_i2d>
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800641c:	f7f9 ff3c 	bl	8000298 <__aeabi_dsub>
 8006420:	f805 6b01 	strb.w	r6, [r5], #1
 8006424:	9e01      	ldr	r6, [sp, #4]
 8006426:	9f03      	ldr	r7, [sp, #12]
 8006428:	1bae      	subs	r6, r5, r6
 800642a:	42b7      	cmp	r7, r6
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	d135      	bne.n	800649e <_dtoa_r+0x6e6>
 8006432:	f7f9 ff33 	bl	800029c <__adddf3>
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f7fa fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8006442:	b9d0      	cbnz	r0, 800647a <_dtoa_r+0x6c2>
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	4630      	mov	r0, r6
 800644a:	4639      	mov	r1, r7
 800644c:	f7fa fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006450:	b110      	cbz	r0, 8006458 <_dtoa_r+0x6a0>
 8006452:	f01a 0f01 	tst.w	sl, #1
 8006456:	d110      	bne.n	800647a <_dtoa_r+0x6c2>
 8006458:	4620      	mov	r0, r4
 800645a:	ee18 1a10 	vmov	r1, s16
 800645e:	f000 faf3 	bl	8006a48 <_Bfree>
 8006462:	2300      	movs	r3, #0
 8006464:	9800      	ldr	r0, [sp, #0]
 8006466:	702b      	strb	r3, [r5, #0]
 8006468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800646a:	3001      	adds	r0, #1
 800646c:	6018      	str	r0, [r3, #0]
 800646e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006470:	2b00      	cmp	r3, #0
 8006472:	f43f acf1 	beq.w	8005e58 <_dtoa_r+0xa0>
 8006476:	601d      	str	r5, [r3, #0]
 8006478:	e4ee      	b.n	8005e58 <_dtoa_r+0xa0>
 800647a:	9f00      	ldr	r7, [sp, #0]
 800647c:	462b      	mov	r3, r5
 800647e:	461d      	mov	r5, r3
 8006480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006484:	2a39      	cmp	r2, #57	; 0x39
 8006486:	d106      	bne.n	8006496 <_dtoa_r+0x6de>
 8006488:	9a01      	ldr	r2, [sp, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d1f7      	bne.n	800647e <_dtoa_r+0x6c6>
 800648e:	9901      	ldr	r1, [sp, #4]
 8006490:	2230      	movs	r2, #48	; 0x30
 8006492:	3701      	adds	r7, #1
 8006494:	700a      	strb	r2, [r1, #0]
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	3201      	adds	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	e790      	b.n	80063c0 <_dtoa_r+0x608>
 800649e:	4ba6      	ldr	r3, [pc, #664]	; (8006738 <_dtoa_r+0x980>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	f7fa f8b1 	bl	8000608 <__aeabi_dmul>
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4606      	mov	r6, r0
 80064ac:	460f      	mov	r7, r1
 80064ae:	f7fa fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d09d      	beq.n	80063f2 <_dtoa_r+0x63a>
 80064b6:	e7cf      	b.n	8006458 <_dtoa_r+0x6a0>
 80064b8:	9a08      	ldr	r2, [sp, #32]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	f000 80d7 	beq.w	800666e <_dtoa_r+0x8b6>
 80064c0:	9a06      	ldr	r2, [sp, #24]
 80064c2:	2a01      	cmp	r2, #1
 80064c4:	f300 80ba 	bgt.w	800663c <_dtoa_r+0x884>
 80064c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f000 80b2 	beq.w	8006634 <_dtoa_r+0x87c>
 80064d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064d4:	9e07      	ldr	r6, [sp, #28]
 80064d6:	9d04      	ldr	r5, [sp, #16]
 80064d8:	9a04      	ldr	r2, [sp, #16]
 80064da:	441a      	add	r2, r3
 80064dc:	9204      	str	r2, [sp, #16]
 80064de:	9a05      	ldr	r2, [sp, #20]
 80064e0:	2101      	movs	r1, #1
 80064e2:	441a      	add	r2, r3
 80064e4:	4620      	mov	r0, r4
 80064e6:	9205      	str	r2, [sp, #20]
 80064e8:	f000 fb66 	bl	8006bb8 <__i2b>
 80064ec:	4607      	mov	r7, r0
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	dd0c      	ble.n	800650c <_dtoa_r+0x754>
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dd09      	ble.n	800650c <_dtoa_r+0x754>
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	bfa8      	it	ge
 80064fe:	462b      	movge	r3, r5
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	9204      	str	r2, [sp, #16]
 8006504:	9a05      	ldr	r2, [sp, #20]
 8006506:	1aed      	subs	r5, r5, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	b31b      	cbz	r3, 8006558 <_dtoa_r+0x7a0>
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80af 	beq.w	8006676 <_dtoa_r+0x8be>
 8006518:	2e00      	cmp	r6, #0
 800651a:	dd13      	ble.n	8006544 <_dtoa_r+0x78c>
 800651c:	4639      	mov	r1, r7
 800651e:	4632      	mov	r2, r6
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fc09 	bl	8006d38 <__pow5mult>
 8006526:	ee18 2a10 	vmov	r2, s16
 800652a:	4601      	mov	r1, r0
 800652c:	4607      	mov	r7, r0
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fb58 	bl	8006be4 <__multiply>
 8006534:	ee18 1a10 	vmov	r1, s16
 8006538:	4680      	mov	r8, r0
 800653a:	4620      	mov	r0, r4
 800653c:	f000 fa84 	bl	8006a48 <_Bfree>
 8006540:	ee08 8a10 	vmov	s16, r8
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	1b9a      	subs	r2, r3, r6
 8006548:	d006      	beq.n	8006558 <_dtoa_r+0x7a0>
 800654a:	ee18 1a10 	vmov	r1, s16
 800654e:	4620      	mov	r0, r4
 8006550:	f000 fbf2 	bl	8006d38 <__pow5mult>
 8006554:	ee08 0a10 	vmov	s16, r0
 8006558:	2101      	movs	r1, #1
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fb2c 	bl	8006bb8 <__i2b>
 8006560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	4606      	mov	r6, r0
 8006566:	f340 8088 	ble.w	800667a <_dtoa_r+0x8c2>
 800656a:	461a      	mov	r2, r3
 800656c:	4601      	mov	r1, r0
 800656e:	4620      	mov	r0, r4
 8006570:	f000 fbe2 	bl	8006d38 <__pow5mult>
 8006574:	9b06      	ldr	r3, [sp, #24]
 8006576:	2b01      	cmp	r3, #1
 8006578:	4606      	mov	r6, r0
 800657a:	f340 8081 	ble.w	8006680 <_dtoa_r+0x8c8>
 800657e:	f04f 0800 	mov.w	r8, #0
 8006582:	6933      	ldr	r3, [r6, #16]
 8006584:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006588:	6918      	ldr	r0, [r3, #16]
 800658a:	f000 fac5 	bl	8006b18 <__hi0bits>
 800658e:	f1c0 0020 	rsb	r0, r0, #32
 8006592:	9b05      	ldr	r3, [sp, #20]
 8006594:	4418      	add	r0, r3
 8006596:	f010 001f 	ands.w	r0, r0, #31
 800659a:	f000 8092 	beq.w	80066c2 <_dtoa_r+0x90a>
 800659e:	f1c0 0320 	rsb	r3, r0, #32
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	f340 808a 	ble.w	80066bc <_dtoa_r+0x904>
 80065a8:	f1c0 001c 	rsb	r0, r0, #28
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	4403      	add	r3, r0
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	4403      	add	r3, r0
 80065b6:	4405      	add	r5, r0
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd07      	ble.n	80065d0 <_dtoa_r+0x818>
 80065c0:	ee18 1a10 	vmov	r1, s16
 80065c4:	461a      	mov	r2, r3
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fc10 	bl	8006dec <__lshift>
 80065cc:	ee08 0a10 	vmov	s16, r0
 80065d0:	9b05      	ldr	r3, [sp, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	dd05      	ble.n	80065e2 <_dtoa_r+0x82a>
 80065d6:	4631      	mov	r1, r6
 80065d8:	461a      	mov	r2, r3
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fc06 	bl	8006dec <__lshift>
 80065e0:	4606      	mov	r6, r0
 80065e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d06e      	beq.n	80066c6 <_dtoa_r+0x90e>
 80065e8:	ee18 0a10 	vmov	r0, s16
 80065ec:	4631      	mov	r1, r6
 80065ee:	f000 fc6d 	bl	8006ecc <__mcmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	da67      	bge.n	80066c6 <_dtoa_r+0x90e>
 80065f6:	9b00      	ldr	r3, [sp, #0]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	220a      	movs	r2, #10
 8006602:	2300      	movs	r3, #0
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fa41 	bl	8006a8c <__multadd>
 800660a:	9b08      	ldr	r3, [sp, #32]
 800660c:	ee08 0a10 	vmov	s16, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 81b1 	beq.w	8006978 <_dtoa_r+0xbc0>
 8006616:	2300      	movs	r3, #0
 8006618:	4639      	mov	r1, r7
 800661a:	220a      	movs	r2, #10
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fa35 	bl	8006a8c <__multadd>
 8006622:	9b02      	ldr	r3, [sp, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	4607      	mov	r7, r0
 8006628:	f300 808e 	bgt.w	8006748 <_dtoa_r+0x990>
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	2b02      	cmp	r3, #2
 8006630:	dc51      	bgt.n	80066d6 <_dtoa_r+0x91e>
 8006632:	e089      	b.n	8006748 <_dtoa_r+0x990>
 8006634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800663a:	e74b      	b.n	80064d4 <_dtoa_r+0x71c>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	1e5e      	subs	r6, r3, #1
 8006640:	9b07      	ldr	r3, [sp, #28]
 8006642:	42b3      	cmp	r3, r6
 8006644:	bfbf      	itttt	lt
 8006646:	9b07      	ldrlt	r3, [sp, #28]
 8006648:	9607      	strlt	r6, [sp, #28]
 800664a:	1af2      	sublt	r2, r6, r3
 800664c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800664e:	bfb6      	itet	lt
 8006650:	189b      	addlt	r3, r3, r2
 8006652:	1b9e      	subge	r6, r3, r6
 8006654:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	bfb8      	it	lt
 800665a:	2600      	movlt	r6, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	bfb7      	itett	lt
 8006660:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006664:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006668:	1a9d      	sublt	r5, r3, r2
 800666a:	2300      	movlt	r3, #0
 800666c:	e734      	b.n	80064d8 <_dtoa_r+0x720>
 800666e:	9e07      	ldr	r6, [sp, #28]
 8006670:	9d04      	ldr	r5, [sp, #16]
 8006672:	9f08      	ldr	r7, [sp, #32]
 8006674:	e73b      	b.n	80064ee <_dtoa_r+0x736>
 8006676:	9a07      	ldr	r2, [sp, #28]
 8006678:	e767      	b.n	800654a <_dtoa_r+0x792>
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	dc18      	bgt.n	80066b2 <_dtoa_r+0x8fa>
 8006680:	f1ba 0f00 	cmp.w	sl, #0
 8006684:	d115      	bne.n	80066b2 <_dtoa_r+0x8fa>
 8006686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800668a:	b993      	cbnz	r3, 80066b2 <_dtoa_r+0x8fa>
 800668c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006690:	0d1b      	lsrs	r3, r3, #20
 8006692:	051b      	lsls	r3, r3, #20
 8006694:	b183      	cbz	r3, 80066b8 <_dtoa_r+0x900>
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	3301      	adds	r3, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	3301      	adds	r3, #1
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	f04f 0801 	mov.w	r8, #1
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f47f af6a 	bne.w	8006582 <_dtoa_r+0x7ca>
 80066ae:	2001      	movs	r0, #1
 80066b0:	e76f      	b.n	8006592 <_dtoa_r+0x7da>
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	e7f6      	b.n	80066a6 <_dtoa_r+0x8ee>
 80066b8:	4698      	mov	r8, r3
 80066ba:	e7f4      	b.n	80066a6 <_dtoa_r+0x8ee>
 80066bc:	f43f af7d 	beq.w	80065ba <_dtoa_r+0x802>
 80066c0:	4618      	mov	r0, r3
 80066c2:	301c      	adds	r0, #28
 80066c4:	e772      	b.n	80065ac <_dtoa_r+0x7f4>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc37      	bgt.n	800673c <_dtoa_r+0x984>
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	dd34      	ble.n	800673c <_dtoa_r+0x984>
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	9302      	str	r3, [sp, #8]
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	b96b      	cbnz	r3, 80066f6 <_dtoa_r+0x93e>
 80066da:	4631      	mov	r1, r6
 80066dc:	2205      	movs	r2, #5
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f9d4 	bl	8006a8c <__multadd>
 80066e4:	4601      	mov	r1, r0
 80066e6:	4606      	mov	r6, r0
 80066e8:	ee18 0a10 	vmov	r0, s16
 80066ec:	f000 fbee 	bl	8006ecc <__mcmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f73f adbb 	bgt.w	800626c <_dtoa_r+0x4b4>
 80066f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f8:	9d01      	ldr	r5, [sp, #4]
 80066fa:	43db      	mvns	r3, r3
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	f04f 0800 	mov.w	r8, #0
 8006702:	4631      	mov	r1, r6
 8006704:	4620      	mov	r0, r4
 8006706:	f000 f99f 	bl	8006a48 <_Bfree>
 800670a:	2f00      	cmp	r7, #0
 800670c:	f43f aea4 	beq.w	8006458 <_dtoa_r+0x6a0>
 8006710:	f1b8 0f00 	cmp.w	r8, #0
 8006714:	d005      	beq.n	8006722 <_dtoa_r+0x96a>
 8006716:	45b8      	cmp	r8, r7
 8006718:	d003      	beq.n	8006722 <_dtoa_r+0x96a>
 800671a:	4641      	mov	r1, r8
 800671c:	4620      	mov	r0, r4
 800671e:	f000 f993 	bl	8006a48 <_Bfree>
 8006722:	4639      	mov	r1, r7
 8006724:	4620      	mov	r0, r4
 8006726:	f000 f98f 	bl	8006a48 <_Bfree>
 800672a:	e695      	b.n	8006458 <_dtoa_r+0x6a0>
 800672c:	2600      	movs	r6, #0
 800672e:	4637      	mov	r7, r6
 8006730:	e7e1      	b.n	80066f6 <_dtoa_r+0x93e>
 8006732:	9700      	str	r7, [sp, #0]
 8006734:	4637      	mov	r7, r6
 8006736:	e599      	b.n	800626c <_dtoa_r+0x4b4>
 8006738:	40240000 	.word	0x40240000
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80ca 	beq.w	80068d8 <_dtoa_r+0xb20>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	2d00      	cmp	r5, #0
 800674a:	dd05      	ble.n	8006758 <_dtoa_r+0x9a0>
 800674c:	4639      	mov	r1, r7
 800674e:	462a      	mov	r2, r5
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fb4b 	bl	8006dec <__lshift>
 8006756:	4607      	mov	r7, r0
 8006758:	f1b8 0f00 	cmp.w	r8, #0
 800675c:	d05b      	beq.n	8006816 <_dtoa_r+0xa5e>
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4620      	mov	r0, r4
 8006762:	f000 f931 	bl	80069c8 <_Balloc>
 8006766:	4605      	mov	r5, r0
 8006768:	b928      	cbnz	r0, 8006776 <_dtoa_r+0x9be>
 800676a:	4b87      	ldr	r3, [pc, #540]	; (8006988 <_dtoa_r+0xbd0>)
 800676c:	4602      	mov	r2, r0
 800676e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006772:	f7ff bb3b 	b.w	8005dec <_dtoa_r+0x34>
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	3202      	adds	r2, #2
 800677a:	0092      	lsls	r2, r2, #2
 800677c:	f107 010c 	add.w	r1, r7, #12
 8006780:	300c      	adds	r0, #12
 8006782:	f000 f913 	bl	80069ac <memcpy>
 8006786:	2201      	movs	r2, #1
 8006788:	4629      	mov	r1, r5
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fb2e 	bl	8006dec <__lshift>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	f103 0901 	add.w	r9, r3, #1
 8006796:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800679a:	4413      	add	r3, r2
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	f00a 0301 	and.w	r3, sl, #1
 80067a2:	46b8      	mov	r8, r7
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	4607      	mov	r7, r0
 80067a8:	4631      	mov	r1, r6
 80067aa:	ee18 0a10 	vmov	r0, s16
 80067ae:	f7ff fa75 	bl	8005c9c <quorem>
 80067b2:	4641      	mov	r1, r8
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067ba:	ee18 0a10 	vmov	r0, s16
 80067be:	f000 fb85 	bl	8006ecc <__mcmp>
 80067c2:	463a      	mov	r2, r7
 80067c4:	9003      	str	r0, [sp, #12]
 80067c6:	4631      	mov	r1, r6
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fb9b 	bl	8006f04 <__mdiff>
 80067ce:	68c2      	ldr	r2, [r0, #12]
 80067d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80067d4:	4605      	mov	r5, r0
 80067d6:	bb02      	cbnz	r2, 800681a <_dtoa_r+0xa62>
 80067d8:	4601      	mov	r1, r0
 80067da:	ee18 0a10 	vmov	r0, s16
 80067de:	f000 fb75 	bl	8006ecc <__mcmp>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4629      	mov	r1, r5
 80067e6:	4620      	mov	r0, r4
 80067e8:	9207      	str	r2, [sp, #28]
 80067ea:	f000 f92d 	bl	8006a48 <_Bfree>
 80067ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067f2:	ea43 0102 	orr.w	r1, r3, r2
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	464d      	mov	r5, r9
 80067fc:	d10f      	bne.n	800681e <_dtoa_r+0xa66>
 80067fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006802:	d02a      	beq.n	800685a <_dtoa_r+0xaa2>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	dd02      	ble.n	8006810 <_dtoa_r+0xa58>
 800680a:	9b02      	ldr	r3, [sp, #8]
 800680c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006810:	f88b a000 	strb.w	sl, [fp]
 8006814:	e775      	b.n	8006702 <_dtoa_r+0x94a>
 8006816:	4638      	mov	r0, r7
 8006818:	e7ba      	b.n	8006790 <_dtoa_r+0x9d8>
 800681a:	2201      	movs	r2, #1
 800681c:	e7e2      	b.n	80067e4 <_dtoa_r+0xa2c>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	db04      	blt.n	800682e <_dtoa_r+0xa76>
 8006824:	9906      	ldr	r1, [sp, #24]
 8006826:	430b      	orrs	r3, r1
 8006828:	9904      	ldr	r1, [sp, #16]
 800682a:	430b      	orrs	r3, r1
 800682c:	d122      	bne.n	8006874 <_dtoa_r+0xabc>
 800682e:	2a00      	cmp	r2, #0
 8006830:	ddee      	ble.n	8006810 <_dtoa_r+0xa58>
 8006832:	ee18 1a10 	vmov	r1, s16
 8006836:	2201      	movs	r2, #1
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fad7 	bl	8006dec <__lshift>
 800683e:	4631      	mov	r1, r6
 8006840:	ee08 0a10 	vmov	s16, r0
 8006844:	f000 fb42 	bl	8006ecc <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	dc03      	bgt.n	8006854 <_dtoa_r+0xa9c>
 800684c:	d1e0      	bne.n	8006810 <_dtoa_r+0xa58>
 800684e:	f01a 0f01 	tst.w	sl, #1
 8006852:	d0dd      	beq.n	8006810 <_dtoa_r+0xa58>
 8006854:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006858:	d1d7      	bne.n	800680a <_dtoa_r+0xa52>
 800685a:	2339      	movs	r3, #57	; 0x39
 800685c:	f88b 3000 	strb.w	r3, [fp]
 8006860:	462b      	mov	r3, r5
 8006862:	461d      	mov	r5, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800686a:	2a39      	cmp	r2, #57	; 0x39
 800686c:	d071      	beq.n	8006952 <_dtoa_r+0xb9a>
 800686e:	3201      	adds	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e746      	b.n	8006702 <_dtoa_r+0x94a>
 8006874:	2a00      	cmp	r2, #0
 8006876:	dd07      	ble.n	8006888 <_dtoa_r+0xad0>
 8006878:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800687c:	d0ed      	beq.n	800685a <_dtoa_r+0xaa2>
 800687e:	f10a 0301 	add.w	r3, sl, #1
 8006882:	f88b 3000 	strb.w	r3, [fp]
 8006886:	e73c      	b.n	8006702 <_dtoa_r+0x94a>
 8006888:	9b05      	ldr	r3, [sp, #20]
 800688a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800688e:	4599      	cmp	r9, r3
 8006890:	d047      	beq.n	8006922 <_dtoa_r+0xb6a>
 8006892:	ee18 1a10 	vmov	r1, s16
 8006896:	2300      	movs	r3, #0
 8006898:	220a      	movs	r2, #10
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f8f6 	bl	8006a8c <__multadd>
 80068a0:	45b8      	cmp	r8, r7
 80068a2:	ee08 0a10 	vmov	s16, r0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	f04f 020a 	mov.w	r2, #10
 80068ae:	4641      	mov	r1, r8
 80068b0:	4620      	mov	r0, r4
 80068b2:	d106      	bne.n	80068c2 <_dtoa_r+0xb0a>
 80068b4:	f000 f8ea 	bl	8006a8c <__multadd>
 80068b8:	4680      	mov	r8, r0
 80068ba:	4607      	mov	r7, r0
 80068bc:	f109 0901 	add.w	r9, r9, #1
 80068c0:	e772      	b.n	80067a8 <_dtoa_r+0x9f0>
 80068c2:	f000 f8e3 	bl	8006a8c <__multadd>
 80068c6:	4639      	mov	r1, r7
 80068c8:	4680      	mov	r8, r0
 80068ca:	2300      	movs	r3, #0
 80068cc:	220a      	movs	r2, #10
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 f8dc 	bl	8006a8c <__multadd>
 80068d4:	4607      	mov	r7, r0
 80068d6:	e7f1      	b.n	80068bc <_dtoa_r+0xb04>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	9d01      	ldr	r5, [sp, #4]
 80068de:	ee18 0a10 	vmov	r0, s16
 80068e2:	4631      	mov	r1, r6
 80068e4:	f7ff f9da 	bl	8005c9c <quorem>
 80068e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	f805 ab01 	strb.w	sl, [r5], #1
 80068f2:	1aea      	subs	r2, r5, r3
 80068f4:	9b02      	ldr	r3, [sp, #8]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	dd09      	ble.n	800690e <_dtoa_r+0xb56>
 80068fa:	ee18 1a10 	vmov	r1, s16
 80068fe:	2300      	movs	r3, #0
 8006900:	220a      	movs	r2, #10
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f8c2 	bl	8006a8c <__multadd>
 8006908:	ee08 0a10 	vmov	s16, r0
 800690c:	e7e7      	b.n	80068de <_dtoa_r+0xb26>
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	bfc8      	it	gt
 8006914:	461d      	movgt	r5, r3
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	bfd8      	it	le
 800691a:	2501      	movle	r5, #1
 800691c:	441d      	add	r5, r3
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	ee18 1a10 	vmov	r1, s16
 8006926:	2201      	movs	r2, #1
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fa5f 	bl	8006dec <__lshift>
 800692e:	4631      	mov	r1, r6
 8006930:	ee08 0a10 	vmov	s16, r0
 8006934:	f000 faca 	bl	8006ecc <__mcmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	dc91      	bgt.n	8006860 <_dtoa_r+0xaa8>
 800693c:	d102      	bne.n	8006944 <_dtoa_r+0xb8c>
 800693e:	f01a 0f01 	tst.w	sl, #1
 8006942:	d18d      	bne.n	8006860 <_dtoa_r+0xaa8>
 8006944:	462b      	mov	r3, r5
 8006946:	461d      	mov	r5, r3
 8006948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800694c:	2a30      	cmp	r2, #48	; 0x30
 800694e:	d0fa      	beq.n	8006946 <_dtoa_r+0xb8e>
 8006950:	e6d7      	b.n	8006702 <_dtoa_r+0x94a>
 8006952:	9a01      	ldr	r2, [sp, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d184      	bne.n	8006862 <_dtoa_r+0xaaa>
 8006958:	9b00      	ldr	r3, [sp, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2331      	movs	r3, #49	; 0x31
 8006960:	7013      	strb	r3, [r2, #0]
 8006962:	e6ce      	b.n	8006702 <_dtoa_r+0x94a>
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <_dtoa_r+0xbd4>)
 8006966:	f7ff ba95 	b.w	8005e94 <_dtoa_r+0xdc>
 800696a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800696c:	2b00      	cmp	r3, #0
 800696e:	f47f aa6e 	bne.w	8005e4e <_dtoa_r+0x96>
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <_dtoa_r+0xbd8>)
 8006974:	f7ff ba8e 	b.w	8005e94 <_dtoa_r+0xdc>
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dcae      	bgt.n	80068dc <_dtoa_r+0xb24>
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	2b02      	cmp	r3, #2
 8006982:	f73f aea8 	bgt.w	80066d6 <_dtoa_r+0x91e>
 8006986:	e7a9      	b.n	80068dc <_dtoa_r+0xb24>
 8006988:	0800826b 	.word	0x0800826b
 800698c:	080081c8 	.word	0x080081c8
 8006990:	080081ec 	.word	0x080081ec

08006994 <_localeconv_r>:
 8006994:	4800      	ldr	r0, [pc, #0]	; (8006998 <_localeconv_r+0x4>)
 8006996:	4770      	bx	lr
 8006998:	200001b8 	.word	0x200001b8

0800699c <malloc>:
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <malloc+0xc>)
 800699e:	4601      	mov	r1, r0
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	f000 bc17 	b.w	80071d4 <_malloc_r>
 80069a6:	bf00      	nop
 80069a8:	20000064 	.word	0x20000064

080069ac <memcpy>:
 80069ac:	440a      	add	r2, r1
 80069ae:	4291      	cmp	r1, r2
 80069b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80069b4:	d100      	bne.n	80069b8 <memcpy+0xc>
 80069b6:	4770      	bx	lr
 80069b8:	b510      	push	{r4, lr}
 80069ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c2:	4291      	cmp	r1, r2
 80069c4:	d1f9      	bne.n	80069ba <memcpy+0xe>
 80069c6:	bd10      	pop	{r4, pc}

080069c8 <_Balloc>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	b976      	cbnz	r6, 80069f0 <_Balloc+0x28>
 80069d2:	2010      	movs	r0, #16
 80069d4:	f7ff ffe2 	bl	800699c <malloc>
 80069d8:	4602      	mov	r2, r0
 80069da:	6260      	str	r0, [r4, #36]	; 0x24
 80069dc:	b920      	cbnz	r0, 80069e8 <_Balloc+0x20>
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <_Balloc+0x78>)
 80069e0:	4818      	ldr	r0, [pc, #96]	; (8006a44 <_Balloc+0x7c>)
 80069e2:	2166      	movs	r1, #102	; 0x66
 80069e4:	f000 fdd6 	bl	8007594 <__assert_func>
 80069e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069ec:	6006      	str	r6, [r0, #0]
 80069ee:	60c6      	str	r6, [r0, #12]
 80069f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069f2:	68f3      	ldr	r3, [r6, #12]
 80069f4:	b183      	cbz	r3, 8006a18 <_Balloc+0x50>
 80069f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069fe:	b9b8      	cbnz	r0, 8006a30 <_Balloc+0x68>
 8006a00:	2101      	movs	r1, #1
 8006a02:	fa01 f605 	lsl.w	r6, r1, r5
 8006a06:	1d72      	adds	r2, r6, #5
 8006a08:	0092      	lsls	r2, r2, #2
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fb60 	bl	80070d0 <_calloc_r>
 8006a10:	b160      	cbz	r0, 8006a2c <_Balloc+0x64>
 8006a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a16:	e00e      	b.n	8006a36 <_Balloc+0x6e>
 8006a18:	2221      	movs	r2, #33	; 0x21
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fb57 	bl	80070d0 <_calloc_r>
 8006a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a24:	60f0      	str	r0, [r6, #12]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e4      	bne.n	80069f6 <_Balloc+0x2e>
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	6802      	ldr	r2, [r0, #0]
 8006a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a36:	2300      	movs	r3, #0
 8006a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a3c:	e7f7      	b.n	8006a2e <_Balloc+0x66>
 8006a3e:	bf00      	nop
 8006a40:	080081f9 	.word	0x080081f9
 8006a44:	0800827c 	.word	0x0800827c

08006a48 <_Bfree>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	b976      	cbnz	r6, 8006a70 <_Bfree+0x28>
 8006a52:	2010      	movs	r0, #16
 8006a54:	f7ff ffa2 	bl	800699c <malloc>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6268      	str	r0, [r5, #36]	; 0x24
 8006a5c:	b920      	cbnz	r0, 8006a68 <_Bfree+0x20>
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <_Bfree+0x3c>)
 8006a60:	4809      	ldr	r0, [pc, #36]	; (8006a88 <_Bfree+0x40>)
 8006a62:	218a      	movs	r1, #138	; 0x8a
 8006a64:	f000 fd96 	bl	8007594 <__assert_func>
 8006a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a6c:	6006      	str	r6, [r0, #0]
 8006a6e:	60c6      	str	r6, [r0, #12]
 8006a70:	b13c      	cbz	r4, 8006a82 <_Bfree+0x3a>
 8006a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a74:	6862      	ldr	r2, [r4, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a7c:	6021      	str	r1, [r4, #0]
 8006a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	080081f9 	.word	0x080081f9
 8006a88:	0800827c 	.word	0x0800827c

08006a8c <__multadd>:
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a90:	690d      	ldr	r5, [r1, #16]
 8006a92:	4607      	mov	r7, r0
 8006a94:	460c      	mov	r4, r1
 8006a96:	461e      	mov	r6, r3
 8006a98:	f101 0c14 	add.w	ip, r1, #20
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006aa2:	b299      	uxth	r1, r3
 8006aa4:	fb02 6101 	mla	r1, r2, r1, r6
 8006aa8:	0c1e      	lsrs	r6, r3, #16
 8006aaa:	0c0b      	lsrs	r3, r1, #16
 8006aac:	fb02 3306 	mla	r3, r2, r6, r3
 8006ab0:	b289      	uxth	r1, r1
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ab8:	4285      	cmp	r5, r0
 8006aba:	f84c 1b04 	str.w	r1, [ip], #4
 8006abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ac2:	dcec      	bgt.n	8006a9e <__multadd+0x12>
 8006ac4:	b30e      	cbz	r6, 8006b0a <__multadd+0x7e>
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dc19      	bgt.n	8006b00 <__multadd+0x74>
 8006acc:	6861      	ldr	r1, [r4, #4]
 8006ace:	4638      	mov	r0, r7
 8006ad0:	3101      	adds	r1, #1
 8006ad2:	f7ff ff79 	bl	80069c8 <_Balloc>
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	b928      	cbnz	r0, 8006ae6 <__multadd+0x5a>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <__multadd+0x84>)
 8006ade:	480d      	ldr	r0, [pc, #52]	; (8006b14 <__multadd+0x88>)
 8006ae0:	21b5      	movs	r1, #181	; 0xb5
 8006ae2:	f000 fd57 	bl	8007594 <__assert_func>
 8006ae6:	6922      	ldr	r2, [r4, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	f104 010c 	add.w	r1, r4, #12
 8006aee:	0092      	lsls	r2, r2, #2
 8006af0:	300c      	adds	r0, #12
 8006af2:	f7ff ff5b 	bl	80069ac <memcpy>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7ff ffa5 	bl	8006a48 <_Bfree>
 8006afe:	4644      	mov	r4, r8
 8006b00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b04:	3501      	adds	r5, #1
 8006b06:	615e      	str	r6, [r3, #20]
 8006b08:	6125      	str	r5, [r4, #16]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	0800826b 	.word	0x0800826b
 8006b14:	0800827c 	.word	0x0800827c

08006b18 <__hi0bits>:
 8006b18:	0c03      	lsrs	r3, r0, #16
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	b9d3      	cbnz	r3, 8006b54 <__hi0bits+0x3c>
 8006b1e:	0400      	lsls	r0, r0, #16
 8006b20:	2310      	movs	r3, #16
 8006b22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b26:	bf04      	itt	eq
 8006b28:	0200      	lsleq	r0, r0, #8
 8006b2a:	3308      	addeq	r3, #8
 8006b2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b30:	bf04      	itt	eq
 8006b32:	0100      	lsleq	r0, r0, #4
 8006b34:	3304      	addeq	r3, #4
 8006b36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b3a:	bf04      	itt	eq
 8006b3c:	0080      	lsleq	r0, r0, #2
 8006b3e:	3302      	addeq	r3, #2
 8006b40:	2800      	cmp	r0, #0
 8006b42:	db05      	blt.n	8006b50 <__hi0bits+0x38>
 8006b44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b48:	f103 0301 	add.w	r3, r3, #1
 8006b4c:	bf08      	it	eq
 8006b4e:	2320      	moveq	r3, #32
 8006b50:	4618      	mov	r0, r3
 8006b52:	4770      	bx	lr
 8006b54:	2300      	movs	r3, #0
 8006b56:	e7e4      	b.n	8006b22 <__hi0bits+0xa>

08006b58 <__lo0bits>:
 8006b58:	6803      	ldr	r3, [r0, #0]
 8006b5a:	f013 0207 	ands.w	r2, r3, #7
 8006b5e:	4601      	mov	r1, r0
 8006b60:	d00b      	beq.n	8006b7a <__lo0bits+0x22>
 8006b62:	07da      	lsls	r2, r3, #31
 8006b64:	d423      	bmi.n	8006bae <__lo0bits+0x56>
 8006b66:	0798      	lsls	r0, r3, #30
 8006b68:	bf49      	itett	mi
 8006b6a:	085b      	lsrmi	r3, r3, #1
 8006b6c:	089b      	lsrpl	r3, r3, #2
 8006b6e:	2001      	movmi	r0, #1
 8006b70:	600b      	strmi	r3, [r1, #0]
 8006b72:	bf5c      	itt	pl
 8006b74:	600b      	strpl	r3, [r1, #0]
 8006b76:	2002      	movpl	r0, #2
 8006b78:	4770      	bx	lr
 8006b7a:	b298      	uxth	r0, r3
 8006b7c:	b9a8      	cbnz	r0, 8006baa <__lo0bits+0x52>
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	2010      	movs	r0, #16
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	b90a      	cbnz	r2, 8006b8a <__lo0bits+0x32>
 8006b86:	3008      	adds	r0, #8
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	071a      	lsls	r2, r3, #28
 8006b8c:	bf04      	itt	eq
 8006b8e:	091b      	lsreq	r3, r3, #4
 8006b90:	3004      	addeq	r0, #4
 8006b92:	079a      	lsls	r2, r3, #30
 8006b94:	bf04      	itt	eq
 8006b96:	089b      	lsreq	r3, r3, #2
 8006b98:	3002      	addeq	r0, #2
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d403      	bmi.n	8006ba6 <__lo0bits+0x4e>
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	f100 0001 	add.w	r0, r0, #1
 8006ba4:	d005      	beq.n	8006bb2 <__lo0bits+0x5a>
 8006ba6:	600b      	str	r3, [r1, #0]
 8006ba8:	4770      	bx	lr
 8006baa:	4610      	mov	r0, r2
 8006bac:	e7e9      	b.n	8006b82 <__lo0bits+0x2a>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	4770      	bx	lr
 8006bb2:	2020      	movs	r0, #32
 8006bb4:	4770      	bx	lr
	...

08006bb8 <__i2b>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7ff ff03 	bl	80069c8 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__i2b+0x1a>
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <__i2b+0x24>)
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <__i2b+0x28>)
 8006bca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bce:	f000 fce1 	bl	8007594 <__assert_func>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6144      	str	r4, [r0, #20]
 8006bd6:	6103      	str	r3, [r0, #16]
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	0800826b 	.word	0x0800826b
 8006be0:	0800827c 	.word	0x0800827c

08006be4 <__multiply>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4691      	mov	r9, r2
 8006bea:	690a      	ldr	r2, [r1, #16]
 8006bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfb8      	it	lt
 8006bf4:	460b      	movlt	r3, r1
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	bfbc      	itt	lt
 8006bfa:	464c      	movlt	r4, r9
 8006bfc:	4699      	movlt	r9, r3
 8006bfe:	6927      	ldr	r7, [r4, #16]
 8006c00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c04:	68a3      	ldr	r3, [r4, #8]
 8006c06:	6861      	ldr	r1, [r4, #4]
 8006c08:	eb07 060a 	add.w	r6, r7, sl
 8006c0c:	42b3      	cmp	r3, r6
 8006c0e:	b085      	sub	sp, #20
 8006c10:	bfb8      	it	lt
 8006c12:	3101      	addlt	r1, #1
 8006c14:	f7ff fed8 	bl	80069c8 <_Balloc>
 8006c18:	b930      	cbnz	r0, 8006c28 <__multiply+0x44>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4b44      	ldr	r3, [pc, #272]	; (8006d30 <__multiply+0x14c>)
 8006c1e:	4845      	ldr	r0, [pc, #276]	; (8006d34 <__multiply+0x150>)
 8006c20:	f240 115d 	movw	r1, #349	; 0x15d
 8006c24:	f000 fcb6 	bl	8007594 <__assert_func>
 8006c28:	f100 0514 	add.w	r5, r0, #20
 8006c2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c30:	462b      	mov	r3, r5
 8006c32:	2200      	movs	r2, #0
 8006c34:	4543      	cmp	r3, r8
 8006c36:	d321      	bcc.n	8006c7c <__multiply+0x98>
 8006c38:	f104 0314 	add.w	r3, r4, #20
 8006c3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c40:	f109 0314 	add.w	r3, r9, #20
 8006c44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	1b3a      	subs	r2, r7, r4
 8006c4c:	3a15      	subs	r2, #21
 8006c4e:	f022 0203 	bic.w	r2, r2, #3
 8006c52:	3204      	adds	r2, #4
 8006c54:	f104 0115 	add.w	r1, r4, #21
 8006c58:	428f      	cmp	r7, r1
 8006c5a:	bf38      	it	cc
 8006c5c:	2204      	movcc	r2, #4
 8006c5e:	9201      	str	r2, [sp, #4]
 8006c60:	9a02      	ldr	r2, [sp, #8]
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d80c      	bhi.n	8006c82 <__multiply+0x9e>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	dd03      	ble.n	8006c74 <__multiply+0x90>
 8006c6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05a      	beq.n	8006d2a <__multiply+0x146>
 8006c74:	6106      	str	r6, [r0, #16]
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	f843 2b04 	str.w	r2, [r3], #4
 8006c80:	e7d8      	b.n	8006c34 <__multiply+0x50>
 8006c82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c86:	f1ba 0f00 	cmp.w	sl, #0
 8006c8a:	d024      	beq.n	8006cd6 <__multiply+0xf2>
 8006c8c:	f104 0e14 	add.w	lr, r4, #20
 8006c90:	46a9      	mov	r9, r5
 8006c92:	f04f 0c00 	mov.w	ip, #0
 8006c96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c9e:	fa1f fb82 	uxth.w	fp, r2
 8006ca2:	b289      	uxth	r1, r1
 8006ca4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ca8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cac:	f8d9 2000 	ldr.w	r2, [r9]
 8006cb0:	4461      	add	r1, ip
 8006cb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc4:	4577      	cmp	r7, lr
 8006cc6:	f849 1b04 	str.w	r1, [r9], #4
 8006cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cce:	d8e2      	bhi.n	8006c96 <__multiply+0xb2>
 8006cd0:	9a01      	ldr	r2, [sp, #4]
 8006cd2:	f845 c002 	str.w	ip, [r5, r2]
 8006cd6:	9a03      	ldr	r2, [sp, #12]
 8006cd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	f1b9 0f00 	cmp.w	r9, #0
 8006ce2:	d020      	beq.n	8006d26 <__multiply+0x142>
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	f104 0c14 	add.w	ip, r4, #20
 8006cea:	46ae      	mov	lr, r5
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cf8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cfc:	4492      	add	sl, r2
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d04:	f84e 1b04 	str.w	r1, [lr], #4
 8006d08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006d10:	0c12      	lsrs	r2, r2, #16
 8006d12:	fb09 1102 	mla	r1, r9, r2, r1
 8006d16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d1a:	4567      	cmp	r7, ip
 8006d1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d20:	d8e6      	bhi.n	8006cf0 <__multiply+0x10c>
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	50a9      	str	r1, [r5, r2]
 8006d26:	3504      	adds	r5, #4
 8006d28:	e79a      	b.n	8006c60 <__multiply+0x7c>
 8006d2a:	3e01      	subs	r6, #1
 8006d2c:	e79c      	b.n	8006c68 <__multiply+0x84>
 8006d2e:	bf00      	nop
 8006d30:	0800826b 	.word	0x0800826b
 8006d34:	0800827c 	.word	0x0800827c

08006d38 <__pow5mult>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	f012 0203 	ands.w	r2, r2, #3
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	d007      	beq.n	8006d58 <__pow5mult+0x20>
 8006d48:	4c25      	ldr	r4, [pc, #148]	; (8006de0 <__pow5mult+0xa8>)
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d52:	f7ff fe9b 	bl	8006a8c <__multadd>
 8006d56:	4607      	mov	r7, r0
 8006d58:	10ad      	asrs	r5, r5, #2
 8006d5a:	d03d      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006d5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d5e:	b97c      	cbnz	r4, 8006d80 <__pow5mult+0x48>
 8006d60:	2010      	movs	r0, #16
 8006d62:	f7ff fe1b 	bl	800699c <malloc>
 8006d66:	4602      	mov	r2, r0
 8006d68:	6270      	str	r0, [r6, #36]	; 0x24
 8006d6a:	b928      	cbnz	r0, 8006d78 <__pow5mult+0x40>
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <__pow5mult+0xac>)
 8006d6e:	481e      	ldr	r0, [pc, #120]	; (8006de8 <__pow5mult+0xb0>)
 8006d70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d74:	f000 fc0e 	bl	8007594 <__assert_func>
 8006d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d7c:	6004      	str	r4, [r0, #0]
 8006d7e:	60c4      	str	r4, [r0, #12]
 8006d80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d88:	b94c      	cbnz	r4, 8006d9e <__pow5mult+0x66>
 8006d8a:	f240 2171 	movw	r1, #625	; 0x271
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ff12 	bl	8006bb8 <__i2b>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	07eb      	lsls	r3, r5, #31
 8006da4:	d50a      	bpl.n	8006dbc <__pow5mult+0x84>
 8006da6:	4639      	mov	r1, r7
 8006da8:	4622      	mov	r2, r4
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff ff1a 	bl	8006be4 <__multiply>
 8006db0:	4639      	mov	r1, r7
 8006db2:	4680      	mov	r8, r0
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff fe47 	bl	8006a48 <_Bfree>
 8006dba:	4647      	mov	r7, r8
 8006dbc:	106d      	asrs	r5, r5, #1
 8006dbe:	d00b      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	b938      	cbnz	r0, 8006dd4 <__pow5mult+0x9c>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7ff ff0b 	bl	8006be4 <__multiply>
 8006dce:	6020      	str	r0, [r4, #0]
 8006dd0:	f8c0 9000 	str.w	r9, [r0]
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	e7e4      	b.n	8006da2 <__pow5mult+0x6a>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dde:	bf00      	nop
 8006de0:	080083c8 	.word	0x080083c8
 8006de4:	080081f9 	.word	0x080081f9
 8006de8:	0800827c 	.word	0x0800827c

08006dec <__lshift>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	4691      	mov	r9, r2
 8006e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e04:	f108 0601 	add.w	r6, r8, #1
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	db0b      	blt.n	8006e24 <__lshift+0x38>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff fddb 	bl	80069c8 <_Balloc>
 8006e12:	4605      	mov	r5, r0
 8006e14:	b948      	cbnz	r0, 8006e2a <__lshift+0x3e>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <__lshift+0xd8>)
 8006e1a:	482b      	ldr	r0, [pc, #172]	; (8006ec8 <__lshift+0xdc>)
 8006e1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e20:	f000 fbb8 	bl	8007594 <__assert_func>
 8006e24:	3101      	adds	r1, #1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	e7ee      	b.n	8006e08 <__lshift+0x1c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f100 0114 	add.w	r1, r0, #20
 8006e30:	f100 0210 	add.w	r2, r0, #16
 8006e34:	4618      	mov	r0, r3
 8006e36:	4553      	cmp	r3, sl
 8006e38:	db37      	blt.n	8006eaa <__lshift+0xbe>
 8006e3a:	6920      	ldr	r0, [r4, #16]
 8006e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e40:	f104 0314 	add.w	r3, r4, #20
 8006e44:	f019 091f 	ands.w	r9, r9, #31
 8006e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e50:	d02f      	beq.n	8006eb2 <__lshift+0xc6>
 8006e52:	f1c9 0e20 	rsb	lr, r9, #32
 8006e56:	468a      	mov	sl, r1
 8006e58:	f04f 0c00 	mov.w	ip, #0
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e62:	ea42 020c 	orr.w	r2, r2, ip
 8006e66:	f84a 2b04 	str.w	r2, [sl], #4
 8006e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e74:	d8f2      	bhi.n	8006e5c <__lshift+0x70>
 8006e76:	1b03      	subs	r3, r0, r4
 8006e78:	3b15      	subs	r3, #21
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	3304      	adds	r3, #4
 8006e80:	f104 0215 	add.w	r2, r4, #21
 8006e84:	4290      	cmp	r0, r2
 8006e86:	bf38      	it	cc
 8006e88:	2304      	movcc	r3, #4
 8006e8a:	f841 c003 	str.w	ip, [r1, r3]
 8006e8e:	f1bc 0f00 	cmp.w	ip, #0
 8006e92:	d001      	beq.n	8006e98 <__lshift+0xac>
 8006e94:	f108 0602 	add.w	r6, r8, #2
 8006e98:	3e01      	subs	r6, #1
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	612e      	str	r6, [r5, #16]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f7ff fdd2 	bl	8006a48 <_Bfree>
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eae:	3301      	adds	r3, #1
 8006eb0:	e7c1      	b.n	8006e36 <__lshift+0x4a>
 8006eb2:	3904      	subs	r1, #4
 8006eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ebc:	4298      	cmp	r0, r3
 8006ebe:	d8f9      	bhi.n	8006eb4 <__lshift+0xc8>
 8006ec0:	e7ea      	b.n	8006e98 <__lshift+0xac>
 8006ec2:	bf00      	nop
 8006ec4:	0800826b 	.word	0x0800826b
 8006ec8:	0800827c 	.word	0x0800827c

08006ecc <__mcmp>:
 8006ecc:	b530      	push	{r4, r5, lr}
 8006ece:	6902      	ldr	r2, [r0, #16]
 8006ed0:	690c      	ldr	r4, [r1, #16]
 8006ed2:	1b12      	subs	r2, r2, r4
 8006ed4:	d10e      	bne.n	8006ef4 <__mcmp+0x28>
 8006ed6:	f100 0314 	add.w	r3, r0, #20
 8006eda:	3114      	adds	r1, #20
 8006edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006eec:	42a5      	cmp	r5, r4
 8006eee:	d003      	beq.n	8006ef8 <__mcmp+0x2c>
 8006ef0:	d305      	bcc.n	8006efe <__mcmp+0x32>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	bd30      	pop	{r4, r5, pc}
 8006ef8:	4283      	cmp	r3, r0
 8006efa:	d3f3      	bcc.n	8006ee4 <__mcmp+0x18>
 8006efc:	e7fa      	b.n	8006ef4 <__mcmp+0x28>
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e7f7      	b.n	8006ef4 <__mcmp+0x28>

08006f04 <__mdiff>:
 8006f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	460c      	mov	r4, r1
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4690      	mov	r8, r2
 8006f12:	f7ff ffdb 	bl	8006ecc <__mcmp>
 8006f16:	1e05      	subs	r5, r0, #0
 8006f18:	d110      	bne.n	8006f3c <__mdiff+0x38>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff fd53 	bl	80069c8 <_Balloc>
 8006f22:	b930      	cbnz	r0, 8006f32 <__mdiff+0x2e>
 8006f24:	4b3a      	ldr	r3, [pc, #232]	; (8007010 <__mdiff+0x10c>)
 8006f26:	4602      	mov	r2, r0
 8006f28:	f240 2132 	movw	r1, #562	; 0x232
 8006f2c:	4839      	ldr	r0, [pc, #228]	; (8007014 <__mdiff+0x110>)
 8006f2e:	f000 fb31 	bl	8007594 <__assert_func>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	bfa4      	itt	ge
 8006f3e:	4643      	movge	r3, r8
 8006f40:	46a0      	movge	r8, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f48:	bfa6      	itte	ge
 8006f4a:	461c      	movge	r4, r3
 8006f4c:	2500      	movge	r5, #0
 8006f4e:	2501      	movlt	r5, #1
 8006f50:	f7ff fd3a 	bl	80069c8 <_Balloc>
 8006f54:	b920      	cbnz	r0, 8006f60 <__mdiff+0x5c>
 8006f56:	4b2e      	ldr	r3, [pc, #184]	; (8007010 <__mdiff+0x10c>)
 8006f58:	4602      	mov	r2, r0
 8006f5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f5e:	e7e5      	b.n	8006f2c <__mdiff+0x28>
 8006f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f64:	6926      	ldr	r6, [r4, #16]
 8006f66:	60c5      	str	r5, [r0, #12]
 8006f68:	f104 0914 	add.w	r9, r4, #20
 8006f6c:	f108 0514 	add.w	r5, r8, #20
 8006f70:	f100 0e14 	add.w	lr, r0, #20
 8006f74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f7c:	f108 0210 	add.w	r2, r8, #16
 8006f80:	46f2      	mov	sl, lr
 8006f82:	2100      	movs	r1, #0
 8006f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f8c:	fa1f f883 	uxth.w	r8, r3
 8006f90:	fa11 f18b 	uxtah	r1, r1, fp
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	eba1 0808 	sub.w	r8, r1, r8
 8006f9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fa2:	fa1f f888 	uxth.w	r8, r8
 8006fa6:	1419      	asrs	r1, r3, #16
 8006fa8:	454e      	cmp	r6, r9
 8006faa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fae:	f84a 3b04 	str.w	r3, [sl], #4
 8006fb2:	d8e7      	bhi.n	8006f84 <__mdiff+0x80>
 8006fb4:	1b33      	subs	r3, r6, r4
 8006fb6:	3b15      	subs	r3, #21
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	3415      	adds	r4, #21
 8006fc0:	42a6      	cmp	r6, r4
 8006fc2:	bf38      	it	cc
 8006fc4:	2304      	movcc	r3, #4
 8006fc6:	441d      	add	r5, r3
 8006fc8:	4473      	add	r3, lr
 8006fca:	469e      	mov	lr, r3
 8006fcc:	462e      	mov	r6, r5
 8006fce:	4566      	cmp	r6, ip
 8006fd0:	d30e      	bcc.n	8006ff0 <__mdiff+0xec>
 8006fd2:	f10c 0203 	add.w	r2, ip, #3
 8006fd6:	1b52      	subs	r2, r2, r5
 8006fd8:	f022 0203 	bic.w	r2, r2, #3
 8006fdc:	3d03      	subs	r5, #3
 8006fde:	45ac      	cmp	ip, r5
 8006fe0:	bf38      	it	cc
 8006fe2:	2200      	movcc	r2, #0
 8006fe4:	441a      	add	r2, r3
 8006fe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fea:	b17b      	cbz	r3, 800700c <__mdiff+0x108>
 8006fec:	6107      	str	r7, [r0, #16]
 8006fee:	e7a3      	b.n	8006f38 <__mdiff+0x34>
 8006ff0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ff4:	fa11 f288 	uxtah	r2, r1, r8
 8006ff8:	1414      	asrs	r4, r2, #16
 8006ffa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ffe:	b292      	uxth	r2, r2
 8007000:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007004:	f84e 2b04 	str.w	r2, [lr], #4
 8007008:	1421      	asrs	r1, r4, #16
 800700a:	e7e0      	b.n	8006fce <__mdiff+0xca>
 800700c:	3f01      	subs	r7, #1
 800700e:	e7ea      	b.n	8006fe6 <__mdiff+0xe2>
 8007010:	0800826b 	.word	0x0800826b
 8007014:	0800827c 	.word	0x0800827c

08007018 <__d2b>:
 8007018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800701c:	4689      	mov	r9, r1
 800701e:	2101      	movs	r1, #1
 8007020:	ec57 6b10 	vmov	r6, r7, d0
 8007024:	4690      	mov	r8, r2
 8007026:	f7ff fccf 	bl	80069c8 <_Balloc>
 800702a:	4604      	mov	r4, r0
 800702c:	b930      	cbnz	r0, 800703c <__d2b+0x24>
 800702e:	4602      	mov	r2, r0
 8007030:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <__d2b+0xb0>)
 8007032:	4826      	ldr	r0, [pc, #152]	; (80070cc <__d2b+0xb4>)
 8007034:	f240 310a 	movw	r1, #778	; 0x30a
 8007038:	f000 faac 	bl	8007594 <__assert_func>
 800703c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007044:	bb35      	cbnz	r5, 8007094 <__d2b+0x7c>
 8007046:	2e00      	cmp	r6, #0
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	d028      	beq.n	800709e <__d2b+0x86>
 800704c:	4668      	mov	r0, sp
 800704e:	9600      	str	r6, [sp, #0]
 8007050:	f7ff fd82 	bl	8006b58 <__lo0bits>
 8007054:	9900      	ldr	r1, [sp, #0]
 8007056:	b300      	cbz	r0, 800709a <__d2b+0x82>
 8007058:	9a01      	ldr	r2, [sp, #4]
 800705a:	f1c0 0320 	rsb	r3, r0, #32
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	430b      	orrs	r3, r1
 8007064:	40c2      	lsrs	r2, r0
 8007066:	6163      	str	r3, [r4, #20]
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	61a3      	str	r3, [r4, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf14      	ite	ne
 8007072:	2202      	movne	r2, #2
 8007074:	2201      	moveq	r2, #1
 8007076:	6122      	str	r2, [r4, #16]
 8007078:	b1d5      	cbz	r5, 80070b0 <__d2b+0x98>
 800707a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800707e:	4405      	add	r5, r0
 8007080:	f8c9 5000 	str.w	r5, [r9]
 8007084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007088:	f8c8 0000 	str.w	r0, [r8]
 800708c:	4620      	mov	r0, r4
 800708e:	b003      	add	sp, #12
 8007090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007098:	e7d5      	b.n	8007046 <__d2b+0x2e>
 800709a:	6161      	str	r1, [r4, #20]
 800709c:	e7e5      	b.n	800706a <__d2b+0x52>
 800709e:	a801      	add	r0, sp, #4
 80070a0:	f7ff fd5a 	bl	8006b58 <__lo0bits>
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	6163      	str	r3, [r4, #20]
 80070a8:	2201      	movs	r2, #1
 80070aa:	6122      	str	r2, [r4, #16]
 80070ac:	3020      	adds	r0, #32
 80070ae:	e7e3      	b.n	8007078 <__d2b+0x60>
 80070b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070b8:	f8c9 0000 	str.w	r0, [r9]
 80070bc:	6918      	ldr	r0, [r3, #16]
 80070be:	f7ff fd2b 	bl	8006b18 <__hi0bits>
 80070c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070c6:	e7df      	b.n	8007088 <__d2b+0x70>
 80070c8:	0800826b 	.word	0x0800826b
 80070cc:	0800827c 	.word	0x0800827c

080070d0 <_calloc_r>:
 80070d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070d2:	fba1 2402 	umull	r2, r4, r1, r2
 80070d6:	b94c      	cbnz	r4, 80070ec <_calloc_r+0x1c>
 80070d8:	4611      	mov	r1, r2
 80070da:	9201      	str	r2, [sp, #4]
 80070dc:	f000 f87a 	bl	80071d4 <_malloc_r>
 80070e0:	9a01      	ldr	r2, [sp, #4]
 80070e2:	4605      	mov	r5, r0
 80070e4:	b930      	cbnz	r0, 80070f4 <_calloc_r+0x24>
 80070e6:	4628      	mov	r0, r5
 80070e8:	b003      	add	sp, #12
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	220c      	movs	r2, #12
 80070ee:	6002      	str	r2, [r0, #0]
 80070f0:	2500      	movs	r5, #0
 80070f2:	e7f8      	b.n	80070e6 <_calloc_r+0x16>
 80070f4:	4621      	mov	r1, r4
 80070f6:	f7fe f93f 	bl	8005378 <memset>
 80070fa:	e7f4      	b.n	80070e6 <_calloc_r+0x16>

080070fc <_free_r>:
 80070fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070fe:	2900      	cmp	r1, #0
 8007100:	d044      	beq.n	800718c <_free_r+0x90>
 8007102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007106:	9001      	str	r0, [sp, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f1a1 0404 	sub.w	r4, r1, #4
 800710e:	bfb8      	it	lt
 8007110:	18e4      	addlt	r4, r4, r3
 8007112:	f000 fa9b 	bl	800764c <__malloc_lock>
 8007116:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <_free_r+0x94>)
 8007118:	9801      	ldr	r0, [sp, #4]
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	b933      	cbnz	r3, 800712c <_free_r+0x30>
 800711e:	6063      	str	r3, [r4, #4]
 8007120:	6014      	str	r4, [r2, #0]
 8007122:	b003      	add	sp, #12
 8007124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007128:	f000 ba96 	b.w	8007658 <__malloc_unlock>
 800712c:	42a3      	cmp	r3, r4
 800712e:	d908      	bls.n	8007142 <_free_r+0x46>
 8007130:	6825      	ldr	r5, [r4, #0]
 8007132:	1961      	adds	r1, r4, r5
 8007134:	428b      	cmp	r3, r1
 8007136:	bf01      	itttt	eq
 8007138:	6819      	ldreq	r1, [r3, #0]
 800713a:	685b      	ldreq	r3, [r3, #4]
 800713c:	1949      	addeq	r1, r1, r5
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	e7ed      	b.n	800711e <_free_r+0x22>
 8007142:	461a      	mov	r2, r3
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b10b      	cbz	r3, 800714c <_free_r+0x50>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d9fa      	bls.n	8007142 <_free_r+0x46>
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	1855      	adds	r5, r2, r1
 8007150:	42a5      	cmp	r5, r4
 8007152:	d10b      	bne.n	800716c <_free_r+0x70>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	4421      	add	r1, r4
 8007158:	1854      	adds	r4, r2, r1
 800715a:	42a3      	cmp	r3, r4
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	d1e0      	bne.n	8007122 <_free_r+0x26>
 8007160:	681c      	ldr	r4, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6053      	str	r3, [r2, #4]
 8007166:	4421      	add	r1, r4
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	e7da      	b.n	8007122 <_free_r+0x26>
 800716c:	d902      	bls.n	8007174 <_free_r+0x78>
 800716e:	230c      	movs	r3, #12
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	e7d6      	b.n	8007122 <_free_r+0x26>
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1961      	adds	r1, r4, r5
 8007178:	428b      	cmp	r3, r1
 800717a:	bf04      	itt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	bf04      	itt	eq
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	6054      	str	r4, [r2, #4]
 800718a:	e7ca      	b.n	8007122 <_free_r+0x26>
 800718c:	b003      	add	sp, #12
 800718e:	bd30      	pop	{r4, r5, pc}
 8007190:	200003a8 	.word	0x200003a8

08007194 <sbrk_aligned>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4e0e      	ldr	r6, [pc, #56]	; (80071d0 <sbrk_aligned+0x3c>)
 8007198:	460c      	mov	r4, r1
 800719a:	6831      	ldr	r1, [r6, #0]
 800719c:	4605      	mov	r5, r0
 800719e:	b911      	cbnz	r1, 80071a6 <sbrk_aligned+0x12>
 80071a0:	f000 f9e8 	bl	8007574 <_sbrk_r>
 80071a4:	6030      	str	r0, [r6, #0]
 80071a6:	4621      	mov	r1, r4
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 f9e3 	bl	8007574 <_sbrk_r>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d00a      	beq.n	80071c8 <sbrk_aligned+0x34>
 80071b2:	1cc4      	adds	r4, r0, #3
 80071b4:	f024 0403 	bic.w	r4, r4, #3
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d007      	beq.n	80071cc <sbrk_aligned+0x38>
 80071bc:	1a21      	subs	r1, r4, r0
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f9d8 	bl	8007574 <_sbrk_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	d101      	bne.n	80071cc <sbrk_aligned+0x38>
 80071c8:	f04f 34ff 	mov.w	r4, #4294967295
 80071cc:	4620      	mov	r0, r4
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	200003ac 	.word	0x200003ac

080071d4 <_malloc_r>:
 80071d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	1ccd      	adds	r5, r1, #3
 80071da:	f025 0503 	bic.w	r5, r5, #3
 80071de:	3508      	adds	r5, #8
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	bf38      	it	cc
 80071e4:	250c      	movcc	r5, #12
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	4607      	mov	r7, r0
 80071ea:	db01      	blt.n	80071f0 <_malloc_r+0x1c>
 80071ec:	42a9      	cmp	r1, r5
 80071ee:	d905      	bls.n	80071fc <_malloc_r+0x28>
 80071f0:	230c      	movs	r3, #12
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	2600      	movs	r6, #0
 80071f6:	4630      	mov	r0, r6
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fc:	4e2e      	ldr	r6, [pc, #184]	; (80072b8 <_malloc_r+0xe4>)
 80071fe:	f000 fa25 	bl	800764c <__malloc_lock>
 8007202:	6833      	ldr	r3, [r6, #0]
 8007204:	461c      	mov	r4, r3
 8007206:	bb34      	cbnz	r4, 8007256 <_malloc_r+0x82>
 8007208:	4629      	mov	r1, r5
 800720a:	4638      	mov	r0, r7
 800720c:	f7ff ffc2 	bl	8007194 <sbrk_aligned>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	4604      	mov	r4, r0
 8007214:	d14d      	bne.n	80072b2 <_malloc_r+0xde>
 8007216:	6834      	ldr	r4, [r6, #0]
 8007218:	4626      	mov	r6, r4
 800721a:	2e00      	cmp	r6, #0
 800721c:	d140      	bne.n	80072a0 <_malloc_r+0xcc>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4631      	mov	r1, r6
 8007222:	4638      	mov	r0, r7
 8007224:	eb04 0803 	add.w	r8, r4, r3
 8007228:	f000 f9a4 	bl	8007574 <_sbrk_r>
 800722c:	4580      	cmp	r8, r0
 800722e:	d13a      	bne.n	80072a6 <_malloc_r+0xd2>
 8007230:	6821      	ldr	r1, [r4, #0]
 8007232:	3503      	adds	r5, #3
 8007234:	1a6d      	subs	r5, r5, r1
 8007236:	f025 0503 	bic.w	r5, r5, #3
 800723a:	3508      	adds	r5, #8
 800723c:	2d0c      	cmp	r5, #12
 800723e:	bf38      	it	cc
 8007240:	250c      	movcc	r5, #12
 8007242:	4629      	mov	r1, r5
 8007244:	4638      	mov	r0, r7
 8007246:	f7ff ffa5 	bl	8007194 <sbrk_aligned>
 800724a:	3001      	adds	r0, #1
 800724c:	d02b      	beq.n	80072a6 <_malloc_r+0xd2>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	442b      	add	r3, r5
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	e00e      	b.n	8007274 <_malloc_r+0xa0>
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	1b52      	subs	r2, r2, r5
 800725a:	d41e      	bmi.n	800729a <_malloc_r+0xc6>
 800725c:	2a0b      	cmp	r2, #11
 800725e:	d916      	bls.n	800728e <_malloc_r+0xba>
 8007260:	1961      	adds	r1, r4, r5
 8007262:	42a3      	cmp	r3, r4
 8007264:	6025      	str	r5, [r4, #0]
 8007266:	bf18      	it	ne
 8007268:	6059      	strne	r1, [r3, #4]
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	bf08      	it	eq
 800726e:	6031      	streq	r1, [r6, #0]
 8007270:	5162      	str	r2, [r4, r5]
 8007272:	604b      	str	r3, [r1, #4]
 8007274:	4638      	mov	r0, r7
 8007276:	f104 060b 	add.w	r6, r4, #11
 800727a:	f000 f9ed 	bl	8007658 <__malloc_unlock>
 800727e:	f026 0607 	bic.w	r6, r6, #7
 8007282:	1d23      	adds	r3, r4, #4
 8007284:	1af2      	subs	r2, r6, r3
 8007286:	d0b6      	beq.n	80071f6 <_malloc_r+0x22>
 8007288:	1b9b      	subs	r3, r3, r6
 800728a:	50a3      	str	r3, [r4, r2]
 800728c:	e7b3      	b.n	80071f6 <_malloc_r+0x22>
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	42a3      	cmp	r3, r4
 8007292:	bf0c      	ite	eq
 8007294:	6032      	streq	r2, [r6, #0]
 8007296:	605a      	strne	r2, [r3, #4]
 8007298:	e7ec      	b.n	8007274 <_malloc_r+0xa0>
 800729a:	4623      	mov	r3, r4
 800729c:	6864      	ldr	r4, [r4, #4]
 800729e:	e7b2      	b.n	8007206 <_malloc_r+0x32>
 80072a0:	4634      	mov	r4, r6
 80072a2:	6876      	ldr	r6, [r6, #4]
 80072a4:	e7b9      	b.n	800721a <_malloc_r+0x46>
 80072a6:	230c      	movs	r3, #12
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	4638      	mov	r0, r7
 80072ac:	f000 f9d4 	bl	8007658 <__malloc_unlock>
 80072b0:	e7a1      	b.n	80071f6 <_malloc_r+0x22>
 80072b2:	6025      	str	r5, [r4, #0]
 80072b4:	e7de      	b.n	8007274 <_malloc_r+0xa0>
 80072b6:	bf00      	nop
 80072b8:	200003a8 	.word	0x200003a8

080072bc <__ssputs_r>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	688e      	ldr	r6, [r1, #8]
 80072c2:	429e      	cmp	r6, r3
 80072c4:	4682      	mov	sl, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	4690      	mov	r8, r2
 80072ca:	461f      	mov	r7, r3
 80072cc:	d838      	bhi.n	8007340 <__ssputs_r+0x84>
 80072ce:	898a      	ldrh	r2, [r1, #12]
 80072d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072d4:	d032      	beq.n	800733c <__ssputs_r+0x80>
 80072d6:	6825      	ldr	r5, [r4, #0]
 80072d8:	6909      	ldr	r1, [r1, #16]
 80072da:	eba5 0901 	sub.w	r9, r5, r1
 80072de:	6965      	ldr	r5, [r4, #20]
 80072e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e8:	3301      	adds	r3, #1
 80072ea:	444b      	add	r3, r9
 80072ec:	106d      	asrs	r5, r5, #1
 80072ee:	429d      	cmp	r5, r3
 80072f0:	bf38      	it	cc
 80072f2:	461d      	movcc	r5, r3
 80072f4:	0553      	lsls	r3, r2, #21
 80072f6:	d531      	bpl.n	800735c <__ssputs_r+0xa0>
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7ff ff6b 	bl	80071d4 <_malloc_r>
 80072fe:	4606      	mov	r6, r0
 8007300:	b950      	cbnz	r0, 8007318 <__ssputs_r+0x5c>
 8007302:	230c      	movs	r3, #12
 8007304:	f8ca 3000 	str.w	r3, [sl]
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	6921      	ldr	r1, [r4, #16]
 800731a:	464a      	mov	r2, r9
 800731c:	f7ff fb46 	bl	80069ac <memcpy>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	6126      	str	r6, [r4, #16]
 800732e:	6165      	str	r5, [r4, #20]
 8007330:	444e      	add	r6, r9
 8007332:	eba5 0509 	sub.w	r5, r5, r9
 8007336:	6026      	str	r6, [r4, #0]
 8007338:	60a5      	str	r5, [r4, #8]
 800733a:	463e      	mov	r6, r7
 800733c:	42be      	cmp	r6, r7
 800733e:	d900      	bls.n	8007342 <__ssputs_r+0x86>
 8007340:	463e      	mov	r6, r7
 8007342:	6820      	ldr	r0, [r4, #0]
 8007344:	4632      	mov	r2, r6
 8007346:	4641      	mov	r1, r8
 8007348:	f000 f966 	bl	8007618 <memmove>
 800734c:	68a3      	ldr	r3, [r4, #8]
 800734e:	1b9b      	subs	r3, r3, r6
 8007350:	60a3      	str	r3, [r4, #8]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	4433      	add	r3, r6
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	2000      	movs	r0, #0
 800735a:	e7db      	b.n	8007314 <__ssputs_r+0x58>
 800735c:	462a      	mov	r2, r5
 800735e:	f000 f981 	bl	8007664 <_realloc_r>
 8007362:	4606      	mov	r6, r0
 8007364:	2800      	cmp	r0, #0
 8007366:	d1e1      	bne.n	800732c <__ssputs_r+0x70>
 8007368:	6921      	ldr	r1, [r4, #16]
 800736a:	4650      	mov	r0, sl
 800736c:	f7ff fec6 	bl	80070fc <_free_r>
 8007370:	e7c7      	b.n	8007302 <__ssputs_r+0x46>
	...

08007374 <_svfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	4698      	mov	r8, r3
 800737a:	898b      	ldrh	r3, [r1, #12]
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	b09d      	sub	sp, #116	; 0x74
 8007380:	4607      	mov	r7, r0
 8007382:	460d      	mov	r5, r1
 8007384:	4614      	mov	r4, r2
 8007386:	d50e      	bpl.n	80073a6 <_svfiprintf_r+0x32>
 8007388:	690b      	ldr	r3, [r1, #16]
 800738a:	b963      	cbnz	r3, 80073a6 <_svfiprintf_r+0x32>
 800738c:	2140      	movs	r1, #64	; 0x40
 800738e:	f7ff ff21 	bl	80071d4 <_malloc_r>
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	6128      	str	r0, [r5, #16]
 8007396:	b920      	cbnz	r0, 80073a2 <_svfiprintf_r+0x2e>
 8007398:	230c      	movs	r3, #12
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	e0d1      	b.n	8007546 <_svfiprintf_r+0x1d2>
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	616b      	str	r3, [r5, #20]
 80073a6:	2300      	movs	r3, #0
 80073a8:	9309      	str	r3, [sp, #36]	; 0x24
 80073aa:	2320      	movs	r3, #32
 80073ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b4:	2330      	movs	r3, #48	; 0x30
 80073b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007560 <_svfiprintf_r+0x1ec>
 80073ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073be:	f04f 0901 	mov.w	r9, #1
 80073c2:	4623      	mov	r3, r4
 80073c4:	469a      	mov	sl, r3
 80073c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ca:	b10a      	cbz	r2, 80073d0 <_svfiprintf_r+0x5c>
 80073cc:	2a25      	cmp	r2, #37	; 0x25
 80073ce:	d1f9      	bne.n	80073c4 <_svfiprintf_r+0x50>
 80073d0:	ebba 0b04 	subs.w	fp, sl, r4
 80073d4:	d00b      	beq.n	80073ee <_svfiprintf_r+0x7a>
 80073d6:	465b      	mov	r3, fp
 80073d8:	4622      	mov	r2, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ff6d 	bl	80072bc <__ssputs_r>
 80073e2:	3001      	adds	r0, #1
 80073e4:	f000 80aa 	beq.w	800753c <_svfiprintf_r+0x1c8>
 80073e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ea:	445a      	add	r2, fp
 80073ec:	9209      	str	r2, [sp, #36]	; 0x24
 80073ee:	f89a 3000 	ldrb.w	r3, [sl]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80a2 	beq.w	800753c <_svfiprintf_r+0x1c8>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007402:	f10a 0a01 	add.w	sl, sl, #1
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	9307      	str	r3, [sp, #28]
 800740a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800740e:	931a      	str	r3, [sp, #104]	; 0x68
 8007410:	4654      	mov	r4, sl
 8007412:	2205      	movs	r2, #5
 8007414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007418:	4851      	ldr	r0, [pc, #324]	; (8007560 <_svfiprintf_r+0x1ec>)
 800741a:	f7f8 fee9 	bl	80001f0 <memchr>
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	b9d8      	cbnz	r0, 800745a <_svfiprintf_r+0xe6>
 8007422:	06d0      	lsls	r0, r2, #27
 8007424:	bf44      	itt	mi
 8007426:	2320      	movmi	r3, #32
 8007428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742c:	0711      	lsls	r1, r2, #28
 800742e:	bf44      	itt	mi
 8007430:	232b      	movmi	r3, #43	; 0x2b
 8007432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007436:	f89a 3000 	ldrb.w	r3, [sl]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d015      	beq.n	800746a <_svfiprintf_r+0xf6>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	4654      	mov	r4, sl
 8007442:	2000      	movs	r0, #0
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	4621      	mov	r1, r4
 800744a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744e:	3b30      	subs	r3, #48	; 0x30
 8007450:	2b09      	cmp	r3, #9
 8007452:	d94e      	bls.n	80074f2 <_svfiprintf_r+0x17e>
 8007454:	b1b0      	cbz	r0, 8007484 <_svfiprintf_r+0x110>
 8007456:	9207      	str	r2, [sp, #28]
 8007458:	e014      	b.n	8007484 <_svfiprintf_r+0x110>
 800745a:	eba0 0308 	sub.w	r3, r0, r8
 800745e:	fa09 f303 	lsl.w	r3, r9, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	46a2      	mov	sl, r4
 8007468:	e7d2      	b.n	8007410 <_svfiprintf_r+0x9c>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9103      	str	r1, [sp, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfbb      	ittet	lt
 8007476:	425b      	neglt	r3, r3
 8007478:	f042 0202 	orrlt.w	r2, r2, #2
 800747c:	9307      	strge	r3, [sp, #28]
 800747e:	9307      	strlt	r3, [sp, #28]
 8007480:	bfb8      	it	lt
 8007482:	9204      	strlt	r2, [sp, #16]
 8007484:	7823      	ldrb	r3, [r4, #0]
 8007486:	2b2e      	cmp	r3, #46	; 0x2e
 8007488:	d10c      	bne.n	80074a4 <_svfiprintf_r+0x130>
 800748a:	7863      	ldrb	r3, [r4, #1]
 800748c:	2b2a      	cmp	r3, #42	; 0x2a
 800748e:	d135      	bne.n	80074fc <_svfiprintf_r+0x188>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9203      	str	r2, [sp, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfb8      	it	lt
 800749c:	f04f 33ff 	movlt.w	r3, #4294967295
 80074a0:	3402      	adds	r4, #2
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007570 <_svfiprintf_r+0x1fc>
 80074a8:	7821      	ldrb	r1, [r4, #0]
 80074aa:	2203      	movs	r2, #3
 80074ac:	4650      	mov	r0, sl
 80074ae:	f7f8 fe9f 	bl	80001f0 <memchr>
 80074b2:	b140      	cbz	r0, 80074c6 <_svfiprintf_r+0x152>
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	eba0 000a 	sub.w	r0, r0, sl
 80074ba:	fa03 f000 	lsl.w	r0, r3, r0
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	4303      	orrs	r3, r0
 80074c2:	3401      	adds	r4, #1
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	4826      	ldr	r0, [pc, #152]	; (8007564 <_svfiprintf_r+0x1f0>)
 80074cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074d0:	2206      	movs	r2, #6
 80074d2:	f7f8 fe8d 	bl	80001f0 <memchr>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d038      	beq.n	800754c <_svfiprintf_r+0x1d8>
 80074da:	4b23      	ldr	r3, [pc, #140]	; (8007568 <_svfiprintf_r+0x1f4>)
 80074dc:	bb1b      	cbnz	r3, 8007526 <_svfiprintf_r+0x1b2>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	f023 0307 	bic.w	r3, r3, #7
 80074e6:	3308      	adds	r3, #8
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	4433      	add	r3, r6
 80074ee:	9309      	str	r3, [sp, #36]	; 0x24
 80074f0:	e767      	b.n	80073c2 <_svfiprintf_r+0x4e>
 80074f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f6:	460c      	mov	r4, r1
 80074f8:	2001      	movs	r0, #1
 80074fa:	e7a5      	b.n	8007448 <_svfiprintf_r+0xd4>
 80074fc:	2300      	movs	r3, #0
 80074fe:	3401      	adds	r4, #1
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	4619      	mov	r1, r3
 8007504:	f04f 0c0a 	mov.w	ip, #10
 8007508:	4620      	mov	r0, r4
 800750a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750e:	3a30      	subs	r2, #48	; 0x30
 8007510:	2a09      	cmp	r2, #9
 8007512:	d903      	bls.n	800751c <_svfiprintf_r+0x1a8>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0c5      	beq.n	80074a4 <_svfiprintf_r+0x130>
 8007518:	9105      	str	r1, [sp, #20]
 800751a:	e7c3      	b.n	80074a4 <_svfiprintf_r+0x130>
 800751c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007520:	4604      	mov	r4, r0
 8007522:	2301      	movs	r3, #1
 8007524:	e7f0      	b.n	8007508 <_svfiprintf_r+0x194>
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <_svfiprintf_r+0x1f8>)
 800752e:	a904      	add	r1, sp, #16
 8007530:	4638      	mov	r0, r7
 8007532:	f7fd ffc9 	bl	80054c8 <_printf_float>
 8007536:	1c42      	adds	r2, r0, #1
 8007538:	4606      	mov	r6, r0
 800753a:	d1d6      	bne.n	80074ea <_svfiprintf_r+0x176>
 800753c:	89ab      	ldrh	r3, [r5, #12]
 800753e:	065b      	lsls	r3, r3, #25
 8007540:	f53f af2c 	bmi.w	800739c <_svfiprintf_r+0x28>
 8007544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007546:	b01d      	add	sp, #116	; 0x74
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	462a      	mov	r2, r5
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <_svfiprintf_r+0x1f8>)
 8007554:	a904      	add	r1, sp, #16
 8007556:	4638      	mov	r0, r7
 8007558:	f7fe fa5a 	bl	8005a10 <_printf_i>
 800755c:	e7eb      	b.n	8007536 <_svfiprintf_r+0x1c2>
 800755e:	bf00      	nop
 8007560:	080083d4 	.word	0x080083d4
 8007564:	080083de 	.word	0x080083de
 8007568:	080054c9 	.word	0x080054c9
 800756c:	080072bd 	.word	0x080072bd
 8007570:	080083da 	.word	0x080083da

08007574 <_sbrk_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d06      	ldr	r5, [pc, #24]	; (8007590 <_sbrk_r+0x1c>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7fa fe1a 	bl	80021b8 <_sbrk>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_sbrk_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_sbrk_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	200003b0 	.word	0x200003b0

08007594 <__assert_func>:
 8007594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007596:	4614      	mov	r4, r2
 8007598:	461a      	mov	r2, r3
 800759a:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <__assert_func+0x2c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4605      	mov	r5, r0
 80075a0:	68d8      	ldr	r0, [r3, #12]
 80075a2:	b14c      	cbz	r4, 80075b8 <__assert_func+0x24>
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <__assert_func+0x30>)
 80075a6:	9100      	str	r1, [sp, #0]
 80075a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075ac:	4906      	ldr	r1, [pc, #24]	; (80075c8 <__assert_func+0x34>)
 80075ae:	462b      	mov	r3, r5
 80075b0:	f000 f80e 	bl	80075d0 <fiprintf>
 80075b4:	f000 faac 	bl	8007b10 <abort>
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <__assert_func+0x38>)
 80075ba:	461c      	mov	r4, r3
 80075bc:	e7f3      	b.n	80075a6 <__assert_func+0x12>
 80075be:	bf00      	nop
 80075c0:	20000064 	.word	0x20000064
 80075c4:	080083e5 	.word	0x080083e5
 80075c8:	080083f2 	.word	0x080083f2
 80075cc:	08008420 	.word	0x08008420

080075d0 <fiprintf>:
 80075d0:	b40e      	push	{r1, r2, r3}
 80075d2:	b503      	push	{r0, r1, lr}
 80075d4:	4601      	mov	r1, r0
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	4805      	ldr	r0, [pc, #20]	; (80075f0 <fiprintf+0x20>)
 80075da:	f853 2b04 	ldr.w	r2, [r3], #4
 80075de:	6800      	ldr	r0, [r0, #0]
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	f000 f897 	bl	8007714 <_vfiprintf_r>
 80075e6:	b002      	add	sp, #8
 80075e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ec:	b003      	add	sp, #12
 80075ee:	4770      	bx	lr
 80075f0:	20000064 	.word	0x20000064

080075f4 <__ascii_mbtowc>:
 80075f4:	b082      	sub	sp, #8
 80075f6:	b901      	cbnz	r1, 80075fa <__ascii_mbtowc+0x6>
 80075f8:	a901      	add	r1, sp, #4
 80075fa:	b142      	cbz	r2, 800760e <__ascii_mbtowc+0x1a>
 80075fc:	b14b      	cbz	r3, 8007612 <__ascii_mbtowc+0x1e>
 80075fe:	7813      	ldrb	r3, [r2, #0]
 8007600:	600b      	str	r3, [r1, #0]
 8007602:	7812      	ldrb	r2, [r2, #0]
 8007604:	1e10      	subs	r0, r2, #0
 8007606:	bf18      	it	ne
 8007608:	2001      	movne	r0, #1
 800760a:	b002      	add	sp, #8
 800760c:	4770      	bx	lr
 800760e:	4610      	mov	r0, r2
 8007610:	e7fb      	b.n	800760a <__ascii_mbtowc+0x16>
 8007612:	f06f 0001 	mvn.w	r0, #1
 8007616:	e7f8      	b.n	800760a <__ascii_mbtowc+0x16>

08007618 <memmove>:
 8007618:	4288      	cmp	r0, r1
 800761a:	b510      	push	{r4, lr}
 800761c:	eb01 0402 	add.w	r4, r1, r2
 8007620:	d902      	bls.n	8007628 <memmove+0x10>
 8007622:	4284      	cmp	r4, r0
 8007624:	4623      	mov	r3, r4
 8007626:	d807      	bhi.n	8007638 <memmove+0x20>
 8007628:	1e43      	subs	r3, r0, #1
 800762a:	42a1      	cmp	r1, r4
 800762c:	d008      	beq.n	8007640 <memmove+0x28>
 800762e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007636:	e7f8      	b.n	800762a <memmove+0x12>
 8007638:	4402      	add	r2, r0
 800763a:	4601      	mov	r1, r0
 800763c:	428a      	cmp	r2, r1
 800763e:	d100      	bne.n	8007642 <memmove+0x2a>
 8007640:	bd10      	pop	{r4, pc}
 8007642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800764a:	e7f7      	b.n	800763c <memmove+0x24>

0800764c <__malloc_lock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_lock+0x8>)
 800764e:	f000 bc1f 	b.w	8007e90 <__retarget_lock_acquire_recursive>
 8007652:	bf00      	nop
 8007654:	200003b4 	.word	0x200003b4

08007658 <__malloc_unlock>:
 8007658:	4801      	ldr	r0, [pc, #4]	; (8007660 <__malloc_unlock+0x8>)
 800765a:	f000 bc1a 	b.w	8007e92 <__retarget_lock_release_recursive>
 800765e:	bf00      	nop
 8007660:	200003b4 	.word	0x200003b4

08007664 <_realloc_r>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	4680      	mov	r8, r0
 800766a:	4614      	mov	r4, r2
 800766c:	460e      	mov	r6, r1
 800766e:	b921      	cbnz	r1, 800767a <_realloc_r+0x16>
 8007670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007674:	4611      	mov	r1, r2
 8007676:	f7ff bdad 	b.w	80071d4 <_malloc_r>
 800767a:	b92a      	cbnz	r2, 8007688 <_realloc_r+0x24>
 800767c:	f7ff fd3e 	bl	80070fc <_free_r>
 8007680:	4625      	mov	r5, r4
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	f000 fc6a 	bl	8007f60 <_malloc_usable_size_r>
 800768c:	4284      	cmp	r4, r0
 800768e:	4607      	mov	r7, r0
 8007690:	d802      	bhi.n	8007698 <_realloc_r+0x34>
 8007692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007696:	d812      	bhi.n	80076be <_realloc_r+0x5a>
 8007698:	4621      	mov	r1, r4
 800769a:	4640      	mov	r0, r8
 800769c:	f7ff fd9a 	bl	80071d4 <_malloc_r>
 80076a0:	4605      	mov	r5, r0
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d0ed      	beq.n	8007682 <_realloc_r+0x1e>
 80076a6:	42bc      	cmp	r4, r7
 80076a8:	4622      	mov	r2, r4
 80076aa:	4631      	mov	r1, r6
 80076ac:	bf28      	it	cs
 80076ae:	463a      	movcs	r2, r7
 80076b0:	f7ff f97c 	bl	80069ac <memcpy>
 80076b4:	4631      	mov	r1, r6
 80076b6:	4640      	mov	r0, r8
 80076b8:	f7ff fd20 	bl	80070fc <_free_r>
 80076bc:	e7e1      	b.n	8007682 <_realloc_r+0x1e>
 80076be:	4635      	mov	r5, r6
 80076c0:	e7df      	b.n	8007682 <_realloc_r+0x1e>

080076c2 <__sfputc_r>:
 80076c2:	6893      	ldr	r3, [r2, #8]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	b410      	push	{r4}
 80076ca:	6093      	str	r3, [r2, #8]
 80076cc:	da08      	bge.n	80076e0 <__sfputc_r+0x1e>
 80076ce:	6994      	ldr	r4, [r2, #24]
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	db01      	blt.n	80076d8 <__sfputc_r+0x16>
 80076d4:	290a      	cmp	r1, #10
 80076d6:	d103      	bne.n	80076e0 <__sfputc_r+0x1e>
 80076d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076dc:	f000 b94a 	b.w	8007974 <__swbuf_r>
 80076e0:	6813      	ldr	r3, [r2, #0]
 80076e2:	1c58      	adds	r0, r3, #1
 80076e4:	6010      	str	r0, [r2, #0]
 80076e6:	7019      	strb	r1, [r3, #0]
 80076e8:	4608      	mov	r0, r1
 80076ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <__sfputs_r>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	4614      	mov	r4, r2
 80076f8:	18d5      	adds	r5, r2, r3
 80076fa:	42ac      	cmp	r4, r5
 80076fc:	d101      	bne.n	8007702 <__sfputs_r+0x12>
 80076fe:	2000      	movs	r0, #0
 8007700:	e007      	b.n	8007712 <__sfputs_r+0x22>
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	463a      	mov	r2, r7
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff ffda 	bl	80076c2 <__sfputc_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d1f3      	bne.n	80076fa <__sfputs_r+0xa>
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007714 <_vfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	460d      	mov	r5, r1
 800771a:	b09d      	sub	sp, #116	; 0x74
 800771c:	4614      	mov	r4, r2
 800771e:	4698      	mov	r8, r3
 8007720:	4606      	mov	r6, r0
 8007722:	b118      	cbz	r0, 800772c <_vfiprintf_r+0x18>
 8007724:	6983      	ldr	r3, [r0, #24]
 8007726:	b90b      	cbnz	r3, 800772c <_vfiprintf_r+0x18>
 8007728:	f000 fb14 	bl	8007d54 <__sinit>
 800772c:	4b89      	ldr	r3, [pc, #548]	; (8007954 <_vfiprintf_r+0x240>)
 800772e:	429d      	cmp	r5, r3
 8007730:	d11b      	bne.n	800776a <_vfiprintf_r+0x56>
 8007732:	6875      	ldr	r5, [r6, #4]
 8007734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007736:	07d9      	lsls	r1, r3, #31
 8007738:	d405      	bmi.n	8007746 <_vfiprintf_r+0x32>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	059a      	lsls	r2, r3, #22
 800773e:	d402      	bmi.n	8007746 <_vfiprintf_r+0x32>
 8007740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007742:	f000 fba5 	bl	8007e90 <__retarget_lock_acquire_recursive>
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	071b      	lsls	r3, r3, #28
 800774a:	d501      	bpl.n	8007750 <_vfiprintf_r+0x3c>
 800774c:	692b      	ldr	r3, [r5, #16]
 800774e:	b9eb      	cbnz	r3, 800778c <_vfiprintf_r+0x78>
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f96e 	bl	8007a34 <__swsetup_r>
 8007758:	b1c0      	cbz	r0, 800778c <_vfiprintf_r+0x78>
 800775a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775c:	07dc      	lsls	r4, r3, #31
 800775e:	d50e      	bpl.n	800777e <_vfiprintf_r+0x6a>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	b01d      	add	sp, #116	; 0x74
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	4b7b      	ldr	r3, [pc, #492]	; (8007958 <_vfiprintf_r+0x244>)
 800776c:	429d      	cmp	r5, r3
 800776e:	d101      	bne.n	8007774 <_vfiprintf_r+0x60>
 8007770:	68b5      	ldr	r5, [r6, #8]
 8007772:	e7df      	b.n	8007734 <_vfiprintf_r+0x20>
 8007774:	4b79      	ldr	r3, [pc, #484]	; (800795c <_vfiprintf_r+0x248>)
 8007776:	429d      	cmp	r5, r3
 8007778:	bf08      	it	eq
 800777a:	68f5      	ldreq	r5, [r6, #12]
 800777c:	e7da      	b.n	8007734 <_vfiprintf_r+0x20>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	0598      	lsls	r0, r3, #22
 8007782:	d4ed      	bmi.n	8007760 <_vfiprintf_r+0x4c>
 8007784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007786:	f000 fb84 	bl	8007e92 <__retarget_lock_release_recursive>
 800778a:	e7e9      	b.n	8007760 <_vfiprintf_r+0x4c>
 800778c:	2300      	movs	r3, #0
 800778e:	9309      	str	r3, [sp, #36]	; 0x24
 8007790:	2320      	movs	r3, #32
 8007792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007796:	f8cd 800c 	str.w	r8, [sp, #12]
 800779a:	2330      	movs	r3, #48	; 0x30
 800779c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007960 <_vfiprintf_r+0x24c>
 80077a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077a4:	f04f 0901 	mov.w	r9, #1
 80077a8:	4623      	mov	r3, r4
 80077aa:	469a      	mov	sl, r3
 80077ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077b0:	b10a      	cbz	r2, 80077b6 <_vfiprintf_r+0xa2>
 80077b2:	2a25      	cmp	r2, #37	; 0x25
 80077b4:	d1f9      	bne.n	80077aa <_vfiprintf_r+0x96>
 80077b6:	ebba 0b04 	subs.w	fp, sl, r4
 80077ba:	d00b      	beq.n	80077d4 <_vfiprintf_r+0xc0>
 80077bc:	465b      	mov	r3, fp
 80077be:	4622      	mov	r2, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7ff ff94 	bl	80076f0 <__sfputs_r>
 80077c8:	3001      	adds	r0, #1
 80077ca:	f000 80aa 	beq.w	8007922 <_vfiprintf_r+0x20e>
 80077ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d0:	445a      	add	r2, fp
 80077d2:	9209      	str	r2, [sp, #36]	; 0x24
 80077d4:	f89a 3000 	ldrb.w	r3, [sl]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80a2 	beq.w	8007922 <_vfiprintf_r+0x20e>
 80077de:	2300      	movs	r3, #0
 80077e0:	f04f 32ff 	mov.w	r2, #4294967295
 80077e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e8:	f10a 0a01 	add.w	sl, sl, #1
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	9307      	str	r3, [sp, #28]
 80077f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077f4:	931a      	str	r3, [sp, #104]	; 0x68
 80077f6:	4654      	mov	r4, sl
 80077f8:	2205      	movs	r2, #5
 80077fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fe:	4858      	ldr	r0, [pc, #352]	; (8007960 <_vfiprintf_r+0x24c>)
 8007800:	f7f8 fcf6 	bl	80001f0 <memchr>
 8007804:	9a04      	ldr	r2, [sp, #16]
 8007806:	b9d8      	cbnz	r0, 8007840 <_vfiprintf_r+0x12c>
 8007808:	06d1      	lsls	r1, r2, #27
 800780a:	bf44      	itt	mi
 800780c:	2320      	movmi	r3, #32
 800780e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007812:	0713      	lsls	r3, r2, #28
 8007814:	bf44      	itt	mi
 8007816:	232b      	movmi	r3, #43	; 0x2b
 8007818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800781c:	f89a 3000 	ldrb.w	r3, [sl]
 8007820:	2b2a      	cmp	r3, #42	; 0x2a
 8007822:	d015      	beq.n	8007850 <_vfiprintf_r+0x13c>
 8007824:	9a07      	ldr	r2, [sp, #28]
 8007826:	4654      	mov	r4, sl
 8007828:	2000      	movs	r0, #0
 800782a:	f04f 0c0a 	mov.w	ip, #10
 800782e:	4621      	mov	r1, r4
 8007830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007834:	3b30      	subs	r3, #48	; 0x30
 8007836:	2b09      	cmp	r3, #9
 8007838:	d94e      	bls.n	80078d8 <_vfiprintf_r+0x1c4>
 800783a:	b1b0      	cbz	r0, 800786a <_vfiprintf_r+0x156>
 800783c:	9207      	str	r2, [sp, #28]
 800783e:	e014      	b.n	800786a <_vfiprintf_r+0x156>
 8007840:	eba0 0308 	sub.w	r3, r0, r8
 8007844:	fa09 f303 	lsl.w	r3, r9, r3
 8007848:	4313      	orrs	r3, r2
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	46a2      	mov	sl, r4
 800784e:	e7d2      	b.n	80077f6 <_vfiprintf_r+0xe2>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	1d19      	adds	r1, r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	9103      	str	r1, [sp, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bfbb      	ittet	lt
 800785c:	425b      	neglt	r3, r3
 800785e:	f042 0202 	orrlt.w	r2, r2, #2
 8007862:	9307      	strge	r3, [sp, #28]
 8007864:	9307      	strlt	r3, [sp, #28]
 8007866:	bfb8      	it	lt
 8007868:	9204      	strlt	r2, [sp, #16]
 800786a:	7823      	ldrb	r3, [r4, #0]
 800786c:	2b2e      	cmp	r3, #46	; 0x2e
 800786e:	d10c      	bne.n	800788a <_vfiprintf_r+0x176>
 8007870:	7863      	ldrb	r3, [r4, #1]
 8007872:	2b2a      	cmp	r3, #42	; 0x2a
 8007874:	d135      	bne.n	80078e2 <_vfiprintf_r+0x1ce>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	1d1a      	adds	r2, r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9203      	str	r2, [sp, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfb8      	it	lt
 8007882:	f04f 33ff 	movlt.w	r3, #4294967295
 8007886:	3402      	adds	r4, #2
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007970 <_vfiprintf_r+0x25c>
 800788e:	7821      	ldrb	r1, [r4, #0]
 8007890:	2203      	movs	r2, #3
 8007892:	4650      	mov	r0, sl
 8007894:	f7f8 fcac 	bl	80001f0 <memchr>
 8007898:	b140      	cbz	r0, 80078ac <_vfiprintf_r+0x198>
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	eba0 000a 	sub.w	r0, r0, sl
 80078a0:	fa03 f000 	lsl.w	r0, r3, r0
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	4303      	orrs	r3, r0
 80078a8:	3401      	adds	r4, #1
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b0:	482c      	ldr	r0, [pc, #176]	; (8007964 <_vfiprintf_r+0x250>)
 80078b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b6:	2206      	movs	r2, #6
 80078b8:	f7f8 fc9a 	bl	80001f0 <memchr>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d03f      	beq.n	8007940 <_vfiprintf_r+0x22c>
 80078c0:	4b29      	ldr	r3, [pc, #164]	; (8007968 <_vfiprintf_r+0x254>)
 80078c2:	bb1b      	cbnz	r3, 800790c <_vfiprintf_r+0x1f8>
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	3307      	adds	r3, #7
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	3308      	adds	r3, #8
 80078ce:	9303      	str	r3, [sp, #12]
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	443b      	add	r3, r7
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	e767      	b.n	80077a8 <_vfiprintf_r+0x94>
 80078d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078dc:	460c      	mov	r4, r1
 80078de:	2001      	movs	r0, #1
 80078e0:	e7a5      	b.n	800782e <_vfiprintf_r+0x11a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	3401      	adds	r4, #1
 80078e6:	9305      	str	r3, [sp, #20]
 80078e8:	4619      	mov	r1, r3
 80078ea:	f04f 0c0a 	mov.w	ip, #10
 80078ee:	4620      	mov	r0, r4
 80078f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f4:	3a30      	subs	r2, #48	; 0x30
 80078f6:	2a09      	cmp	r2, #9
 80078f8:	d903      	bls.n	8007902 <_vfiprintf_r+0x1ee>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0c5      	beq.n	800788a <_vfiprintf_r+0x176>
 80078fe:	9105      	str	r1, [sp, #20]
 8007900:	e7c3      	b.n	800788a <_vfiprintf_r+0x176>
 8007902:	fb0c 2101 	mla	r1, ip, r1, r2
 8007906:	4604      	mov	r4, r0
 8007908:	2301      	movs	r3, #1
 800790a:	e7f0      	b.n	80078ee <_vfiprintf_r+0x1da>
 800790c:	ab03      	add	r3, sp, #12
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	462a      	mov	r2, r5
 8007912:	4b16      	ldr	r3, [pc, #88]	; (800796c <_vfiprintf_r+0x258>)
 8007914:	a904      	add	r1, sp, #16
 8007916:	4630      	mov	r0, r6
 8007918:	f7fd fdd6 	bl	80054c8 <_printf_float>
 800791c:	4607      	mov	r7, r0
 800791e:	1c78      	adds	r0, r7, #1
 8007920:	d1d6      	bne.n	80078d0 <_vfiprintf_r+0x1bc>
 8007922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007924:	07d9      	lsls	r1, r3, #31
 8007926:	d405      	bmi.n	8007934 <_vfiprintf_r+0x220>
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	059a      	lsls	r2, r3, #22
 800792c:	d402      	bmi.n	8007934 <_vfiprintf_r+0x220>
 800792e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007930:	f000 faaf 	bl	8007e92 <__retarget_lock_release_recursive>
 8007934:	89ab      	ldrh	r3, [r5, #12]
 8007936:	065b      	lsls	r3, r3, #25
 8007938:	f53f af12 	bmi.w	8007760 <_vfiprintf_r+0x4c>
 800793c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800793e:	e711      	b.n	8007764 <_vfiprintf_r+0x50>
 8007940:	ab03      	add	r3, sp, #12
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	462a      	mov	r2, r5
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <_vfiprintf_r+0x258>)
 8007948:	a904      	add	r1, sp, #16
 800794a:	4630      	mov	r0, r6
 800794c:	f7fe f860 	bl	8005a10 <_printf_i>
 8007950:	e7e4      	b.n	800791c <_vfiprintf_r+0x208>
 8007952:	bf00      	nop
 8007954:	0800854c 	.word	0x0800854c
 8007958:	0800856c 	.word	0x0800856c
 800795c:	0800852c 	.word	0x0800852c
 8007960:	080083d4 	.word	0x080083d4
 8007964:	080083de 	.word	0x080083de
 8007968:	080054c9 	.word	0x080054c9
 800796c:	080076f1 	.word	0x080076f1
 8007970:	080083da 	.word	0x080083da

08007974 <__swbuf_r>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	460e      	mov	r6, r1
 8007978:	4614      	mov	r4, r2
 800797a:	4605      	mov	r5, r0
 800797c:	b118      	cbz	r0, 8007986 <__swbuf_r+0x12>
 800797e:	6983      	ldr	r3, [r0, #24]
 8007980:	b90b      	cbnz	r3, 8007986 <__swbuf_r+0x12>
 8007982:	f000 f9e7 	bl	8007d54 <__sinit>
 8007986:	4b21      	ldr	r3, [pc, #132]	; (8007a0c <__swbuf_r+0x98>)
 8007988:	429c      	cmp	r4, r3
 800798a:	d12b      	bne.n	80079e4 <__swbuf_r+0x70>
 800798c:	686c      	ldr	r4, [r5, #4]
 800798e:	69a3      	ldr	r3, [r4, #24]
 8007990:	60a3      	str	r3, [r4, #8]
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	071a      	lsls	r2, r3, #28
 8007996:	d52f      	bpl.n	80079f8 <__swbuf_r+0x84>
 8007998:	6923      	ldr	r3, [r4, #16]
 800799a:	b36b      	cbz	r3, 80079f8 <__swbuf_r+0x84>
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	1ac0      	subs	r0, r0, r3
 80079a2:	6963      	ldr	r3, [r4, #20]
 80079a4:	b2f6      	uxtb	r6, r6
 80079a6:	4283      	cmp	r3, r0
 80079a8:	4637      	mov	r7, r6
 80079aa:	dc04      	bgt.n	80079b6 <__swbuf_r+0x42>
 80079ac:	4621      	mov	r1, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f93c 	bl	8007c2c <_fflush_r>
 80079b4:	bb30      	cbnz	r0, 8007a04 <__swbuf_r+0x90>
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	60a3      	str	r3, [r4, #8]
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	701e      	strb	r6, [r3, #0]
 80079c4:	6963      	ldr	r3, [r4, #20]
 80079c6:	3001      	adds	r0, #1
 80079c8:	4283      	cmp	r3, r0
 80079ca:	d004      	beq.n	80079d6 <__swbuf_r+0x62>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	07db      	lsls	r3, r3, #31
 80079d0:	d506      	bpl.n	80079e0 <__swbuf_r+0x6c>
 80079d2:	2e0a      	cmp	r6, #10
 80079d4:	d104      	bne.n	80079e0 <__swbuf_r+0x6c>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 f927 	bl	8007c2c <_fflush_r>
 80079de:	b988      	cbnz	r0, 8007a04 <__swbuf_r+0x90>
 80079e0:	4638      	mov	r0, r7
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <__swbuf_r+0x9c>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d101      	bne.n	80079ee <__swbuf_r+0x7a>
 80079ea:	68ac      	ldr	r4, [r5, #8]
 80079ec:	e7cf      	b.n	800798e <__swbuf_r+0x1a>
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <__swbuf_r+0xa0>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	bf08      	it	eq
 80079f4:	68ec      	ldreq	r4, [r5, #12]
 80079f6:	e7ca      	b.n	800798e <__swbuf_r+0x1a>
 80079f8:	4621      	mov	r1, r4
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f81a 	bl	8007a34 <__swsetup_r>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d0cb      	beq.n	800799c <__swbuf_r+0x28>
 8007a04:	f04f 37ff 	mov.w	r7, #4294967295
 8007a08:	e7ea      	b.n	80079e0 <__swbuf_r+0x6c>
 8007a0a:	bf00      	nop
 8007a0c:	0800854c 	.word	0x0800854c
 8007a10:	0800856c 	.word	0x0800856c
 8007a14:	0800852c 	.word	0x0800852c

08007a18 <__ascii_wctomb>:
 8007a18:	b149      	cbz	r1, 8007a2e <__ascii_wctomb+0x16>
 8007a1a:	2aff      	cmp	r2, #255	; 0xff
 8007a1c:	bf85      	ittet	hi
 8007a1e:	238a      	movhi	r3, #138	; 0x8a
 8007a20:	6003      	strhi	r3, [r0, #0]
 8007a22:	700a      	strbls	r2, [r1, #0]
 8007a24:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a28:	bf98      	it	ls
 8007a2a:	2001      	movls	r0, #1
 8007a2c:	4770      	bx	lr
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4770      	bx	lr
	...

08007a34 <__swsetup_r>:
 8007a34:	4b32      	ldr	r3, [pc, #200]	; (8007b00 <__swsetup_r+0xcc>)
 8007a36:	b570      	push	{r4, r5, r6, lr}
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	b125      	cbz	r5, 8007a4a <__swsetup_r+0x16>
 8007a40:	69ab      	ldr	r3, [r5, #24]
 8007a42:	b913      	cbnz	r3, 8007a4a <__swsetup_r+0x16>
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f985 	bl	8007d54 <__sinit>
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <__swsetup_r+0xd0>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d10f      	bne.n	8007a70 <__swsetup_r+0x3c>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	d42c      	bmi.n	8007ab6 <__swsetup_r+0x82>
 8007a5c:	06dd      	lsls	r5, r3, #27
 8007a5e:	d411      	bmi.n	8007a84 <__swsetup_r+0x50>
 8007a60:	2309      	movs	r3, #9
 8007a62:	6033      	str	r3, [r6, #0]
 8007a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6e:	e03e      	b.n	8007aee <__swsetup_r+0xba>
 8007a70:	4b25      	ldr	r3, [pc, #148]	; (8007b08 <__swsetup_r+0xd4>)
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d101      	bne.n	8007a7a <__swsetup_r+0x46>
 8007a76:	68ac      	ldr	r4, [r5, #8]
 8007a78:	e7eb      	b.n	8007a52 <__swsetup_r+0x1e>
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <__swsetup_r+0xd8>)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	bf08      	it	eq
 8007a80:	68ec      	ldreq	r4, [r5, #12]
 8007a82:	e7e6      	b.n	8007a52 <__swsetup_r+0x1e>
 8007a84:	0758      	lsls	r0, r3, #29
 8007a86:	d512      	bpl.n	8007aae <__swsetup_r+0x7a>
 8007a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a8a:	b141      	cbz	r1, 8007a9e <__swsetup_r+0x6a>
 8007a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d002      	beq.n	8007a9a <__swsetup_r+0x66>
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7ff fb31 	bl	80070fc <_free_r>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f043 0308 	orr.w	r3, r3, #8
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	b94b      	cbnz	r3, 8007ace <__swsetup_r+0x9a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac4:	d003      	beq.n	8007ace <__swsetup_r+0x9a>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 fa09 	bl	8007ee0 <__smakebuf_r>
 8007ace:	89a0      	ldrh	r0, [r4, #12]
 8007ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad4:	f010 0301 	ands.w	r3, r0, #1
 8007ad8:	d00a      	beq.n	8007af0 <__swsetup_r+0xbc>
 8007ada:	2300      	movs	r3, #0
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	6963      	ldr	r3, [r4, #20]
 8007ae0:	425b      	negs	r3, r3
 8007ae2:	61a3      	str	r3, [r4, #24]
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b943      	cbnz	r3, 8007afa <__swsetup_r+0xc6>
 8007ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aec:	d1ba      	bne.n	8007a64 <__swsetup_r+0x30>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	0781      	lsls	r1, r0, #30
 8007af2:	bf58      	it	pl
 8007af4:	6963      	ldrpl	r3, [r4, #20]
 8007af6:	60a3      	str	r3, [r4, #8]
 8007af8:	e7f4      	b.n	8007ae4 <__swsetup_r+0xb0>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7f7      	b.n	8007aee <__swsetup_r+0xba>
 8007afe:	bf00      	nop
 8007b00:	20000064 	.word	0x20000064
 8007b04:	0800854c 	.word	0x0800854c
 8007b08:	0800856c 	.word	0x0800856c
 8007b0c:	0800852c 	.word	0x0800852c

08007b10 <abort>:
 8007b10:	b508      	push	{r3, lr}
 8007b12:	2006      	movs	r0, #6
 8007b14:	f000 fa54 	bl	8007fc0 <raise>
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7fa fad5 	bl	80020c8 <_exit>
	...

08007b20 <__sflush_r>:
 8007b20:	898a      	ldrh	r2, [r1, #12]
 8007b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	0710      	lsls	r0, r2, #28
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	d458      	bmi.n	8007be0 <__sflush_r+0xc0>
 8007b2e:	684b      	ldr	r3, [r1, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dc05      	bgt.n	8007b40 <__sflush_r+0x20>
 8007b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc02      	bgt.n	8007b40 <__sflush_r+0x20>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d0f9      	beq.n	8007b3a <__sflush_r+0x1a>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b4c:	682f      	ldr	r7, [r5, #0]
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	d032      	beq.n	8007bb8 <__sflush_r+0x98>
 8007b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	075a      	lsls	r2, r3, #29
 8007b58:	d505      	bpl.n	8007b66 <__sflush_r+0x46>
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	1ac0      	subs	r0, r0, r3
 8007b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b60:	b10b      	cbz	r3, 8007b66 <__sflush_r+0x46>
 8007b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b64:	1ac0      	subs	r0, r0, r3
 8007b66:	2300      	movs	r3, #0
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b0      	blx	r6
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	d106      	bne.n	8007b86 <__sflush_r+0x66>
 8007b78:	6829      	ldr	r1, [r5, #0]
 8007b7a:	291d      	cmp	r1, #29
 8007b7c:	d82c      	bhi.n	8007bd8 <__sflush_r+0xb8>
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	; (8007c28 <__sflush_r+0x108>)
 8007b80:	40ca      	lsrs	r2, r1
 8007b82:	07d6      	lsls	r6, r2, #31
 8007b84:	d528      	bpl.n	8007bd8 <__sflush_r+0xb8>
 8007b86:	2200      	movs	r2, #0
 8007b88:	6062      	str	r2, [r4, #4]
 8007b8a:	04d9      	lsls	r1, r3, #19
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	d504      	bpl.n	8007b9c <__sflush_r+0x7c>
 8007b92:	1c42      	adds	r2, r0, #1
 8007b94:	d101      	bne.n	8007b9a <__sflush_r+0x7a>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b903      	cbnz	r3, 8007b9c <__sflush_r+0x7c>
 8007b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	d0ca      	beq.n	8007b3a <__sflush_r+0x1a>
 8007ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d002      	beq.n	8007bb2 <__sflush_r+0x92>
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff faa5 	bl	80070fc <_free_r>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8007bb6:	e7c1      	b.n	8007b3c <__sflush_r+0x1c>
 8007bb8:	6a21      	ldr	r1, [r4, #32]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b0      	blx	r6
 8007bc0:	1c41      	adds	r1, r0, #1
 8007bc2:	d1c7      	bne.n	8007b54 <__sflush_r+0x34>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0c4      	beq.n	8007b54 <__sflush_r+0x34>
 8007bca:	2b1d      	cmp	r3, #29
 8007bcc:	d001      	beq.n	8007bd2 <__sflush_r+0xb2>
 8007bce:	2b16      	cmp	r3, #22
 8007bd0:	d101      	bne.n	8007bd6 <__sflush_r+0xb6>
 8007bd2:	602f      	str	r7, [r5, #0]
 8007bd4:	e7b1      	b.n	8007b3a <__sflush_r+0x1a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	e7ad      	b.n	8007b3c <__sflush_r+0x1c>
 8007be0:	690f      	ldr	r7, [r1, #16]
 8007be2:	2f00      	cmp	r7, #0
 8007be4:	d0a9      	beq.n	8007b3a <__sflush_r+0x1a>
 8007be6:	0793      	lsls	r3, r2, #30
 8007be8:	680e      	ldr	r6, [r1, #0]
 8007bea:	bf08      	it	eq
 8007bec:	694b      	ldreq	r3, [r1, #20]
 8007bee:	600f      	str	r7, [r1, #0]
 8007bf0:	bf18      	it	ne
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	eba6 0807 	sub.w	r8, r6, r7
 8007bf8:	608b      	str	r3, [r1, #8]
 8007bfa:	f1b8 0f00 	cmp.w	r8, #0
 8007bfe:	dd9c      	ble.n	8007b3a <__sflush_r+0x1a>
 8007c00:	6a21      	ldr	r1, [r4, #32]
 8007c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c04:	4643      	mov	r3, r8
 8007c06:	463a      	mov	r2, r7
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	dc06      	bgt.n	8007c1e <__sflush_r+0xfe>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	e78e      	b.n	8007b3c <__sflush_r+0x1c>
 8007c1e:	4407      	add	r7, r0
 8007c20:	eba8 0800 	sub.w	r8, r8, r0
 8007c24:	e7e9      	b.n	8007bfa <__sflush_r+0xda>
 8007c26:	bf00      	nop
 8007c28:	20400001 	.word	0x20400001

08007c2c <_fflush_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b913      	cbnz	r3, 8007c3c <_fflush_r+0x10>
 8007c36:	2500      	movs	r5, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	b118      	cbz	r0, 8007c46 <_fflush_r+0x1a>
 8007c3e:	6983      	ldr	r3, [r0, #24]
 8007c40:	b90b      	cbnz	r3, 8007c46 <_fflush_r+0x1a>
 8007c42:	f000 f887 	bl	8007d54 <__sinit>
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <_fflush_r+0x6c>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	d11b      	bne.n	8007c84 <_fflush_r+0x58>
 8007c4c:	686c      	ldr	r4, [r5, #4]
 8007c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ef      	beq.n	8007c36 <_fflush_r+0xa>
 8007c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c58:	07d0      	lsls	r0, r2, #31
 8007c5a:	d404      	bmi.n	8007c66 <_fflush_r+0x3a>
 8007c5c:	0599      	lsls	r1, r3, #22
 8007c5e:	d402      	bmi.n	8007c66 <_fflush_r+0x3a>
 8007c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c62:	f000 f915 	bl	8007e90 <__retarget_lock_acquire_recursive>
 8007c66:	4628      	mov	r0, r5
 8007c68:	4621      	mov	r1, r4
 8007c6a:	f7ff ff59 	bl	8007b20 <__sflush_r>
 8007c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c70:	07da      	lsls	r2, r3, #31
 8007c72:	4605      	mov	r5, r0
 8007c74:	d4e0      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	059b      	lsls	r3, r3, #22
 8007c7a:	d4dd      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7e:	f000 f908 	bl	8007e92 <__retarget_lock_release_recursive>
 8007c82:	e7d9      	b.n	8007c38 <_fflush_r+0xc>
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <_fflush_r+0x70>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d101      	bne.n	8007c8e <_fflush_r+0x62>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	e7df      	b.n	8007c4e <_fflush_r+0x22>
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <_fflush_r+0x74>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	bf08      	it	eq
 8007c94:	68ec      	ldreq	r4, [r5, #12]
 8007c96:	e7da      	b.n	8007c4e <_fflush_r+0x22>
 8007c98:	0800854c 	.word	0x0800854c
 8007c9c:	0800856c 	.word	0x0800856c
 8007ca0:	0800852c 	.word	0x0800852c

08007ca4 <std>:
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb2:	6083      	str	r3, [r0, #8]
 8007cb4:	8181      	strh	r1, [r0, #12]
 8007cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb8:	81c2      	strh	r2, [r0, #14]
 8007cba:	6183      	str	r3, [r0, #24]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	305c      	adds	r0, #92	; 0x5c
 8007cc2:	f7fd fb59 	bl	8005378 <memset>
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x38>)
 8007cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std+0x3c>)
 8007ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std+0x40>)
 8007cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x44>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	08007ff9 	.word	0x08007ff9
 8007ce0:	0800801b 	.word	0x0800801b
 8007ce4:	08008053 	.word	0x08008053
 8007ce8:	08008077 	.word	0x08008077

08007cec <_cleanup_r>:
 8007cec:	4901      	ldr	r1, [pc, #4]	; (8007cf4 <_cleanup_r+0x8>)
 8007cee:	f000 b8af 	b.w	8007e50 <_fwalk_reent>
 8007cf2:	bf00      	nop
 8007cf4:	08007c2d 	.word	0x08007c2d

08007cf8 <__sfmoreglue>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	2268      	movs	r2, #104	; 0x68
 8007cfc:	1e4d      	subs	r5, r1, #1
 8007cfe:	4355      	muls	r5, r2
 8007d00:	460e      	mov	r6, r1
 8007d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d06:	f7ff fa65 	bl	80071d4 <_malloc_r>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b140      	cbz	r0, 8007d20 <__sfmoreglue+0x28>
 8007d0e:	2100      	movs	r1, #0
 8007d10:	e9c0 1600 	strd	r1, r6, [r0]
 8007d14:	300c      	adds	r0, #12
 8007d16:	60a0      	str	r0, [r4, #8]
 8007d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d1c:	f7fd fb2c 	bl	8005378 <memset>
 8007d20:	4620      	mov	r0, r4
 8007d22:	bd70      	pop	{r4, r5, r6, pc}

08007d24 <__sfp_lock_acquire>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__sfp_lock_acquire+0x8>)
 8007d26:	f000 b8b3 	b.w	8007e90 <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	200003b5 	.word	0x200003b5

08007d30 <__sfp_lock_release>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_release+0x8>)
 8007d32:	f000 b8ae 	b.w	8007e92 <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	200003b5 	.word	0x200003b5

08007d3c <__sinit_lock_acquire>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sinit_lock_acquire+0x8>)
 8007d3e:	f000 b8a7 	b.w	8007e90 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	200003b6 	.word	0x200003b6

08007d48 <__sinit_lock_release>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sinit_lock_release+0x8>)
 8007d4a:	f000 b8a2 	b.w	8007e92 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200003b6 	.word	0x200003b6

08007d54 <__sinit>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	f7ff fff0 	bl	8007d3c <__sinit_lock_acquire>
 8007d5c:	69a3      	ldr	r3, [r4, #24]
 8007d5e:	b11b      	cbz	r3, 8007d68 <__sinit+0x14>
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f7ff bff0 	b.w	8007d48 <__sinit_lock_release>
 8007d68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <__sinit+0x68>)
 8007d70:	4a13      	ldr	r2, [pc, #76]	; (8007dc0 <__sinit+0x6c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	bf04      	itt	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	61a3      	streq	r3, [r4, #24]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f820 	bl	8007dc4 <__sfp>
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 f81c 	bl	8007dc4 <__sfp>
 8007d8c:	60a0      	str	r0, [r4, #8]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f818 	bl	8007dc4 <__sfp>
 8007d94:	2200      	movs	r2, #0
 8007d96:	60e0      	str	r0, [r4, #12]
 8007d98:	2104      	movs	r1, #4
 8007d9a:	6860      	ldr	r0, [r4, #4]
 8007d9c:	f7ff ff82 	bl	8007ca4 <std>
 8007da0:	68a0      	ldr	r0, [r4, #8]
 8007da2:	2201      	movs	r2, #1
 8007da4:	2109      	movs	r1, #9
 8007da6:	f7ff ff7d 	bl	8007ca4 <std>
 8007daa:	68e0      	ldr	r0, [r4, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	2112      	movs	r1, #18
 8007db0:	f7ff ff78 	bl	8007ca4 <std>
 8007db4:	2301      	movs	r3, #1
 8007db6:	61a3      	str	r3, [r4, #24]
 8007db8:	e7d2      	b.n	8007d60 <__sinit+0xc>
 8007dba:	bf00      	nop
 8007dbc:	080081b4 	.word	0x080081b4
 8007dc0:	08007ced 	.word	0x08007ced

08007dc4 <__sfp>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	f7ff ffac 	bl	8007d24 <__sfp_lock_acquire>
 8007dcc:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <__sfp+0x84>)
 8007dce:	681e      	ldr	r6, [r3, #0]
 8007dd0:	69b3      	ldr	r3, [r6, #24]
 8007dd2:	b913      	cbnz	r3, 8007dda <__sfp+0x16>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff ffbd 	bl	8007d54 <__sinit>
 8007dda:	3648      	adds	r6, #72	; 0x48
 8007ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	d503      	bpl.n	8007dec <__sfp+0x28>
 8007de4:	6833      	ldr	r3, [r6, #0]
 8007de6:	b30b      	cbz	r3, 8007e2c <__sfp+0x68>
 8007de8:	6836      	ldr	r6, [r6, #0]
 8007dea:	e7f7      	b.n	8007ddc <__sfp+0x18>
 8007dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007df0:	b9d5      	cbnz	r5, 8007e28 <__sfp+0x64>
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <__sfp+0x88>)
 8007df4:	60e3      	str	r3, [r4, #12]
 8007df6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dfa:	6665      	str	r5, [r4, #100]	; 0x64
 8007dfc:	f000 f847 	bl	8007e8e <__retarget_lock_init_recursive>
 8007e00:	f7ff ff96 	bl	8007d30 <__sfp_lock_release>
 8007e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e0c:	6025      	str	r5, [r4, #0]
 8007e0e:	61a5      	str	r5, [r4, #24]
 8007e10:	2208      	movs	r2, #8
 8007e12:	4629      	mov	r1, r5
 8007e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e18:	f7fd faae 	bl	8005378 <memset>
 8007e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e24:	4620      	mov	r0, r4
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e28:	3468      	adds	r4, #104	; 0x68
 8007e2a:	e7d9      	b.n	8007de0 <__sfp+0x1c>
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff ff62 	bl	8007cf8 <__sfmoreglue>
 8007e34:	4604      	mov	r4, r0
 8007e36:	6030      	str	r0, [r6, #0]
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d1d5      	bne.n	8007de8 <__sfp+0x24>
 8007e3c:	f7ff ff78 	bl	8007d30 <__sfp_lock_release>
 8007e40:	230c      	movs	r3, #12
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	e7ee      	b.n	8007e24 <__sfp+0x60>
 8007e46:	bf00      	nop
 8007e48:	080081b4 	.word	0x080081b4
 8007e4c:	ffff0001 	.word	0xffff0001

08007e50 <_fwalk_reent>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	4606      	mov	r6, r0
 8007e56:	4688      	mov	r8, r1
 8007e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e5c:	2700      	movs	r7, #0
 8007e5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e62:	f1b9 0901 	subs.w	r9, r9, #1
 8007e66:	d505      	bpl.n	8007e74 <_fwalk_reent+0x24>
 8007e68:	6824      	ldr	r4, [r4, #0]
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	d1f7      	bne.n	8007e5e <_fwalk_reent+0xe>
 8007e6e:	4638      	mov	r0, r7
 8007e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e74:	89ab      	ldrh	r3, [r5, #12]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d907      	bls.n	8007e8a <_fwalk_reent+0x3a>
 8007e7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	d003      	beq.n	8007e8a <_fwalk_reent+0x3a>
 8007e82:	4629      	mov	r1, r5
 8007e84:	4630      	mov	r0, r6
 8007e86:	47c0      	blx	r8
 8007e88:	4307      	orrs	r7, r0
 8007e8a:	3568      	adds	r5, #104	; 0x68
 8007e8c:	e7e9      	b.n	8007e62 <_fwalk_reent+0x12>

08007e8e <__retarget_lock_init_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <__retarget_lock_acquire_recursive>:
 8007e90:	4770      	bx	lr

08007e92 <__retarget_lock_release_recursive>:
 8007e92:	4770      	bx	lr

08007e94 <__swhatbuf_r>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	460e      	mov	r6, r1
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	b096      	sub	sp, #88	; 0x58
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	461d      	mov	r5, r3
 8007ea4:	da08      	bge.n	8007eb8 <__swhatbuf_r+0x24>
 8007ea6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	602a      	str	r2, [r5, #0]
 8007eae:	061a      	lsls	r2, r3, #24
 8007eb0:	d410      	bmi.n	8007ed4 <__swhatbuf_r+0x40>
 8007eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb6:	e00e      	b.n	8007ed6 <__swhatbuf_r+0x42>
 8007eb8:	466a      	mov	r2, sp
 8007eba:	f000 f903 	bl	80080c4 <_fstat_r>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	dbf1      	blt.n	8007ea6 <__swhatbuf_r+0x12>
 8007ec2:	9a01      	ldr	r2, [sp, #4]
 8007ec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ecc:	425a      	negs	r2, r3
 8007ece:	415a      	adcs	r2, r3
 8007ed0:	602a      	str	r2, [r5, #0]
 8007ed2:	e7ee      	b.n	8007eb2 <__swhatbuf_r+0x1e>
 8007ed4:	2340      	movs	r3, #64	; 0x40
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	b016      	add	sp, #88	; 0x58
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ee0 <__smakebuf_r>:
 8007ee0:	898b      	ldrh	r3, [r1, #12]
 8007ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ee4:	079d      	lsls	r5, r3, #30
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	d507      	bpl.n	8007efc <__smakebuf_r+0x1c>
 8007eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	6163      	str	r3, [r4, #20]
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	ab01      	add	r3, sp, #4
 8007efe:	466a      	mov	r2, sp
 8007f00:	f7ff ffc8 	bl	8007e94 <__swhatbuf_r>
 8007f04:	9900      	ldr	r1, [sp, #0]
 8007f06:	4605      	mov	r5, r0
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff f963 	bl	80071d4 <_malloc_r>
 8007f0e:	b948      	cbnz	r0, 8007f24 <__smakebuf_r+0x44>
 8007f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f14:	059a      	lsls	r2, r3, #22
 8007f16:	d4ef      	bmi.n	8007ef8 <__smakebuf_r+0x18>
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	f043 0302 	orr.w	r3, r3, #2
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	e7e3      	b.n	8007eec <__smakebuf_r+0xc>
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <__smakebuf_r+0x7c>)
 8007f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	6020      	str	r0, [r4, #0]
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	6163      	str	r3, [r4, #20]
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	6120      	str	r0, [r4, #16]
 8007f3a:	b15b      	cbz	r3, 8007f54 <__smakebuf_r+0x74>
 8007f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f40:	4630      	mov	r0, r6
 8007f42:	f000 f8d1 	bl	80080e8 <_isatty_r>
 8007f46:	b128      	cbz	r0, 8007f54 <__smakebuf_r+0x74>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	f043 0301 	orr.w	r3, r3, #1
 8007f52:	81a3      	strh	r3, [r4, #12]
 8007f54:	89a0      	ldrh	r0, [r4, #12]
 8007f56:	4305      	orrs	r5, r0
 8007f58:	81a5      	strh	r5, [r4, #12]
 8007f5a:	e7cd      	b.n	8007ef8 <__smakebuf_r+0x18>
 8007f5c:	08007ced 	.word	0x08007ced

08007f60 <_malloc_usable_size_r>:
 8007f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f64:	1f18      	subs	r0, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bfbc      	itt	lt
 8007f6a:	580b      	ldrlt	r3, [r1, r0]
 8007f6c:	18c0      	addlt	r0, r0, r3
 8007f6e:	4770      	bx	lr

08007f70 <_raise_r>:
 8007f70:	291f      	cmp	r1, #31
 8007f72:	b538      	push	{r3, r4, r5, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	d904      	bls.n	8007f84 <_raise_r+0x14>
 8007f7a:	2316      	movs	r3, #22
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f86:	b112      	cbz	r2, 8007f8e <_raise_r+0x1e>
 8007f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f8c:	b94b      	cbnz	r3, 8007fa2 <_raise_r+0x32>
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 f830 	bl	8007ff4 <_getpid_r>
 8007f94:	462a      	mov	r2, r5
 8007f96:	4601      	mov	r1, r0
 8007f98:	4620      	mov	r0, r4
 8007f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f9e:	f000 b817 	b.w	8007fd0 <_kill_r>
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d00a      	beq.n	8007fbc <_raise_r+0x4c>
 8007fa6:	1c59      	adds	r1, r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <_raise_r+0x42>
 8007faa:	2316      	movs	r3, #22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e7e7      	b.n	8007f82 <_raise_r+0x12>
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fb8:	4628      	mov	r0, r5
 8007fba:	4798      	blx	r3
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e7e0      	b.n	8007f82 <_raise_r+0x12>

08007fc0 <raise>:
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <raise+0xc>)
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f7ff bfd3 	b.w	8007f70 <_raise_r>
 8007fca:	bf00      	nop
 8007fcc:	20000064 	.word	0x20000064

08007fd0 <_kill_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	; (8007ff0 <_kill_r+0x20>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f7fa f863 	bl	80020a8 <_kill>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d102      	bne.n	8007fec <_kill_r+0x1c>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b103      	cbz	r3, 8007fec <_kill_r+0x1c>
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	200003b0 	.word	0x200003b0

08007ff4 <_getpid_r>:
 8007ff4:	f7fa b850 	b.w	8002098 <_getpid>

08007ff8 <__sread>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	f000 f894 	bl	800812c <_read_r>
 8008004:	2800      	cmp	r0, #0
 8008006:	bfab      	itete	ge
 8008008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800800a:	89a3      	ldrhlt	r3, [r4, #12]
 800800c:	181b      	addge	r3, r3, r0
 800800e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008012:	bfac      	ite	ge
 8008014:	6563      	strge	r3, [r4, #84]	; 0x54
 8008016:	81a3      	strhlt	r3, [r4, #12]
 8008018:	bd10      	pop	{r4, pc}

0800801a <__swrite>:
 800801a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	461f      	mov	r7, r3
 8008020:	898b      	ldrh	r3, [r1, #12]
 8008022:	05db      	lsls	r3, r3, #23
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4616      	mov	r6, r2
 800802a:	d505      	bpl.n	8008038 <__swrite+0x1e>
 800802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008030:	2302      	movs	r3, #2
 8008032:	2200      	movs	r2, #0
 8008034:	f000 f868 	bl	8008108 <_lseek_r>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800803e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	4632      	mov	r2, r6
 8008046:	463b      	mov	r3, r7
 8008048:	4628      	mov	r0, r5
 800804a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800804e:	f000 b817 	b.w	8008080 <_write_r>

08008052 <__sseek>:
 8008052:	b510      	push	{r4, lr}
 8008054:	460c      	mov	r4, r1
 8008056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805a:	f000 f855 	bl	8008108 <_lseek_r>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	bf15      	itete	ne
 8008064:	6560      	strne	r0, [r4, #84]	; 0x54
 8008066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800806a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800806e:	81a3      	strheq	r3, [r4, #12]
 8008070:	bf18      	it	ne
 8008072:	81a3      	strhne	r3, [r4, #12]
 8008074:	bd10      	pop	{r4, pc}

08008076 <__sclose>:
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 b813 	b.w	80080a4 <_close_r>
	...

08008080 <_write_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d07      	ldr	r5, [pc, #28]	; (80080a0 <_write_r+0x20>)
 8008084:	4604      	mov	r4, r0
 8008086:	4608      	mov	r0, r1
 8008088:	4611      	mov	r1, r2
 800808a:	2200      	movs	r2, #0
 800808c:	602a      	str	r2, [r5, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	f7fa f841 	bl	8002116 <_write>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_write_r+0x1e>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_write_r+0x1e>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	200003b0 	.word	0x200003b0

080080a4 <_close_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d06      	ldr	r5, [pc, #24]	; (80080c0 <_close_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f7fa f84d 	bl	800214e <_close>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_close_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_close_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	200003b0 	.word	0x200003b0

080080c4 <_fstat_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_fstat_r+0x20>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	4604      	mov	r4, r0
 80080cc:	4608      	mov	r0, r1
 80080ce:	4611      	mov	r1, r2
 80080d0:	602b      	str	r3, [r5, #0]
 80080d2:	f7fa f848 	bl	8002166 <_fstat>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	d102      	bne.n	80080e0 <_fstat_r+0x1c>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	b103      	cbz	r3, 80080e0 <_fstat_r+0x1c>
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
 80080e2:	bf00      	nop
 80080e4:	200003b0 	.word	0x200003b0

080080e8 <_isatty_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <_isatty_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7fa f847 	bl	8002186 <_isatty>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_isatty_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_isatty_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	200003b0 	.word	0x200003b0

08008108 <_lseek_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_lseek_r+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	2200      	movs	r2, #0
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7fa f840 	bl	800219c <_lseek>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_lseek_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_lseek_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	200003b0 	.word	0x200003b0

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_read_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 ffce 	bl	80020dc <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	200003b0 	.word	0x200003b0

08008150 <_init>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr

0800815c <_fini>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr
